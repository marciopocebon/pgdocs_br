msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/pltcl.xml:3(title)
msgid "PL/Tcl - Tcl Procedural Language"
msgstr ""

#: xml/pltcl.xml:5(primary)
msgid "PL/Tcl"
msgstr ""

#: xml/pltcl.xml:8(primary)
msgid "Tcl"
msgstr ""

#: xml/pltcl.xml:10(para)
msgid "PL/Tcl is a loadable procedural language for the <productname>PostgreSQL</productname>database system that enables the <ulink url=\"http://www.tcl.tk/\">Tcl language</ulink>to be used to write functions and trigger procedures."
msgstr ""

#: xml/pltcl.xml:16(title)
msgid "Overview"
msgstr ""

#: xml/pltcl.xml:17(para)
msgid "PL/Tcl offers most of the capabilities a function writer has in the C language, with a few restrictions, and with the addition of the powerful string processing libraries that are available for Tcl."
msgstr ""

#: xml/pltcl.xml:21(para)
msgid "One compelling <emphasis>good</emphasis>restriction is that everything is executed from within the safety of the context of a Tcl interpreter. In addition to the limited command set of safe Tcl, only a few commands are available to access the database via SPI and to raise messages via <function>elog()</function>. PL/Tcl provides no way to access internals of the database server or to gain OS-level access under the permissions of the <productname>PostgreSQL</productname>server process, as a C function can do. Thus, unprivileged database users can be trusted to use this language; it does not give them unlimited authority."
msgstr ""

#: xml/pltcl.xml:34(para)
msgid "The other notable implementation restriction is that Tcl functions cannot be used to create input/output functions for new data types."
msgstr ""

#: xml/pltcl.xml:37(para)
msgid "Sometimes it is desirable to write Tcl functions that are not restricted to safe Tcl. For example, one might want a Tcl function that sends email. To handle these cases, there is a variant of <application>PL/Tcl</application>called <literal>PL/TclU</literal>(for untrusted Tcl). This is exactly the same language except that a full Tcl interpreter is used. <emphasis>If <application>PL/TclU</application>is used, it must be installed as an untrusted procedural language</emphasis>so that only database superusers can create functions in it. The writer of a <application>PL/TclU</application>function must take care that the function cannot be used to do anything unwanted, since it will be able to do anything that could be done by a user logged in as the database administrator."
msgstr ""

#: xml/pltcl.xml:53(para)
msgid "The shared object code for the <application>PL/Tcl</application>and <application>PL/TclU</application>call handlers is automatically built and installed in the <productname>PostgreSQL</productname>library directory if Tcl support is specified in the configuration step of the installation procedure. To install <application>PL/Tcl</application>and/or <application>PL/TclU</application>in a particular database, use the <command>CREATE EXTENSION</command>command or the <command>createlang</command>program, for example <literal>createlang pltcl <replaceable>dbname</replaceable></literal>or <literal>createlang pltclu <replaceable>dbname</replaceable></literal>."
msgstr ""

#: xml/pltcl.xml:71(title)
msgid "PL/Tcl Functions and Arguments"
msgstr ""

#: xml/pltcl.xml:75(programlisting)
#, no-wrap
msgid "CREATE FUNCTION \n    <replaceable>funcname</replaceable>( \n    <replaceable>argument-types</replaceable>) RETURNS \n    <replaceable>return-type</replaceable>AS $$ # PL/Tcl function\n    body $$ LANGUAGE pltcl;"
msgstr ""

#: xml/pltcl.xml:72(para)
msgid "To create a function in the <application>PL/Tcl</application>language, use the standard <xref linkend=\"sql-createfunction\">syntax: <placeholder-1/><application>PL/TclU</application>is the same, except that the language has to be specified as <literal>pltclu</literal>.</xref>"
msgstr ""

#: xml/pltcl.xml:83(para)
msgid "The body of the function is simply a piece of Tcl script. When the function is called, the argument values are passed as variables <literal>$1</literal>... <literal>$ <replaceable>n</replaceable></literal>to the Tcl script. The result is returned from the Tcl code in the usual way, with a <literal>return</literal>statement."
msgstr ""

#: xml/pltcl.xml:93(programlisting)
#, no-wrap
msgid "CREATE FUNCTION tcl_max(integer, integer)\n    RETURNS integer AS $$ if {$1 $2} {return $1} return $2 $$\n    LANGUAGE pltcl STRICT;"
msgstr ""

#: xml/pltcl.xml:91(para)
msgid "For example, a function returning the greater of two integer values could be defined as: <placeholder-1/>Note the clause <literal>STRICT</literal>, which saves us from having to think about null input values: if a null value is passed, the function will not be called at all, but will just return a null result automatically."
msgstr ""

#: xml/pltcl.xml:110(programlisting)
#, no-wrap
msgid "CREATE FUNCTION tcl_max(integer, integer)\n    RETURNS integer AS $$ if {[argisnull 1]} { if {[argisnull 2]} {\n    return_null } return $2 } if {[argisnull 2]} { return $1 } if\n    {$1 $2} {return $1} return $2 $$ LANGUAGE\n    pltcl;"
msgstr ""

#: xml/pltcl.xml:100(para)
msgid "In a nonstrict function, if the actual value of an argument is null, the corresponding <literal>$ <replaceable>n</replaceable></literal>variable will be set to an empty string. To detect whether a particular argument is null, use the function <literal>argisnull</literal>. For example, suppose that we wanted <function>tcl_max</function>with one null and one nonnull argument to return the nonnull argument, rather than null: <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:115(para)
msgid "As shown above, to return a null value from a PL/Tcl function, execute <literal>return_null</literal>. This can be done whether the function is strict or not."
msgstr ""

#: xml/pltcl.xml:124(programlisting)
#, no-wrap
msgid "CREATE TABLE employee ( name text, salary\n    integer, age integer ); CREATE FUNCTION overpaid(employee)\n    RETURNS boolean AS $$ if {200000.0 $1(salary)} { return \"t\" }\n    if {$1(age) 30 100000.0 $1(salary)} { return \"t\" } return \"f\"\n    $$ LANGUAGE pltcl;"
msgstr ""

#: xml/pltcl.xml:119(para)
msgid "Composite-type arguments are passed to the function as Tcl arrays. The element names of the array are the attribute names of the composite type. If an attribute in the passed row has the null value, it will not appear in the array. Here is an example: <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:129(para)
msgid "There is currently no support for returning a composite-type result value, nor for returning sets."
msgstr ""

#: xml/pltcl.xml:131(para)
msgid "<application>PL/Tcl</application>does not currently have full support for domain types: it treats a domain the same as the underlying scalar type. This means that constraints associated with the domain will not be enforced. This is not an issue for function arguments, but it is a hazard if you declare a <application>PL/Tcl</application>function as returning a domain type."
msgstr ""

#: xml/pltcl.xml:141(title)
msgid "Data Values in PL/Tcl"
msgstr ""

#: xml/pltcl.xml:142(para)
msgid "The argument values supplied to a PL/Tcl function's code are simply the input arguments converted to text form (just as if they had been displayed by a <command>SELECT</command>statement). Conversely, the <literal>return</literal>command will accept any string that is acceptable input format for the function's declared return type. So, within the PL/Tcl function, all values are just text strings."
msgstr ""

#: xml/pltcl.xml:152(title)
msgid "Global Data in PL/Tcl"
msgstr ""

#: xml/pltcl.xml:154(primary)
msgid "global data"
msgstr ""

#: xml/pltcl.xml:155(secondary) xml/pltcl.xml:387(secondary) xml/pltcl.xml:439(secondary) xml/pltcl.xml:478(secondary) xml/pltcl.xml:670(secondary)
msgid "in PL/Tcl"
msgstr ""

#: xml/pltcl.xml:157(para)
msgid "Sometimes it is useful to have some global data that is held between two calls to a function or is shared between different functions. This is easily done in PL/Tcl, but there are some restrictions that must be understood."
msgstr ""

#: xml/pltcl.xml:161(para)
msgid "For security reasons, PL/Tcl executes functions called by any one SQL role in a separate Tcl interpreter for that role. This prevents accidental or malicious interference by one user with the behavior of another user's PL/Tcl functions. Each such interpreter will have its own values for any <quote>global</quote>Tcl variables. Thus, two PL/Tcl functions will share the same global variables if and only if they are executed by the same SQL role. In an application wherein a single session executes code under multiple SQL roles (via <literal>SECURITY DEFINER</literal>functions, use of <command>SET ROLE</command>, etc) you may need to take explicit steps to ensure that PL/Tcl functions can share data. To do that, make sure that functions that should communicate are owned by the same user, and mark them <literal>SECURITY DEFINER</literal>. You must of course take care that such functions can't be used to do anything unintended."
msgstr ""

#: xml/pltcl.xml:178(para)
msgid "All PL/TclU functions used in a session execute in the same Tcl interpreter, which of course is distinct from the interpreter(s) used for PL/Tcl functions. So global data is automatically shared between PL/TclU functions. This is not considered a security risk because all PL/TclU functions execute at the same trust level, namely that of a database superuser."
msgstr ""

#: xml/pltcl.xml:185(para)
msgid "To help protect PL/Tcl functions from unintentionally interfering with each other, a global array is made available to each function via the <function>upvar</function>command. The global name of this variable is the function's internal name, and the local name is <literal>GD</literal>. It is recommended that <literal>GD</literal>be used for persistent private data of a function. Use regular Tcl global variables only for values that you specifically intend to be shared among multiple functions. (Note that the <literal>GD</literal>arrays are only global within a particular interpreter, so they do not bypass the security restrictions mentioned above.)"
msgstr ""

#: xml/pltcl.xml:199(para)
msgid "An example of using <literal>GD</literal>appears in the <function>spi_execp</function>example below."
msgstr ""

#: xml/pltcl.xml:204(title)
msgid "Database Access from PL/Tcl"
msgstr ""

#: xml/pltcl.xml:211(function)
msgid "spi_exec"
msgstr ""

#: xml/pltcl.xml:213(replaceable) xml/pltcl.xml:321(replaceable)
msgid "n"
msgstr ""

#: xml/pltcl.xml:212(optional) xml/pltcl.xml:320(optional)
msgid "-count <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:215(replaceable) xml/pltcl.xml:323(replaceable)
msgid "name"
msgstr ""

#: xml/pltcl.xml:214(optional) xml/pltcl.xml:322(optional)
msgid "-array <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:216(replaceable)
msgid "command"
msgstr ""

#: xml/pltcl.xml:218(replaceable) xml/pltcl.xml:331(replaceable)
msgid "loop-body"
msgstr ""

#: xml/pltcl.xml:223(para)
msgid "Executes an SQL command given as a string. An error in the command causes an error to be raised. Otherwise, the return value of <function>spi_exec</function>is the number of rows processed (selected, inserted, updated, or deleted) by the command, or zero if the command is a utility statement. In addition, if the command is a <command>SELECT</command>statement, the values of the selected columns are placed in Tcl variables as described below."
msgstr ""

#: xml/pltcl.xml:233(para)
msgid "The optional <literal>-count</literal>value tells <function>spi_exec</function>the maximum number of rows to process in the command. The effect of this is comparable to setting up a query as a cursor and then saying <literal>FETCH <replaceable>n</replaceable></literal>."
msgstr ""

#: xml/pltcl.xml:241(para)
msgid "If the command is a <command>SELECT</command>statement, the values of the result columns are placed into Tcl variables named after the columns. If the <literal>-array</literal>option is given, the column values are instead stored into the named associative array, with the column names used as array indexes."
msgstr ""

#: xml/pltcl.xml:257(programlisting)
#, no-wrap
msgid "spi_exec \"SELECT count(*) AS cnt FROM\n          pg_proc\""
msgstr ""

#: xml/pltcl.xml:249(para)
msgid "If the command is a <command>SELECT</command>statement and no <replaceable>loop-body</replaceable>script is given, then only the first row of results are stored into Tcl variables; remaining rows, if any, are ignored. No storing occurs if the query returns no rows. (This case can be detected by checking the result of <function>spi_exec</function>.) For example: <placeholder-1/>will set the Tcl variable <literal>$cnt</literal>to the number of rows in the <structname>pg_proc</structname>system catalog."
msgstr ""

#: xml/pltcl.xml:270(programlisting)
#, no-wrap
msgid "spi_exec -array C \"SELECT * FROM\n          pg_class\" { elog DEBUG \"have table $C(relname)\"\n          }"
msgstr ""

#: xml/pltcl.xml:261(para)
msgid "If the optional <replaceable>loop-body</replaceable>argument is given, it is a piece of Tcl script that is executed once for each row in the query result. ( <replaceable>loop-body</replaceable>is ignored if the given command is not a <command>SELECT</command>.) The values of the current row's columns are stored into Tcl variables before each iteration. For example: <placeholder-1/>will print a log message for every row of <literal>pg_class</literal>. This feature works similarly to other Tcl looping constructs; in particular <literal>continue</literal>and <literal>break</literal>work in the usual way inside the loop body."
msgstr ""

#: xml/pltcl.xml:279(para)
msgid "If a column of a query result is null, the target variable for it is <quote>unset</quote>rather than being set."
msgstr ""

#: xml/pltcl.xml:286(function)
msgid "spi_prepare"
msgstr ""

#: xml/pltcl.xml:287(replaceable)
msgid "query"
msgstr ""

#: xml/pltcl.xml:288(replaceable)
msgid "typelist"
msgstr ""

#: xml/pltcl.xml:291(para)
msgid "Prepares and saves a query plan for later execution. The saved plan will be retained for the life of the current session. <indexterm><primary>preparing a query</primary><secondary>in PL/Tcl</secondary></indexterm>"
msgstr ""

#: xml/pltcl.xml:298(para)
msgid "The query can use parameters, that is, placeholders for values to be supplied whenever the plan is actually executed. In the query string, refer to parameters by the symbols <literal>$1</literal>... <literal>$ <replaceable>n</replaceable></literal>. If the query uses parameters, the names of the parameter types must be given as a Tcl list. (Write an empty list for <replaceable>typelist</replaceable>if no parameters are used.)"
msgstr ""

#: xml/pltcl.xml:309(para)
msgid "The return value from <function>spi_prepare</function>is a query ID to be used in subsequent calls to <function>spi_execp</function>. See <function>spi_execp</function>for an example."
msgstr ""

#: xml/pltcl.xml:319(function)
msgid "spi_execp"
msgstr ""

#: xml/pltcl.xml:325(replaceable) xml/pltcl.xml:402(replaceable)
msgid "string"
msgstr ""

#: xml/pltcl.xml:324(optional)
msgid "-nulls <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:326(replaceable)
msgid "queryid"
msgstr ""

#: xml/pltcl.xml:328(replaceable)
msgid "value-list"
msgstr ""

#: xml/pltcl.xml:336(para)
msgid "Executes a query previously prepared with <function>spi_prepare</function>. <replaceable>queryid</replaceable>is the ID returned by <function>spi_prepare</function>. If the query references parameters, a <replaceable>value-list</replaceable>must be supplied. This is a Tcl list of actual values for the parameters. The list must be the same length as the parameter type list previously given to <function>spi_prepare</function>. Omit <replaceable>value-list</replaceable>if the query has no parameters."
msgstr ""

#: xml/pltcl.xml:348(para)
msgid "The optional value for <literal>-nulls</literal>is a string of spaces and <literal>'n'</literal>characters telling <function>spi_execp</function>which of the parameters are null values. If given, it must have exactly the same length as the <replaceable>value-list</replaceable>. If it is not given, all the parameter values are nonnull."
msgstr ""

#: xml/pltcl.xml:356(para)
msgid "Except for the way in which the query and its parameters are specified, <function>spi_execp</function>works just like <function>spi_exec</function>. The <literal>-count</literal>, <literal>-array</literal>, and <replaceable>loop-body</replaceable>options are the same, and so is the result value."
msgstr ""

#: xml/pltcl.xml:366(programlisting)
#, no-wrap
msgid "CREATE FUNCTION t1_count(integer,\n          integer) RETURNS integer AS $$ if {![ info exists\n          GD(plan) ]} { # prepare the saved plan on the first call\n          set GD(plan) [ spi_prepare \\ \"SELECT count(*) AS cnt FROM\n          t1 WHERE num = \\$1 AND num = \\$2\" \\ [ list int4 int4 ] ]\n          } spi_execp -count 1 $GD(plan) [ list $1 $2 ] return $cnt\n          $$ LANGUAGE pltcl;"
msgstr ""

#: xml/pltcl.xml:364(para)
msgid "Here's an example of a PL/Tcl function using a prepared plan: <placeholder-1/>We need backslashes inside the query string given to <function>spi_prepare</function>to ensure that the <literal>$ <replaceable>n</replaceable></literal>markers will be passed through to <function>spi_prepare</function>as-is, and not replaced by Tcl variable substitution."
msgstr ""

#: xml/pltcl.xml:384(function) xml/pltcl.xml:386(primary)
msgid "spi_lastoid"
msgstr ""

#: xml/pltcl.xml:391(para)
msgid "Returns the OID of the row inserted by the last <function>spi_exec</function>or <function>spi_execp</function>, if the command was a single-row <command>INSERT</command>and the modified table contained OIDs. (If not, you get zero.)"
msgstr ""

#: xml/pltcl.xml:401(function)
msgid "quote"
msgstr ""

#: xml/pltcl.xml:412(programlisting)
#, no-wrap
msgid "\"SELECT '$val' AS\n          ret\""
msgstr ""

#: xml/pltcl.xml:417(programlisting)
#, no-wrap
msgid "SELECT 'doesn't' AS\n          ret"
msgstr ""

#: xml/pltcl.xml:423(programlisting)
#, no-wrap
msgid "SELECT 'doesn''t' AS\n          ret"
msgstr ""

#: xml/pltcl.xml:425(programlisting)
#, no-wrap
msgid "\"SELECT '[ quote $val ]' AS\n          ret\""
msgstr ""

#: xml/pltcl.xml:405(para)
msgid "Doubles all occurrences of single quote and backslash characters in the given string. This can be used to safely quote strings that are to be inserted into SQL commands given to <function>spi_exec</function>or <function>spi_prepare</function>. For example, think about an SQL command string like: <placeholder-1/>where the Tcl variable <literal>val</literal>actually contains <literal>doesn't</literal>. This would result in the final command string: <placeholder-2/>which would cause a parse error during <function>spi_exec</function>or <function>spi_prepare</function>. To work properly, the submitted command should contain: <placeholder-3/>which can be formed in PL/Tcl using: <placeholder-4/>One advantage of <function>spi_execp</function>is that you don't have to quote parameter values like this, since the parameters are never parsed as part of an SQL command string."
msgstr ""

#: xml/pltcl.xml:434(function) xml/pltcl.xml:438(primary)
msgid "elog"
msgstr ""

#: xml/pltcl.xml:435(replaceable)
msgid "level"
msgstr ""

#: xml/pltcl.xml:436(replaceable)
msgid "msg"
msgstr ""

#: xml/pltcl.xml:443(para)
msgid "Emits a log or error message. Possible levels are <literal>DEBUG</literal>, <literal>LOG</literal>, <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>, <literal>ERROR</literal>, and <literal>FATAL</literal>. <literal>ERROR</literal>raises an error condition; if this is not trapped by the surrounding Tcl code, the error propagates out to the calling query, causing the current transaction or subtransaction to be aborted. This is effectively the same as the Tcl <literal>error</literal>command. <literal>FATAL</literal>aborts the transaction and causes the current session to shut down. (There is probably no good reason to use this error level in PL/Tcl functions, but it's provided for completeness.) The other levels only generate messages of different priority levels. Whether messages of a particular priority are reported to the client, written to the server log, or both is controlled by the <xref linkend=\"guc-log-min-messages\">and <xref linkend=\"guc-client-min-messages\">configuration variables. See <xref linkend=\"runtime-config\">for more information.</xref></xref></xref>"
msgstr ""

#: xml/pltcl.xml:205(para)
msgid "The following commands are available to access the database from the body of a PL/Tcl function: <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:475(title)
msgid "Trigger Procedures in PL/Tcl"
msgstr ""

#: xml/pltcl.xml:477(primary)
msgid "trigger"
msgstr ""

#: xml/pltcl.xml:480(para)
msgid "Trigger procedures can be written in PL/Tcl. <productname>PostgreSQL</productname>requires that a procedure that is to be called as a trigger must be declared as a function with no arguments and a return type of <literal>trigger</literal>."
msgstr ""

#: xml/pltcl.xml:490(varname)
msgid "$TG_name"
msgstr ""

#: xml/pltcl.xml:493(para)
msgid "The name of the trigger from the <command>CREATE TRIGGER</command>statement."
msgstr ""

#: xml/pltcl.xml:499(varname)
msgid "$TG_relid"
msgstr ""

#: xml/pltcl.xml:502(para)
msgid "The object ID of the table that caused the trigger procedure to be invoked."
msgstr ""

#: xml/pltcl.xml:508(varname)
msgid "$TG_table_name"
msgstr ""

#: xml/pltcl.xml:511(para)
msgid "The name of the table that caused the trigger procedure to be invoked."
msgstr ""

#: xml/pltcl.xml:517(varname)
msgid "$TG_table_schema"
msgstr ""

#: xml/pltcl.xml:520(para)
msgid "The schema of the table that caused the trigger procedure to be invoked."
msgstr ""

#: xml/pltcl.xml:526(varname)
msgid "$TG_relatts"
msgstr ""

#: xml/pltcl.xml:529(para)
msgid "A Tcl list of the table column names, prefixed with an empty list element. So looking up a column name in the list with <application>Tcl</application>'s <function>lsearch</function>command returns the element's number starting with 1 for the first column, the same way the columns are customarily numbered in <productname>PostgreSQL</productname>. (Empty list elements also appear in the positions of columns that have been dropped, so that the attribute numbering is correct for columns to their right.)"
msgstr ""

#: xml/pltcl.xml:544(varname)
msgid "$TG_when"
msgstr ""

#: xml/pltcl.xml:547(para)
msgid "The string <literal>BEFORE</literal>, <literal>AFTER</literal>, or <literal>INSTEAD OF</literal>, depending on the type of trigger event."
msgstr ""

#: xml/pltcl.xml:556(varname)
msgid "$TG_level"
msgstr ""

#: xml/pltcl.xml:559(para)
msgid "The string <literal>ROW</literal>or <literal>STATEMENT</literal>depending on the type of trigger event."
msgstr ""

#: xml/pltcl.xml:567(varname)
msgid "$TG_op"
msgstr ""

#: xml/pltcl.xml:570(para)
msgid "The string <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>, or <literal>TRUNCATE</literal>depending on the type of trigger event."
msgstr ""

#: xml/pltcl.xml:580(varname)
msgid "$NEW"
msgstr ""

#: xml/pltcl.xml:583(para)
msgid "An associative array containing the values of the new table row for <command>INSERT</command>or <command>UPDATE</command>actions, or empty for <command>DELETE</command>. The array is indexed by column name. Columns that are null will not appear in the array. This is not set for statement-level triggers."
msgstr ""

#: xml/pltcl.xml:594(varname)
msgid "$OLD"
msgstr ""

#: xml/pltcl.xml:597(para)
msgid "An associative array containing the values of the old table row for <command>UPDATE</command>or <command>DELETE</command>actions, or empty for <command>INSERT</command>. The array is indexed by column name. Columns that are null will not appear in the array. This is not set for statement-level triggers."
msgstr ""

#: xml/pltcl.xml:608(varname)
msgid "$args"
msgstr ""

#: xml/pltcl.xml:611(para)
msgid "A Tcl list of the arguments to the procedure as given in the <command>CREATE TRIGGER</command>statement. These arguments are also accessible as <literal>$1</literal>... <literal>$ <replaceable>n</replaceable></literal>in the procedure body."
msgstr ""

#: xml/pltcl.xml:485(para) xml/pltcl.xml:677(para)
msgid "The information from the trigger manager is passed to the procedure body in the following variables: <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:622(para)
msgid "The return value from a trigger procedure can be one of the strings <literal>OK</literal>or <literal>SKIP</literal>, or a list as returned by the <literal>array get</literal>Tcl command. If the return value is <literal>OK</literal>, the operation ( <command>INSERT</command>/ <command>UPDATE</command>/ <command>DELETE</command>) that fired the trigger will proceed normally. <literal>SKIP</literal>tells the trigger manager to silently suppress the operation for this row. If a list is returned, it tells PL/Tcl to return a modified row to the trigger manager. This is only meaningful for row-level <literal>BEFORE</literal><command>INSERT</command>or <command>UPDATE</command>triggers for which the modified row will be inserted instead of the one given in <varname>$NEW</varname>; or for row-level <literal>INSTEAD OF</literal><command>INSERT</command>or <command>UPDATE</command>triggers where the returned row is used to support <command>INSERT RETURNING</command>and <command>UPDATE RETURNING</command>commands. The return value is ignored for other types of triggers."
msgstr ""

#: xml/pltcl.xml:654(programlisting)
#, no-wrap
msgid "CREATE FUNCTION trigfunc_modcount() RETURNS\n    trigger AS $$ switch $TG_op { INSERT { set NEW($1) 0 } UPDATE {\n    set NEW($1) $OLD($1) incr NEW($1) } default { return OK } }\n    return [array get NEW] $$ LANGUAGE pltcl; CREATE TABLE mytab\n    (num integer, description text, modcnt integer); CREATE TRIGGER\n    trig_mytab_modcount BEFORE INSERT OR UPDATE ON mytab FOR EACH\n    ROW EXECUTE PROCEDURE\n    trigfunc_modcount('modcnt');"
msgstr ""

#: xml/pltcl.xml:649(para)
msgid "Here's a little example trigger procedure that forces an integer value in a table to keep track of the number of updates that are performed on the row. For new rows inserted, the value is initialized to 0 and then incremented on every update operation. <placeholder-1/>Notice that the trigger procedure itself does not know the column name; that's supplied from the trigger arguments. This lets the trigger procedure be reused with different tables."
msgstr ""

#: xml/pltcl.xml:667(title)
msgid "Event Trigger Procedures in PL/Tcl"
msgstr ""

#: xml/pltcl.xml:669(primary)
msgid "event trigger"
msgstr ""

#: xml/pltcl.xml:672(para)
msgid "Event trigger procedures can be written in PL/Tcl. <productname>PostgreSQL</productname>requires that a procedure that is to be called as an event trigger must be declared as a function with no arguments and a return type of <literal>event_trigger</literal>."
msgstr ""

#: xml/pltcl.xml:682(varname)
msgid "$TG_event"
msgstr ""

#: xml/pltcl.xml:685(para)
msgid "The name of the event the trigger is fired for."
msgstr ""

#: xml/pltcl.xml:691(varname)
msgid "$TG_tag"
msgstr ""

#: xml/pltcl.xml:694(para)
msgid "The command tag for which the trigger is fired."
msgstr ""

#: xml/pltcl.xml:699(para)
msgid "The return value of the trigger procedure is ignored."
msgstr ""

#: xml/pltcl.xml:705(programlisting)
#, no-wrap
msgid "CREATE OR REPLACE FUNCTION tclsnitch() RETURNS\n    event_trigger AS $$ elog NOTICE \"tclsnitch: $TG_event $TG_tag\"\n    $$ LANGUAGE pltcl; CREATE EVENT TRIGGER tcl_a_snitch ON\n    ddl_command_start EXECUTE PROCEDURE\n    tclsnitch();"
msgstr ""

#: xml/pltcl.xml:701(para)
msgid "Here's a little example event trigger procedure that simply raises a <literal>NOTICE</literal>message each time a supported command is executed: <placeholder-1/>"
msgstr ""

#: xml/pltcl.xml:712(title)
msgid "Modules and the <function>unknown</function>Command"
msgstr ""

#: xml/pltcl.xml:714(para)
msgid "PL/Tcl has support for autoloading Tcl code when used. It recognizes a special table, <literal>pltcl_modules</literal>, which is presumed to contain modules of Tcl code. If this table exists, the module <literal>unknown</literal>is fetched from the table and loaded into the Tcl interpreter immediately before the first execution of a PL/Tcl function in a database session. (This happens separately for each Tcl interpreter, if more than one is used in a session; see <xref linkend=\"pltcl-global\">.)</xref>"
msgstr ""

#: xml/pltcl.xml:724(para)
msgid "While the <literal>unknown</literal>module could actually contain any initialization script you need, it normally defines a Tcl <function>unknown</function>procedure that is invoked whenever Tcl does not recognize an invoked procedure name. <application>PL/Tcl</application>'s standard version of this procedure tries to find a module in <literal>pltcl_modules</literal>that will define the required procedure. If one is found, it is loaded into the interpreter, and then execution is allowed to proceed with the originally attempted procedure call. A secondary table <literal>pltcl_modfuncs</literal>provides an index of which functions are defined by which modules, so that the lookup is reasonably quick."
msgstr ""

#: xml/pltcl.xml:738(para)
msgid "The <productname>PostgreSQL</productname>distribution includes support scripts to maintain these tables: <command>pltcl_loadmod</command>, <command>pltcl_listmod</command>, <command>pltcl_delmod</command>, as well as source for the standard <literal>unknown</literal>module in <filename>share/unknown.pltcl</filename>. This module must be loaded into each database initially to support the autoloading mechanism."
msgstr ""

#: xml/pltcl.xml:749(para)
msgid "The tables <literal>pltcl_modules</literal>and <literal>pltcl_modfuncs</literal>must be readable by all, but it is wise to make them owned and writable only by the database administrator. As a security precaution, PL/Tcl will ignore <literal>pltcl_modules</literal>(and thus, not attempt to load the <literal>unknown</literal>module) unless it is owned by a superuser. But update privileges on this table can be granted to other users, if you trust them sufficiently."
msgstr ""

#: xml/pltcl.xml:761(title)
msgid "Tcl Procedure Names"
msgstr ""

#: xml/pltcl.xml:762(para)
msgid "In <productname>PostgreSQL</productname>, the same function name can be used for different function definitions as long as the number of arguments or their types differ. Tcl, however, requires all procedure names to be distinct. PL/Tcl deals with this by making the internal Tcl procedure names contain the object ID of the function from the system table <structname>pg_proc</structname>as part of their name. Thus, <productname>PostgreSQL</productname>functions with the same name and different argument types will be different Tcl procedures, too. This is not normally a concern for a PL/Tcl programmer, but it might be visible when debugging."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/pltcl.xml:0(None)
msgid "translator-credits"
msgstr ""

