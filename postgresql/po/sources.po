msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/sources.xml:3(title)
msgid "PostgreSQL Coding Conventions"
msgstr ""

#: xml/sources.xml:5(title) xml/sources.xml:419(title)
msgid "Formatting"
msgstr ""

#: xml/sources.xml:6(para)
msgid "Source code formatting uses 4 column tab spacing, with tabs preserved (i.e., tabs are not expanded to spaces). Each logical indentation level is one additional tab stop."
msgstr ""

#: xml/sources.xml:9(para)
msgid "Layout rules (brace positioning, etc) follow BSD conventions. In particular, curly braces for the controlled blocks of <literal>if</literal>, <literal>while</literal>, <literal>switch</literal>, etc go on their own lines."
msgstr ""

#: xml/sources.xml:15(para)
msgid "Limit line lengths so that the code is readable in an 80-column window. (This doesn't mean that you must never go past 80 columns. For instance, breaking a long error message string in arbitrary places just to keep the code within 80 columns is probably not a net gain in readability.)"
msgstr ""

#: xml/sources.xml:20(para)
msgid "Do not use C++ style comments ( <literal>//</literal>comments). Strict ANSI C compilers do not accept them. For the same reason, do not use C++ extensions such as declaring new variables mid-block."
msgstr ""

#: xml/sources.xml:25(programlisting)
#, no-wrap
msgid "/* * comment text begins here * and continues\n    here */"
msgstr ""

#: xml/sources.xml:32(programlisting)
#, no-wrap
msgid "/*---------- * comment text begins here * and\n    continues here *---------- */"
msgstr ""

#: xml/sources.xml:24(para)
msgid "The preferred style for multi-line comment blocks is <placeholder-1/>Note that comment blocks that begin in column 1 will be preserved as-is by <application>pgindent</application>, but it will re-flow indented comment blocks as though they were plain text. If you want to preserve the line breaks in an indented block, add dashes like this: <placeholder-2/>"
msgstr ""

#: xml/sources.xml:34(para)
msgid "While submitted patches do not absolutely have to follow these formatting rules, it's a good idea to do so. Your code will get run through <application>pgindent</application>before the next release, so there's no point in making it look nice under some other set of formatting conventions. A good rule of thumb for patches is <quote>make the new code look like the existing code around it</quote>."
msgstr ""

#: xml/sources.xml:42(para)
msgid "The <filename>src/tools</filename>directory contains sample settings files that can be used with the <productname>emacs</productname>, <productname>xemacs</productname>or <productname>vim</productname>editors to help ensure that they format code according to these conventions."
msgstr ""

#: xml/sources.xml:52(programlisting)
#, no-wrap
msgid "more -x4 less -x4"
msgstr ""

#: xml/sources.xml:49(para)
msgid "The text browsing tools <application>more</application>and <application>less</application>can be invoked as: <placeholder-1/>to make them show tabs appropriately."
msgstr ""

#: xml/sources.xml:56(title)
msgid "Reporting Errors Within the Server"
msgstr ""

#: xml/sources.xml:58(primary)
msgid "ereport"
msgstr ""

#: xml/sources.xml:61(primary)
msgid "elog"
msgstr ""

#: xml/sources.xml:63(para)
msgid "Error, warning, and log messages generated within the server code should be created using <function>ereport</function>, or its older cousin <function>elog</function>. The use of this function is complex enough to require some explanation."
msgstr ""

#: xml/sources.xml:68(para)
msgid "There are two required elements for every message: a severity level (ranging from <literal>DEBUG</literal>to <literal>PANIC</literal>) and a primary message text. In addition there are optional elements, the most common of which is an error identifier code that follows the SQL spec's SQLSTATE conventions. <function>ereport</function>itself is just a shell function, that exists mainly for the syntactic convenience of making message generation look like a function call in the C source code. The only parameter accepted directly by <function>ereport</function>is the severity level. The primary message text and any optional message elements are generated by calling auxiliary functions, such as <function>errmsg</function>, within the <function>ereport</function>call."
msgstr ""

#: xml/sources.xml:86(programlisting)
#, no-wrap
msgid "ereport(ERROR,\n    (errcode(ERRCODE_DIVISION_BY_ZERO), errmsg(\"division by\n    zero\")));"
msgstr ""

#: xml/sources.xml:84(para)
msgid "A typical call to <function>ereport</function>might look like this: <placeholder-1/>This specifies error severity level <literal>ERROR</literal>(a run-of-the-mill error). The <function>errcode</function>call specifies the SQLSTATE error code using a macro defined in <filename>src/include/utils/errcodes.h</filename>. The <function>errmsg</function>call provides the primary message text. Notice the extra set of parentheses surrounding the auxiliary function calls these are annoying but syntactically necessary."
msgstr ""

#: xml/sources.xml:98(programlisting)
#, no-wrap
msgid "ereport(ERROR,\n    (errcode(ERRCODE_AMBIGUOUS_FUNCTION), errmsg(\"function %s is\n    not unique\", func_signature_string(funcname, nargs, NIL,\n    actual_arg_types)), errhint(\"Unable to choose a best candidate\n    function. \" \"You might need to add explicit\n    typecasts.\")));"
msgstr ""

#: xml/sources.xml:97(para)
msgid "Here is a more complex example: <placeholder-1/>This illustrates the use of format codes to embed run-time values into a message text. Also, an optional <quote>hint</quote>message is provided."
msgstr ""

#: xml/sources.xml:107(para)
msgid "If the severity level is <literal>ERROR</literal>or higher, <function>ereport</function>aborts the execution of the user-defined function and does not return to the caller. If the severity level is lower than <literal>ERROR</literal>, <function>ereport</function>returns normally."
msgstr ""

#: xml/sources.xml:118(para)
msgid "<function>errcode(sqlerrcode)</function>specifies the SQLSTATE error identifier code for the condition. If this routine is not called, the error identifier defaults to <literal>ERRCODE_INTERNAL_ERROR</literal>when the error severity level is <literal>ERROR</literal>or higher, <literal>ERRCODE_WARNING</literal>when the error level is <literal>WARNING</literal>, otherwise (for <literal>NOTICE</literal>and below) <literal>ERRCODE_SUCCESSFUL_COMPLETION</literal>. While these defaults are often convenient, always think whether they are appropriate before omitting the <function>errcode()</function>call."
msgstr ""

#: xml/sources.xml:146(para)
msgid "That is, the value that was current when the <function>ereport</function>call was reached; changes of <literal>errno</literal>within the auxiliary reporting routines will not affect it. That would not be true if you were to write <literal>strerror(errno)</literal>explicitly in <function>errmsg</function>'s parameter list; accordingly, do not do so."
msgstr ""

#: xml/sources.xml:134(para)
msgid "<function>errmsg(const char *msg, ...)</function>specifies the primary error message text, and possibly run-time values to insert into it. Insertions are specified by <function>sprintf</function>-style format codes. In addition to the standard format codes accepted by <function>sprintf</function>, the format code <literal>%m</literal>can be used to insert the error message returned by <function>strerror</function>for the current value of <literal>errno</literal>. <placeholder-1/><literal>%m</literal>does not require any corresponding entry in the parameter list for <function>errmsg</function>. Note that the message string will be run through <function>gettext</function>for possible localization before format codes are processed."
msgstr ""

#: xml/sources.xml:163(para)
msgid "<function>errmsg_internal(const char *msg, ...)</function>is the same as <function>errmsg</function>, except that the message string will not be translated nor included in the internationalization message dictionary. This should be used for <quote>cannot happen</quote>cases that are probably not worth expending translation effort on."
msgstr ""

#: xml/sources.xml:174(para)
msgid "<function>errmsg_plural(const char *fmt_singular, const char *fmt_plural, unsigned long n, ...)</function>is like <function>errmsg</function>, but with support for various plural forms of the message. <replaceable>fmt_singular</replaceable>is the English singular format, <replaceable>fmt_plural</replaceable>is the English plural format, <replaceable>n</replaceable>is the integer value that determines which plural form is needed, and the remaining arguments are formatted according to the selected format string. For more information see <xref linkend=\"nls-guidelines\">.</xref>"
msgstr ""

#: xml/sources.xml:190(para)
msgid "<function>errdetail(const char *msg, ...)</function>supplies an optional <quote>detail</quote>message; this is to be used when there is additional information that seems inappropriate to put in the primary message. The message string is processed in just the same way as for <function>errmsg</function>."
msgstr ""

#: xml/sources.xml:200(para)
msgid "<function>errdetail_internal(const char *msg, ...)</function>is the same as <function>errdetail</function>, except that the message string will not be translated nor included in the internationalization message dictionary. This should be used for detail messages that are not worth expending translation effort on, for instance because they are too technical to be useful to most users."
msgstr ""

#: xml/sources.xml:211(para)
msgid "<function>errdetail_plural(const char *fmt_singular, const char *fmt_plural, unsigned long n, ...)</function>is like <function>errdetail</function>, but with support for various plural forms of the message. For more information see <xref linkend=\"nls-guidelines\">.</xref>"
msgstr ""

#: xml/sources.xml:220(para)
msgid "<function>errdetail_log(const char *msg, ...)</function>is the same as <function>errdetail</function>except that this string goes only to the server log, never to the client. If both <function>errdetail</function>(or one of its equivalents above) and <function>errdetail_log</function>are used then one string goes to the client and the other to the log. This is useful for error details that are too security-sensitive or too bulky to include in the report sent to the client."
msgstr ""

#: xml/sources.xml:233(para)
msgid "<function>errdetail_log_plural(const char *fmt_singular, const char *fmt_plural, unsigned long n, ...)</function>is like <function>errdetail_log</function>, but with support for various plural forms of the message. For more information see <xref linkend=\"nls-guidelines\">.</xref>"
msgstr ""

#: xml/sources.xml:243(para)
msgid "<function>errhint(const char *msg, ...)</function>supplies an optional <quote>hint</quote>message; this is to be used when offering suggestions about how to fix the problem, as opposed to factual details about what went wrong. The message string is processed in just the same way as for <function>errmsg</function>."
msgstr ""

#: xml/sources.xml:253(para)
msgid "<function>errcontext(const char *msg, ...)</function>is not normally called directly from an <function>ereport</function>message site; rather it is used in <literal>error_context_stack</literal>callback functions to provide information about the context in which an error occurred, such as the current location in a PL function. The message string is processed in just the same way as for <function>errmsg</function>. Unlike the other auxiliary functions, this can be called more than once per <function>ereport</function>call; the successive strings thus supplied are concatenated with separating newlines."
msgstr ""

#: xml/sources.xml:270(para)
msgid "<function>errposition(int cursorpos)</function>specifies the textual location of an error within a query string. Currently it is only useful for errors detected in the lexical and syntactic analysis phases of query processing."
msgstr ""

#: xml/sources.xml:278(para)
msgid "<function>errtable(Relation rel)</function>specifies a relation whose name and schema name should be included as auxiliary fields in the error report."
msgstr ""

#: xml/sources.xml:284(para)
msgid "<function>errtablecol(Relation rel, int attnum)</function>specifies a column whose name, table name, and schema name should be included as auxiliary fields in the error report."
msgstr ""

#: xml/sources.xml:291(para)
msgid "<function>errtableconstraint(Relation rel, const char *conname)</function>specifies a table constraint whose name, table name, and schema name should be included as auxiliary fields in the error report. Indexes should be considered to be constraints for this purpose, whether or not they have an associated <structname>pg_constraint</structname>entry. Be careful to pass the underlying heap relation, not the index itself, as <literal>rel</literal>."
msgstr ""

#: xml/sources.xml:304(para)
msgid "<function>errdatatype(Oid datatypeOid)</function>specifies a data type whose name and schema name should be included as auxiliary fields in the error report."
msgstr ""

#: xml/sources.xml:310(para)
msgid "<function>errdomainconstraint(Oid datatypeOid, const char *conname)</function>specifies a domain constraint whose name, domain name, and schema name should be included as auxiliary fields in the error report."
msgstr ""

#: xml/sources.xml:317(para)
msgid "<function>errcode_for_file_access()</function>is a convenience function that selects an appropriate SQLSTATE error identifier for a failure in a file-access-related system call. It uses the saved <literal>errno</literal>to determine which error code to generate. Usually this should be used in combination with <literal>%m</literal>in the primary error message text."
msgstr ""

#: xml/sources.xml:328(para)
msgid "<function>errcode_for_socket_access()</function>is a convenience function that selects an appropriate SQLSTATE error identifier for a failure in a socket-related system call."
msgstr ""

#: xml/sources.xml:335(para)
msgid "<function>errhidestmt(bool hide_stmt)</function>can be called to specify suppression of the <literal>STATEMENT:</literal>portion of a message in the postmaster log. Generally this is appropriate if the message text includes the current statement already."
msgstr ""

#: xml/sources.xml:114(para)
msgid "The available auxiliary routines for <function>ereport</function>are: <placeholder-1/>"
msgstr ""

#: xml/sources.xml:344(para)
msgid "At most one of the functions <function>errtable</function>, <function>errtablecol</function>, <function>errtableconstraint</function>, <function>errdatatype</function>, or <function>errdomainconstraint</function>should be used in an <function>ereport</function>call. These functions exist to allow applications to extract the name of a database object associated with the error condition without having to examine the potentially-localized error message text. These functions should be used in error reports for which it's likely that applications would wish to have automatic error handling. As of <productname>PostgreSQL</productname>9.3, complete coverage exists only for errors in SQLSTATE class 23 (integrity constraint violation), but this is likely to be expanded in future."
msgstr ""

#: xml/sources.xml:365(programlisting)
#, no-wrap
msgid "elog(level, \"format string\",\n    ...);"
msgstr ""

#: xml/sources.xml:367(programlisting)
#, no-wrap
msgid "ereport(level, (errmsg_internal(\"format\n    string\", ...)));"
msgstr ""

#: xml/sources.xml:362(para)
msgid "There is an older function <function>elog</function>that is still heavily used. An <function>elog</function>call: <placeholder-1/>is exactly equivalent to: <placeholder-2/>Notice that the SQLSTATE error code is always defaulted, and the message string is not subject to translation. Therefore, <function>elog</function>should be used only for internal errors and low-level debug logging. Any message that is likely to be of interest to ordinary users should go through <function>ereport</function>. Nonetheless, there are enough internal <quote>cannot happen</quote>error checks in the system that <function>elog</function>is still widely used; it is preferred for those messages for its notational simplicity."
msgstr ""

#: xml/sources.xml:379(para)
msgid "Advice about writing good error messages can be found in <xref linkend=\"error-style-guide\">.</xref>"
msgstr ""

#: xml/sources.xml:383(title)
msgid "Error Message Style Guide"
msgstr ""

#: xml/sources.xml:384(para)
msgid "This style guide is offered in the hope of maintaining a consistent, user-friendly style throughout all the messages generated by <productname>PostgreSQL</productname>."
msgstr ""

#: xml/sources.xml:389(title)
msgid "What Goes Where"
msgstr ""

#: xml/sources.xml:390(para)
msgid "The primary message should be short, factual, and avoid reference to implementation details such as specific function names. <quote>Short</quote>means <quote>should fit on one line under normal conditions</quote>. Use a detail message if needed to keep the primary message short, or if you feel a need to mention implementation details such as the particular system call that failed. Both primary and detail messages should be factual. Use a hint message for suggestions about what to do to fix the problem, especially if the suggestion might not always be applicable."
msgstr ""

#: xml/sources.xml:403(programlisting)
#, no-wrap
msgid "IpcMemoryCreate: shmget(key=%d, size=%u, 0%o)\n      failed: %m (plus a long addendum that is basically a\n      hint)"
msgstr ""

#: xml/sources.xml:406(programlisting)
#, no-wrap
msgid "Primary: could not create shared memory\n      segment: %m Detail: Failed syscall was shmget(key=%d,\n      size=%u, 0%o). Hint: the addendum"
msgstr ""

#: xml/sources.xml:402(para)
msgid "For example, instead of: <placeholder-1/>write: <placeholder-2/>"
msgstr ""

#: xml/sources.xml:409(para)
msgid "Rationale: keeping the primary message short helps keep it to the point, and lets clients lay out screen space on the assumption that one line is enough for error messages. Detail and hint messages can be relegated to a verbose mode, or perhaps a pop-up error-details window. Also, details and hints would normally be suppressed from the server log to save space. Reference to implementation details is best avoided since users don't know the details anyway."
msgstr ""

#: xml/sources.xml:420(para)
msgid "Don't put any specific assumptions about formatting into the message texts. Expect clients and the server log to wrap lines to fit their own needs. In long messages, newline characters (\\n) can be used to indicate suggested paragraph breaks. Don't end a message with a newline. Don't use tabs or other formatting characters. (In error context displays, newlines are automatically added to separate levels of context such as function calls.)"
msgstr ""

#: xml/sources.xml:428(para)
msgid "Rationale: Messages are not necessarily displayed on terminal-type displays. In GUI displays or browsers these formatting instructions are at best ignored."
msgstr ""

#: xml/sources.xml:433(title)
msgid "Quotation Marks"
msgstr ""

#: xml/sources.xml:434(para)
msgid "English text should use double quotes when quoting is appropriate. Text in other languages should consistently use one kind of quotes that is consistent with publishing customs and computer output of other programs."
msgstr ""

#: xml/sources.xml:438(para)
msgid "Rationale: The choice of double quotes over single quotes is somewhat arbitrary, but tends to be the preferred use. Some have suggested choosing the kind of quotes depending on the type of object according to SQL conventions (namely, strings single quoted, identifiers double quoted). But this is a language-internal technical issue that many users aren't even familiar with, it won't scale to other kinds of quoted terms, it doesn't translate to other languages, and it's pretty pointless, too."
msgstr ""

#: xml/sources.xml:449(title)
msgid "Use of Quotes"
msgstr ""

#: xml/sources.xml:450(para)
msgid "Use quotes always to delimit file names, user-supplied identifiers, and other variables that might contain words. Do not use them to mark up variables that will not contain words (for example, operator names)."
msgstr ""

#: xml/sources.xml:454(para)
msgid "There are functions in the backend that will double-quote their own output at need (for example, <function>format_type_be()</function>). Do not put additional quotes around the output of such functions."
msgstr ""

#: xml/sources.xml:458(para)
msgid "Rationale: Objects can have names that create ambiguity when embedded in a message. Be consistent about denoting where a plugged-in name starts and ends. But don't clutter messages with unnecessary or duplicate quote marks."
msgstr ""

#: xml/sources.xml:464(title)
msgid "Grammar and Punctuation"
msgstr ""

#: xml/sources.xml:465(para)
msgid "The rules are different for primary error messages and for detail/hint messages:"
msgstr ""

#: xml/sources.xml:467(para)
msgid "Primary error messages: Do not capitalize the first letter. Do not end a message with a period. Do not even think about ending a message with an exclamation point."
msgstr ""

#: xml/sources.xml:470(para)
msgid "Detail and hint messages: Use complete sentences, and end each with a period. Capitalize the first word of sentences. Put two spaces after the period if another sentence follows (for English text; might be inappropriate in other languages)."
msgstr ""

#: xml/sources.xml:475(para)
msgid "Error context strings: Do not capitalize the first letter and do not end the string with a period. Context strings should normally not be complete sentences."
msgstr ""

#: xml/sources.xml:478(para)
msgid "Rationale: Avoiding punctuation makes it easier for client applications to embed the message into a variety of grammatical contexts. Often, primary messages are not grammatically complete sentences anyway. (And if they're long enough to be more than one sentence, they should be split into primary and detail parts.) However, detail and hint messages are longer and might need to include multiple sentences. For consistency, they should follow complete-sentence style even when there's only one sentence."
msgstr ""

#: xml/sources.xml:490(title)
msgid "Upper Case vs. Lower Case"
msgstr ""

#: xml/sources.xml:491(para)
msgid "Use lower case for message wording, including the first letter of a primary error message. Use upper case for SQL commands and key words if they appear in the message."
msgstr ""

#: xml/sources.xml:494(para)
msgid "Rationale: It's easier to make everything look more consistent this way, since some messages are complete sentences and some not."
msgstr ""

#: xml/sources.xml:499(title)
msgid "Avoid Passive Voice"
msgstr ""

#: xml/sources.xml:500(para)
msgid "Use the active voice. Use complete sentences when there is an acting subject ( <quote>A could not do B</quote>). Use telegram style without subject if the subject would be the program itself; do not use <quote>I</quote>for the program."
msgstr ""

#: xml/sources.xml:506(para)
msgid "Rationale: The program is not human. Don't pretend otherwise."
msgstr ""

#: xml/sources.xml:510(title)
msgid "Present vs. Past Tense"
msgstr ""

#: xml/sources.xml:511(para)
msgid "Use past tense if an attempt to do something failed, but could perhaps succeed next time (perhaps after fixing some problem). Use present tense if the failure is certainly permanent."
msgstr ""

#: xml/sources.xml:517(programlisting)
#, no-wrap
msgid "could not open file \"%s\":\n      %m"
msgstr ""

#: xml/sources.xml:519(programlisting)
#, no-wrap
msgid "cannot open file \"%s\""
msgstr ""

#: xml/sources.xml:515(para)
msgid "There is a nontrivial semantic difference between sentences of the form: <placeholder-1/>and: <placeholder-2/>The first one means that the attempt to open the file failed. The message should give a reason, such as <quote>disk full</quote>or <quote>file doesn't exist</quote>. The past tense is appropriate because next time the disk might not be full anymore or the file in question might exist."
msgstr ""

#: xml/sources.xml:526(para)
msgid "The second form indicates that the functionality of opening the named file does not exist at all in the program, or that it's conceptually impossible. The present tense is appropriate because the condition will persist indefinitely."
msgstr ""

#: xml/sources.xml:531(para)
msgid "Rationale: Granted, the average user will not be able to draw great conclusions merely from the tense of the message, but since the language provides us with a grammar we should use it correctly."
msgstr ""

#: xml/sources.xml:537(title)
msgid "Type of the Object"
msgstr ""

#: xml/sources.xml:538(para)
msgid "When citing the name of an object, state what kind of object it is."
msgstr ""

#: xml/sources.xml:540(para)
msgid "Rationale: Otherwise no one will know what <quote>foo.bar.baz</quote>refers to."
msgstr ""

#: xml/sources.xml:544(title)
msgid "Brackets"
msgstr ""

#: xml/sources.xml:545(para)
msgid "Square brackets are only to be used (1) in command synopses to denote optional arguments, or (2) to denote an array subscript."
msgstr ""

#: xml/sources.xml:548(para)
msgid "Rationale: Anything else does not correspond to widely-known customary usage and will confuse people."
msgstr ""

#: xml/sources.xml:552(title)
msgid "Assembling Error Messages"
msgstr ""

#: xml/sources.xml:555(programlisting)
#, no-wrap
msgid "could not open file %s:\n      %m"
msgstr ""

#: xml/sources.xml:553(para)
msgid "When a message includes text that is generated elsewhere, embed it in this style: <placeholder-1/>"
msgstr ""

#: xml/sources.xml:557(para)
msgid "Rationale: It would be difficult to account for all possible error codes to paste this into a single smooth sentence, so some sort of punctuation is needed. Putting the embedded text in parentheses has also been suggested, but it's unnatural if the embedded text is likely to be the most important part of the message, as is often the case."
msgstr ""

#: xml/sources.xml:565(title)
msgid "Reasons for Errors"
msgstr ""

#: xml/sources.xml:568(programlisting)
#, no-wrap
msgid "BAD: could not open file %s BETTER: could not\n      open file %s (I/O failure)"
msgstr ""

#: xml/sources.xml:566(para)
msgid "Messages should always state the reason why an error occurred. For example: <placeholder-1/>If no reason is known you better fix the code."
msgstr ""

#: xml/sources.xml:573(title)
msgid "Function Names"
msgstr ""

#: xml/sources.xml:579(programlisting)
#, no-wrap
msgid "BAD: pg_atoi: error in \"z\": cannot parse \"z\"\n      BETTER: invalid input syntax for integer:\n      \"z\""
msgstr ""

#: xml/sources.xml:574(para)
msgid "Don't include the name of the reporting routine in the error text. We have other mechanisms for finding that out when needed, and for most users it's not helpful information. If the error text doesn't make as much sense without the function name, reword it. <placeholder-1/>"
msgstr ""

#: xml/sources.xml:584(programlisting)
#, no-wrap
msgid "BAD: open() failed: %m BETTER: could not open\n      file %s: %m"
msgstr ""

#: xml/sources.xml:582(para)
msgid "Avoid mentioning called function names, either; instead say what the code was trying to do: <placeholder-1/>If it really seems necessary, mention the system call in the detail message. (In some cases, providing the actual values passed to the system call might be appropriate information for the detail message.)"
msgstr ""

#: xml/sources.xml:590(para)
msgid "Rationale: Users don't know what all those functions do."
msgstr ""

#: xml/sources.xml:594(title)
msgid "Tricky Words to Avoid"
msgstr ""

#: xml/sources.xml:596(title)
msgid "Unable"
msgstr ""

#: xml/sources.xml:597(para)
msgid "<quote>Unable</quote>is nearly the passive voice. Better use <quote>cannot</quote>or <quote>could not</quote>, as appropriate."
msgstr ""

#: xml/sources.xml:604(title)
msgid "Bad"
msgstr ""

#: xml/sources.xml:605(para)
msgid "Error messages like <quote>bad result</quote>are really hard to interpret intelligently. It's better to write why the result is <quote>bad</quote>, e.g., <quote>invalid format</quote>."
msgstr ""

#: xml/sources.xml:612(title)
msgid "Illegal"
msgstr ""

#: xml/sources.xml:613(para)
msgid "<quote>Illegal</quote>stands for a violation of the law, the rest is <quote>invalid</quote>. Better yet, say why it's invalid."
msgstr ""

#: xml/sources.xml:620(title)
msgid "Unknown"
msgstr ""

#: xml/sources.xml:627(programlisting)
#, no-wrap
msgid "BAD: unknown node type BETTER: unrecognized\n        node type: 42"
msgstr ""

#: xml/sources.xml:621(para)
msgid "Try to avoid <quote>unknown</quote>. Consider <quote>error: unknown response</quote>. If you don't know what the response is, how do you know it's erroneous? <quote>Unrecognized</quote>is often a better choice. Also, be sure to include the value being complained of. <placeholder-1/>"
msgstr ""

#: xml/sources.xml:631(title)
msgid "Find vs. Exists"
msgstr ""

#: xml/sources.xml:632(para)
msgid "If the program uses a nontrivial algorithm to locate a resource (e.g., a path search) and that algorithm fails, it is fair to say that the program couldn't <quote>find</quote>the resource. If, on the other hand, the expected location of the resource is known but the program cannot access it there then say that the resource doesn't <quote>exist</quote>. Using <quote>find</quote>in this case sounds weak and confuses the issue."
msgstr ""

#: xml/sources.xml:643(title)
msgid "May vs. Can vs. Might"
msgstr ""

#: xml/sources.xml:644(para)
msgid "<quote>May</quote>suggests permission (e.g., \"You may borrow my rake.\"), and has little use in documentation or error messages. <quote>Can</quote>suggests ability (e.g., \"I can lift that log.\"), and <quote>might</quote>suggests possibility (e.g., \"It might rain today.\"). Using the proper word clarifies meaning and assists translation."
msgstr ""

#: xml/sources.xml:655(title)
msgid "Contractions"
msgstr ""

#: xml/sources.xml:656(para)
msgid "Avoid contractions, like <quote>can't</quote>; use <quote>cannot</quote>instead."
msgstr ""

#: xml/sources.xml:662(title)
msgid "Proper Spelling"
msgstr ""

#: xml/sources.xml:666(para)
msgid "spec"
msgstr ""

#: xml/sources.xml:669(para)
msgid "stats"
msgstr ""

#: xml/sources.xml:672(para)
msgid "parens"
msgstr ""

#: xml/sources.xml:675(para)
msgid "auth"
msgstr ""

#: xml/sources.xml:678(para)
msgid "xact"
msgstr ""

#: xml/sources.xml:663(para)
msgid "Spell out words in full. For instance, avoid: <placeholder-1/>"
msgstr ""

#: xml/sources.xml:681(para)
msgid "Rationale: This will improve consistency."
msgstr ""

#: xml/sources.xml:684(title)
msgid "Localization"
msgstr ""

#: xml/sources.xml:685(para)
msgid "Keep in mind that error message texts need to be translated into other languages. Follow the guidelines in <xref linkend=\"nls-guidelines\">to avoid making life difficult for translators.</xref>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/sources.xml:0(None)
msgid "translator-credits"
msgstr ""

