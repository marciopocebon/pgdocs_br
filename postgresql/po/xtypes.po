msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/xtypes.xml:3(title)
msgid "User-defined Types"
msgstr ""

#: xml/xtypes.xml:5(primary)
msgid "data type"
msgstr ""

#: xml/xtypes.xml:6(secondary)
msgid "user-defined"
msgstr ""

#: xml/xtypes.xml:8(para)
msgid "As described in <xref linkend=\"extend-type-system\">, <productname>PostgreSQL</productname>can be extended to support new data types. This section describes how to define new base types, which are data types defined below the level of the <acronym>SQL</acronym>language. Creating a new base type requires implementing functions to operate on the type in a low-level language, usually C.</xref>"
msgstr ""

#: xml/xtypes.xml:16(para)
msgid "The examples in this section can be found in <filename>complex.sql</filename>and <filename>complex.c</filename>in the <filename>src/tutorial</filename>directory of the source distribution. See the <filename>README</filename>file in that directory for instructions about running the examples."
msgstr ""

#: xml/xtypes.xml:23(para)
msgid "<indexterm><primary>input function</primary></indexterm><indexterm><primary>output function</primary></indexterm>A user-defined type must always have input and output functions. These functions determine how the type appears in strings (for input by the user and output to the user) and how the type is organized in memory. The input function takes a null-terminated character string as its argument and returns the internal (in memory) representation of the type. The output function takes the internal representation of the type as argument and returns a null-terminated character string. If we want to do anything more with the type than merely store it, we must provide additional functions to implement whatever operations we'd like to have for the type."
msgstr ""

#: xml/xtypes.xml:44(programlisting)
#, no-wrap
msgid "typedef struct Complex { double x; double y; }\n  Complex;"
msgstr ""

#: xml/xtypes.xml:40(para)
msgid "Suppose we want to define a type <type>complex</type>that represents complex numbers. A natural way to represent a complex number in memory would be the following C structure: <placeholder-1/>We will need to make this a pass-by-reference type, since it's too large to fit into a single <type>Datum</type>value."
msgstr ""

#: xml/xtypes.xml:49(para)
msgid "As the external string representation of the type, we choose a string of the form <literal>(x,y)</literal>."
msgstr ""

#: xml/xtypes.xml:57(programlisting)
#, no-wrap
msgid "PG_FUNCTION_INFO_V1(complex_in); Datum\n  complex_in(PG_FUNCTION_ARGS) { char *str = PG_GETARG_CSTRING(0);\n  double x, y; Complex *result; if (sscanf(str, \" ( %lf , %lf )\",\n  &amp;x, &amp;y) != 2) ereport(ERROR,\n  (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION), errmsg(\"invalid\n  input syntax for complex: \\\"%s\\\"\", str))); result = (Complex *)\n  palloc(sizeof(Complex)); result-&gt;x = x; result-&gt;y = y;\n  PG_RETURN_POINTER(result); }"
msgstr ""

#: xml/xtypes.xml:66(programlisting)
#, no-wrap
msgid "PG_FUNCTION_INFO_V1(complex_out); Datum\n  complex_out(PG_FUNCTION_ARGS) { Complex *complex = (Complex *)\n  PG_GETARG_POINTER(0); char *result; result = psprintf(\"(%g,%g)\",\n  complex-&gt;x, complex-&gt;y); PG_RETURN_CSTRING(result);\n  }"
msgstr ""

#: xml/xtypes.xml:52(para)
msgid "The input and output functions are usually not hard to write, especially the output function. But when defining the external string representation of the type, remember that you must eventually write a complete and robust parser for that representation as your input function. For instance: <placeholder-1/>The output function can simply be: <placeholder-2/>"
msgstr ""

#: xml/xtypes.xml:71(para)
msgid "You should be careful to make the input and output functions inverses of each other. If you do not, you will have severe problems when you need to dump your data into a file and then read it back in. This is a particularly common problem when floating-point numbers are involved."
msgstr ""

#: xml/xtypes.xml:85(programlisting)
#, no-wrap
msgid "PG_FUNCTION_INFO_V1(complex_recv); Datum\n  complex_recv(PG_FUNCTION_ARGS) { StringInfo buf = (StringInfo)\n  PG_GETARG_POINTER(0); Complex *result; result = (Complex *)\n  palloc(sizeof(Complex)); result-&gt;x = pq_getmsgfloat8(buf);\n  result-&gt;y = pq_getmsgfloat8(buf); PG_RETURN_POINTER(result); }\n  PG_FUNCTION_INFO_V1(complex_send); Datum\n  complex_send(PG_FUNCTION_ARGS) { Complex *complex = (Complex *)\n  PG_GETARG_POINTER(0); StringInfoData buf;\n  pq_begintypsend(&amp;buf); pq_sendfloat8(&amp;buf,\n  complex-&gt;x); pq_sendfloat8(&amp;buf, complex-&gt;y);\n  PG_RETURN_BYTEA_P(pq_endtypsend(&amp;buf));\n  }"
msgstr ""

#: xml/xtypes.xml:76(para)
msgid "Optionally, a user-defined type can provide binary input and output routines. Binary I/O is normally faster but less portable than textual I/O. As with textual I/O, it is up to you to define exactly what the external binary representation is. Most of the built-in data types try to provide a machine-independent binary representation. For <type>complex</type>, we will piggy-back on the binary I/O converters for type <type>float8</type>: <placeholder-1/>"
msgstr ""

#: xml/xtypes.xml:101(programlisting)
#, no-wrap
msgid "CREATE TYPE complex;"
msgstr ""

#: xml/xtypes.xml:104(programlisting)
#, no-wrap
msgid "CREATE FUNCTION complex_in(cstring) RETURNS\n  complex AS ' \n  <replaceable>filename</replaceable>' LANGUAGE C IMMUTABLE STRICT;\n  CREATE FUNCTION complex_out(complex) RETURNS cstring AS ' \n  <replaceable>filename</replaceable>' LANGUAGE C IMMUTABLE STRICT;\n  CREATE FUNCTION complex_recv(internal) RETURNS complex AS ' \n  <replaceable>filename</replaceable>' LANGUAGE C IMMUTABLE STRICT;\n  CREATE FUNCTION complex_send(complex) RETURNS bytea AS ' \n  <replaceable>filename</replaceable>' LANGUAGE C IMMUTABLE\n  STRICT;"
msgstr ""

#: xml/xtypes.xml:97(para)
msgid "Once we have written the I/O functions and compiled them into a shared library, we can define the <type>complex</type>type in SQL. First we declare it as a shell type: <placeholder-1/>This serves as a placeholder that allows us to reference the type while defining its I/O functions. Now we can define the I/O functions: <placeholder-2/>"
msgstr ""

#: xml/xtypes.xml:116(programlisting)
#, no-wrap
msgid "CREATE TYPE complex ( internallength = 16, input\n  = complex_in, output = complex_out, receive = complex_recv, send\n  = complex_send, alignment = double );"
msgstr ""

#: xml/xtypes.xml:114(para)
msgid "Finally, we can provide the full definition of the data type: <placeholder-1/>"
msgstr ""

#: xml/xtypes.xml:119(para)
msgid "<indexterm><primary>array</primary><secondary>of user-defined type</secondary></indexterm>When you define a new base type, <productname>PostgreSQL</productname>automatically provides support for arrays of that type. The array type typically has the same name as the base type with the underscore character ( <literal>_</literal>) prepended."
msgstr ""

#: xml/xtypes.xml:128(para)
msgid "Once the data type exists, we can declare additional functions to provide useful operations on the data type. Operators can then be defined atop the functions, and if needed, operator classes can be created to support indexing of the data type. These additional layers are discussed in following sections."
msgstr ""

#: xml/xtypes.xml:134(para)
msgid "If the internal representation of the data type is variable-length, the internal representation must follow the standard layout for variable-length data: the first four bytes must be a <type>char[4]</type>field which is never accessed directly (customarily named <structfield>vl_len_</structfield>). You must use the <function>SET_VARSIZE()</function>macro to store the total size of the datum (including the length field itself) in this field and <function>VARSIZE()</function>to retrieve it. (These macros exist because the length field may be encoded depending on platform.)"
msgstr ""

#: xml/xtypes.xml:147(para)
msgid "For further details see the description of the <xref linkend=\"sql-createtype\">command.</xref>"
msgstr ""

#: xml/xtypes.xml:150(title)
msgid "TOAST Considerations"
msgstr ""

#: xml/xtypes.xml:152(primary)
msgid "TOAST"
msgstr ""

#: xml/xtypes.xml:153(secondary)
msgid "and user-defined types"
msgstr ""

#: xml/xtypes.xml:155(para)
msgid "If the values of your data type vary in size (in internal form), it's usually desirable to make the data type <acronym>TOAST</acronym>-able (see <xref linkend=\"storage-toast\">). You should do this even if the values are always too small to be compressed or stored externally, because <acronym>TOAST</acronym>can save space on small data too, by reducing header overhead.</xref>"
msgstr ""

#: xml/xtypes.xml:163(para)
msgid "To support <acronym>TOAST</acronym>storage, the C functions operating on the data type must always be careful to unpack any toasted values they are handed by using <function>PG_DETOAST_DATUM</function>. (This detail is customarily hidden by defining type-specific <function>GETARG_DATATYPE_P</function>macros.) Then, when running the <command>CREATE TYPE</command>command, specify the internal length as <literal>variable</literal>and select some appropriate storage option other than <literal>plain</literal>."
msgstr ""

#: xml/xtypes.xml:176(para)
msgid "If data alignment is unimportant (either just for a specific function or because the data type specifies byte alignment anyway) then it's possible to avoid some of the overhead of <function>PG_DETOAST_DATUM</function>. You can use <function>PG_DETOAST_DATUM_PACKED</function>instead (customarily hidden by defining a <function>GETARG_DATATYPE_PP</function>macro) and using the macros <function>VARSIZE_ANY_EXHDR</function>and <function>VARDATA_ANY</function>to access a potentially-packed datum. Again, the data returned by these macros is not aligned even if the data type definition specifies an alignment. If the alignment is important you must go through the regular <function>PG_DETOAST_DATUM</function>interface."
msgstr ""

#: xml/xtypes.xml:192(para)
msgid "Older code frequently declares <structfield>vl_len_</structfield>as an <type>int32</type>field instead of <type>char[4]</type>. This is OK as long as the struct definition has other fields that have at least <type>int32</type>alignment. But it is dangerous to use such a struct definition when working with a potentially unaligned datum; the compiler may take it as license to assume the datum actually is aligned, leading to core dumps on architectures that are strict about alignment."
msgstr ""

#: xml/xtypes.xml:203(para)
msgid "Another feature that's enabled by <acronym>TOAST</acronym>support is the possibility of having an <firstterm>expanded</firstterm>in-memory data representation that is more convenient to work with than the format that is stored on disk. The regular or <quote>flat</quote>varlena storage format is ultimately just a blob of bytes; it cannot for example contain pointers, since it may get copied to other locations in memory. For complex data types, the flat format may be quite expensive to work with, so <productname>PostgreSQL</productname>provides a way to <quote>expand</quote>the flat format into a representation that is more suited to computation, and then pass that format in-memory between functions of the data type."
msgstr ""

#: xml/xtypes.xml:217(para)
msgid "To use expanded storage, a data type must define an expanded format that follows the rules given in <filename>src/include/utils/expandeddatum.h</filename>, and provide functions to <quote>expand</quote>a flat varlena value into expanded format and <quote>flatten</quote>the expanded format back to the regular varlena representation. Then ensure that all C functions for the data type can accept either representation, possibly by converting one into the other immediately upon receipt. This does not require fixing all existing functions for the data type at once, because the standard <function>PG_DETOAST_DATUM</function>macro is defined to convert expanded inputs into regular flat format. Therefore, existing functions that work with the flat varlena format will continue to work, though slightly inefficiently, with expanded inputs; they need not be converted until and unless better performance is important."
msgstr ""

#: xml/xtypes.xml:235(para)
msgid "C functions that know how to work with an expanded representation typically fall into two categories: those that can only handle expanded format, and those that can handle either expanded or flat varlena inputs. The former are easier to write but may be less efficient overall, because converting a flat input to expanded form for use by a single function may cost more than is saved by operating on the expanded format. When only expanded format need be handled, conversion of flat inputs to expanded form can be hidden inside an argument-fetching macro, so that the function appears no more complex than one working with traditional varlena input. To handle both types of input, write an argument-fetching function that will detoast external, short-header, and compressed varlena inputs, but not expanded inputs. Such a function can be defined as returning a pointer to a union of the flat varlena format and the expanded format. Callers can use the <function>VARATT_IS_EXPANDED_HEADER()</function>macro to determine which format they received."
msgstr ""

#: xml/xtypes.xml:253(para)
msgid "The <acronym>TOAST</acronym>infrastructure not only allows regular varlena values to be distinguished from expanded values, but also distinguishes <quote>read-write</quote>and <quote>read-only</quote>pointers to expanded values. C functions that only need to examine an expanded value, or will only change it in safe and non-semantically-visible ways, need not care which type of pointer they receive. C functions that produce a modified version of an input value are allowed to modify an expanded input value in-place if they receive a read-write pointer, but must not modify the input if they receive a read-only pointer; in that case they have to copy the value first, producing a new value to modify. A C function that has constructed a new expanded value should always return a read-write pointer to it. Also, a C function that is modifying a read-write expanded value in-place should take care to leave the value in a sane state if it fails partway through."
msgstr ""

#: xml/xtypes.xml:271(para)
msgid "For examples of working with expanded values, see the standard array infrastructure, particularly <filename> src/backend/utils/adt/array_expanded.c</filename>."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/xtypes.xml:0(None)
msgid "translator-credits"
msgstr ""

