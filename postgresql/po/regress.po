msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/regress.xml:3(title)
msgid "Regression Tests"
msgstr ""

#: xml/regress.xml:5(primary)
msgid "regression tests"
msgstr ""

#: xml/regress.xml:8(primary)
msgid "test"
msgstr ""

#: xml/regress.xml:10(para)
msgid "The regression tests are a comprehensive set of tests for the SQL implementation in <productname>PostgreSQL</productname>. They test standard SQL operations as well as the extended capabilities of <productname>PostgreSQL</productname>."
msgstr ""

#: xml/regress.xml:16(title)
msgid "Running the Tests"
msgstr ""

#: xml/regress.xml:17(para)
msgid "The regression tests can be run against an already installed and running server, or using a temporary installation within the build tree. Furthermore, there is a <quote>parallel</quote>and a <quote>sequential</quote>mode for running the tests. The sequential method runs each test script alone, while the parallel method starts up multiple server processes to run groups of tests in parallel. Parallel testing adds confidence that interprocess communication and locking are working correctly."
msgstr ""

#: xml/regress.xml:28(title)
msgid "Running the Tests Against a Temporary Installation"
msgstr ""

#: xml/regress.xml:30(para)
msgid "To run the parallel regression tests after building but before installation, type: <screen>make check</screen>in the top-level directory. (Or you can change to <filename>src/test/regress</filename>and run the command there.) At the end you should see something like: <screen>\n        <computeroutput>======================= All 115 tests\n        passed. =======================</computeroutput>\n      </screen>or otherwise a note about which tests failed. See <xref linkend=\"regress-evaluation\">below before assuming that a <quote>failure</quote>represents a serious problem.</xref>"
msgstr ""

#: xml/regress.xml:44(para)
msgid "Because this test method runs a temporary server, it will not work if you did the build as the root user, since the server will not start as root. Recommended procedure is not to do the build as root, or else to perform testing after completing the installation."
msgstr ""

#: xml/regress.xml:49(para)
msgid "If you have configured <productname>PostgreSQL</productname>to install into a location where an older <productname>PostgreSQL</productname>installation already exists, and you perform <literal>make check</literal>before installing the new version, you might find that the tests fail because the new programs try to use the already-installed shared libraries. (Typical symptoms are complaints about undefined symbols.) If you wish to run the tests before overwriting the old installation, you'll need to build with <literal>configure --disable-rpath</literal>. It is not recommended that you use this option for the final installation, however."
msgstr ""

#: xml/regress.xml:63(para)
msgid "The parallel regression test starts quite a few processes under your user ID. Presently, the maximum concurrency is twenty parallel test scripts, which means forty processes: there's a server process and a <application>psql</application>process for each test script. So if your system enforces a per-user limit on the number of processes, make sure this limit is at least fifty or so, else you might get random-seeming failures in the parallel test. If you are not in a position to raise the limit, you can cut down the degree of parallelism by setting the <literal>MAX_CONNECTIONS</literal>parameter. For example: <screen>make MAX_CONNECTIONS=10 check</screen>runs no more than ten tests concurrently."
msgstr ""

#: xml/regress.xml:78(title)
msgid "Running the Tests Against an Existing Installation"
msgstr ""

#: xml/regress.xml:80(para)
msgid "To run the tests after installation (see <xref linkend=\"installation\">), initialize a data area and start the server as explained in <xref linkend=\"runtime\">, then type: <screen>make installcheck</screen>or for a parallel test: <screen>make installcheck-parallel</screen>The tests will expect to contact the server at the local host and the default port number, unless directed otherwise by <envar>PGHOST</envar>and <envar>PGPORT</envar>environment variables. The tests will be run in a database named <literal>regression</literal>; any existing database by this name will be dropped. The tests will also transiently create some cluster-wide objects, such as user identities named <literal>regressuser <replaceable>N</replaceable></literal>.</xref></xref>"
msgstr ""

#: xml/regress.xml:98(title)
msgid "Additional Test Suites"
msgstr ""

#: xml/regress.xml:99(para)
msgid "The <literal>make check</literal>and <literal>make installcheck</literal>commands run only the <quote>core</quote>regression tests, which test built-in functionality of the <productname>PostgreSQL</productname>server. The source distribution also contains additional test suites, most of them having to do with add-on functionality such as optional procedural languages."
msgstr ""

#: xml/regress.xml:108(para)
msgid "To run all test suites applicable to the modules that have been selected to be built, including the core tests, type one of these commands at the top of the build tree: <screen>make check-world make\n      installcheck-world</screen>These commands run the tests using temporary servers or an already-installed server, respectively, just as previously explained for <literal>make check</literal>and <literal>make installcheck</literal>. Other considerations are the same as previously explained for each method. Note that <literal>make check-world</literal>builds a separate temporary installation tree for each tested module, so it requires a great deal more time and disk space than <literal>make installcheck-world</literal>."
msgstr ""

#: xml/regress.xml:123(para)
msgid "Alternatively, you can run individual test suites by typing <literal>make check</literal>or <literal>make installcheck</literal>in the appropriate subdirectory of the build tree. Keep in mind that <literal>make installcheck</literal>assumes you've installed the relevant module(s), not only the core server."
msgstr ""

#: xml/regress.xml:130(para)
msgid "The additional tests that can be invoked this way include:"
msgstr ""

#: xml/regress.xml:134(para)
msgid "Regression tests for optional procedural languages (other than <application>PL/pgSQL</application>, which is tested by the core tests). These are located under <filename>src/pl</filename>."
msgstr ""

#: xml/regress.xml:141(para)
msgid "Regression tests for <filename>contrib</filename>modules, located under <filename>contrib</filename>. Not all <filename>contrib</filename>modules have tests."
msgstr ""

#: xml/regress.xml:147(para)
msgid "Regression tests for the ECPG interface library, located in <filename>src/interfaces/ecpg/test</filename>."
msgstr ""

#: xml/regress.xml:152(para)
msgid "Tests stressing behavior of concurrent sessions, located in <filename>src/test/isolation</filename>."
msgstr ""

#: xml/regress.xml:157(para)
msgid "Tests of client programs under <filename>src/bin</filename>. See also <xref linkend=\"regress-tap\">.</xref>"
msgstr ""

#: xml/regress.xml:162(para)
msgid "When using <literal>installcheck</literal>mode, these tests will destroy any existing databases named <literal>pl_regression</literal>, <literal>contrib_regression</literal>, <literal>isolationtest</literal>, <literal>regress1</literal>, or <literal>connectdb</literal>, as well as <literal>regression</literal>."
msgstr ""

#: xml/regress.xml:173(title)
msgid "Locale and Encoding"
msgstr ""

#: xml/regress.xml:174(para)
msgid "By default, tests using a temporary installation use the locale defined in the current environment and the corresponding database encoding as determined by <command>initdb</command>. It can be useful to test different locales by setting the appropriate environment variables, for example: <screen>make check LANG=C make check LC_COLLATE=en_US.utf8\n      LC_CTYPE=fr_CA.utf8</screen>For implementation reasons, setting <envar>LC_ALL</envar>does not work for this purpose; all the other locale-related environment variables do work."
msgstr ""

#: xml/regress.xml:185(para)
msgid "When testing against an existing installation, the locale is determined by the existing database cluster and cannot be set separately for the test run."
msgstr ""

#: xml/regress.xml:188(para)
msgid "You can also choose the database encoding explicitly by setting the variable <envar>ENCODING</envar>, for example: <screen>make check LANG=C ENCODING=EUC_JP</screen>Setting the database encoding this way typically only makes sense if the locale is C; otherwise the encoding is chosen automatically from the locale, and specifying an encoding that does not match the locale will result in an error."
msgstr ""

#: xml/regress.xml:196(para)
msgid "The database encoding can be set for tests against either a temporary or an existing installation, though in the latter case it must be compatible with the installation's locale."
msgstr ""

#: xml/regress.xml:202(title)
msgid "Extra Tests"
msgstr ""

#: xml/regress.xml:203(para)
msgid "The core regression test suite contains a few test files that are not run by default, because they might be platform-dependent or take a very long time to run. You can run these or other extra test files by setting the variable <envar>EXTRA_TESTS</envar>. For example, to run the <literal>numeric_big</literal>test: <screen>make check EXTRA_TESTS=numeric_big</screen>To run the collation tests: <screen>make check EXTRA_TESTS=collate.linux.utf8\n      LANG=en_US.utf8</screen>The <literal>collate.linux.utf8</literal>test works only on Linux/glibc platforms, and only when run in a database that uses UTF-8 encoding."
msgstr ""

#: xml/regress.xml:218(title)
msgid "Testing Hot Standby"
msgstr ""

#: xml/regress.xml:219(para)
msgid "The source distribution also contains regression tests for the static behavior of Hot Standby. These tests require a running primary server and a running standby server that is accepting new WAL changes from the primary (using either file-based log shipping or streaming replication). Those servers are not automatically created for you, nor is replication setup documented here. Please check the various sections of the documentation devoted to the required commands and related issues."
msgstr ""

#: xml/regress.xml:228(para)
msgid "To run the Hot Standby tests, first create a database called <literal>regression</literal>on the primary: <screen>psql -h primary -c \"CREATE DATABASE\n      regression\"</screen>Next, run the preparatory script <filename> src/test/regress/sql/hs_primary_setup.sql</filename>on the primary in the regression database, for example: <screen>psql -h primary -f\n      src/test/regress/sql/hs_primary_setup.sql\n      regression</screen>Allow these changes to propagate to the standby."
msgstr ""

#: xml/regress.xml:240(para)
msgid "Now arrange for the default database connection to be to the standby server under test (for example, by setting the <envar>PGHOST</envar>and <envar>PGPORT</envar>environment variables). Finally, run <literal>make standbycheck</literal>in the regression directory: <screen>cd src/test/regress make standbycheck</screen>"
msgstr ""

#: xml/regress.xml:248(para)
msgid "Some extreme behaviors can also be generated on the primary using the script <filename> src/test/regress/sql/hs_primary_extremes.sql</filename>to allow the behavior of the standby to be tested."
msgstr ""

#: xml/regress.xml:256(title)
msgid "Test Evaluation"
msgstr ""

#: xml/regress.xml:257(para)
msgid "Some properly installed and fully functional <productname>PostgreSQL</productname>installations can <quote>fail</quote>some of these regression tests due to platform-specific artifacts such as varying floating-point representation and message wording. The tests are currently evaluated using a simple <command>diff</command>comparison against the outputs generated on a reference system, so the results are sensitive to small system differences. When a test is reported as <quote>failed</quote>, always examine the differences between expected and actual results; you might find that the differences are not significant. Nonetheless, we still strive to maintain accurate reference files across all supported platforms, so it can be expected that all tests pass."
msgstr ""

#: xml/regress.xml:271(para)
msgid "The actual outputs of the regression tests are in files in the <filename>src/test/regress/results</filename>directory. The test script uses <command>diff</command>to compare each output file against the reference outputs stored in the <filename>src/test/regress/expected</filename>directory. Any differences are saved for your inspection in <filename>src/test/regress/regression.diffs</filename>. (When running a test suite other than the core tests, these files of course appear in the relevant subdirectory, not <filename>src/test/regress</filename>.)"
msgstr ""

#: xml/regress.xml:283(para)
msgid "If you don't like the <command>diff</command>options that are used by default, set the environment variable <envar>PG_REGRESS_DIFF_OPTS</envar>, for instance <literal>PG_REGRESS_DIFF_OPTS='-u'</literal>. (Or you can run <command>diff</command>yourself, if you prefer.)"
msgstr ""

#: xml/regress.xml:289(para)
msgid "If for some reason a particular platform generates a <quote>failure</quote>for a given test, but inspection of the output convinces you that the result is valid, you can add a new comparison file to silence the failure report in future test runs. See <xref linkend=\"regress-variant\">for details.</xref>"
msgstr ""

#: xml/regress.xml:296(title)
msgid "Error Message Differences"
msgstr ""

#: xml/regress.xml:297(para)
msgid "Some of the regression tests involve intentional invalid input values. Error messages can come from either the <productname>PostgreSQL</productname>code or from the host platform system routines. In the latter case, the messages can vary between platforms, but should reflect similar information. These differences in messages will result in a <quote>failed</quote>regression test that can be validated by inspection."
msgstr ""

#: xml/regress.xml:308(title)
msgid "Locale Differences"
msgstr ""

#: xml/regress.xml:309(para)
msgid "If you run the tests against a server that was initialized with a collation-order locale other than C, then there might be differences due to sort order and subsequent failures. The regression test suite is set up to handle this problem by providing alternate result files that together are known to handle a large number of locales."
msgstr ""

#: xml/regress.xml:319(programlisting)
#, no-wrap
msgid "make check\n      LANG=de_DE.utf8"
msgstr ""

#: xml/regress.xml:327(programlisting)
#, no-wrap
msgid "make check NO_LOCALE=1"
msgstr ""

#: xml/regress.xml:315(para)
msgid "To run the tests in a different locale when using the temporary-installation method, pass the appropriate locale-related environment variables on the <command>make</command>command line, for example: <placeholder-1/>(The regression test driver unsets <envar>LC_ALL</envar>, so it does not work to choose the locale using that variable.) To use no locale, either unset all locale-related environment variables (or set them to <literal>C</literal>) or use the following special invocation: <placeholder-2/>When running the tests against an existing installation, the locale setup is determined by the existing installation. To change it, initialize the database cluster with a different locale by passing the appropriate options to <command>initdb</command>."
msgstr ""

#: xml/regress.xml:333(para)
msgid "In general, it is advisable to try to run the regression tests in the locale setup that is wanted for production use, as this will exercise the locale- and encoding-related code portions that will actually be used in production. Depending on the operating system environment, you might get failures, but then you will at least know what locale-specific behaviors to expect when running real applications."
msgstr ""

#: xml/regress.xml:343(title)
msgid "Date and Time Differences"
msgstr ""

#: xml/regress.xml:344(para)
msgid "Most of the date and time results are dependent on the time zone environment. The reference files are generated for time zone <literal>PST8PDT</literal>(Berkeley, California), and there will be apparent failures if the tests are not run with that time zone setting. The regression test driver sets environment variable <envar>PGTZ</envar>to <literal>PST8PDT</literal>, which normally ensures proper results."
msgstr ""

#: xml/regress.xml:356(title)
msgid "Floating-Point Differences"
msgstr ""

#: xml/regress.xml:357(para)
msgid "Some of the tests involve computing 64-bit floating-point numbers ( <type>double precision</type>) from table columns. Differences in results involving mathematical functions of <type>double precision</type>columns have been observed. The <literal>float8</literal>and <literal>geometry</literal>tests are particularly prone to small differences across platforms, or even with different compiler optimization settings. Human eyeball comparison is needed to determine the real significance of these differences which are usually 10 places to the right of the decimal point."
msgstr ""

#: xml/regress.xml:369(para)
msgid "Some systems display minus zero as <literal>-0</literal>, while others just show <literal>0</literal>."
msgstr ""

#: xml/regress.xml:372(para)
msgid "Some systems signal errors from <function>pow()</function>and <function>exp()</function>differently from the mechanism expected by the current <productname>PostgreSQL</productname>code."
msgstr ""

#: xml/regress.xml:379(title)
msgid "Row Ordering Differences"
msgstr ""

#: xml/regress.xml:380(para)
msgid "You might see differences in which the same rows are output in a different order than what appears in the expected file. In most cases this is not, strictly speaking, a bug. Most of the regression test scripts are not so pedantic as to use an <literal>ORDER BY</literal>for every single <literal>SELECT</literal>, and so their result row orderings are not well-defined according to the SQL specification. In practice, since we are looking at the same queries being executed on the same data by the same software, we usually get the same result ordering on all platforms, so the lack of <literal>ORDER BY</literal>is not a problem. Some queries do exhibit cross-platform ordering differences, however. When testing against an already-installed server, ordering differences can also be caused by non-C locale settings or non-default parameter settings, such as custom values of <varname>work_mem</varname>or the planner cost parameters."
msgstr ""

#: xml/regress.xml:399(para)
msgid "Therefore, if you see an ordering difference, it's not something to worry about, unless the query does have an <literal>ORDER BY</literal>that your result is violating. However, please report it anyway, so that we can add an <literal>ORDER BY</literal>to that particular query to eliminate the bogus <quote>failure</quote>in future releases."
msgstr ""

#: xml/regress.xml:406(para)
msgid "You might wonder why we don't order all the regression test queries explicitly to get rid of this issue once and for all. The reason is that that would make the regression tests less useful, not more, since they'd tend to exercise query plan types that produce ordered results to the exclusion of those that don't."
msgstr ""

#: xml/regress.xml:414(title)
msgid "Insufficient Stack Depth"
msgstr ""

#: xml/regress.xml:415(para)
msgid "If the <literal>errors</literal>test results in a server crash at the <literal>select infinite_recurse()</literal>command, it means that the platform's limit on process stack size is smaller than the <xref linkend=\"guc-max-stack-depth\">parameter indicates. This can be fixed by running the server under a higher stack size limit (4MB is recommended with the default value of <varname>max_stack_depth</varname>). If you are unable to do that, an alternative is to reduce the value of <varname>max_stack_depth</varname>.</xref>"
msgstr ""

#: xml/regress.xml:427(para)
msgid "On platforms supporting <function>getrlimit()</function>, the server should automatically choose a safe value of <varname>max_stack_depth</varname>; so unless you've manually overridden this setting, a failure of this kind is a reportable bug."
msgstr ""

#: xml/regress.xml:435(title)
msgid "The <quote>random</quote>Test"
msgstr ""

#: xml/regress.xml:441(programlisting)
#, no-wrap
msgid "diff results/random.out\n      expected/random.out"
msgstr ""

#: xml/regress.xml:437(para)
msgid "The <literal>random</literal>test script is intended to produce random results. In very rare cases, this causes that regression test to fail. Typing: <placeholder-1/>should produce only one or a few lines of differences. You need not worry unless the random test fails repeatedly."
msgstr ""

#: xml/regress.xml:447(title)
msgid "Configuration Parameters"
msgstr ""

#: xml/regress.xml:448(para)
msgid "When running the tests against an existing installation, some non-default parameter settings could cause the tests to fail. For example, changing parameters such as <varname>enable_seqscan</varname>or <varname>enable_indexscan</varname>could cause plan changes that would affect the results of tests that use <command>EXPLAIN</command>."
msgstr ""

#: xml/regress.xml:458(title)
msgid "Variant Comparison Files"
msgstr ""

#: xml/regress.xml:459(para)
msgid "Since some of the tests inherently produce environment-dependent results, we have provided ways to specify alternate <quote>expected</quote>result files. Each regression test can have several comparison files showing possible results on different platforms. There are two independent mechanisms for determining which comparison file is used for each test."
msgstr ""

#: xml/regress.xml:466(para)
msgid "The first mechanism allows comparison files to be selected for specific platforms. There is a mapping file, <filename>src/test/regress/resultmap</filename>, that defines which comparison file to use for each platform. To eliminate bogus test <quote>failures</quote>for a particular platform, you first choose or make a variant result file, and then add a line to the <filename>resultmap</filename>file."
msgstr ""

#: xml/regress.xml:475(para)
msgid "Each line in the mapping file is of the form <synopsis>\n    testname:output:platformpattern=comparisonfilename</synopsis>The test name is just the name of the particular regression test module. The output value indicates which output file to check. For the standard regression tests, this is always <literal>out</literal>. The value corresponds to the file extension of the output file. The platform pattern is a pattern in the style of the Unix tool <command>expr</command>(that is, a regular expression with an implicit <literal>^</literal>anchor at the start). It is matched against the platform name as printed by <command>config.guess</command>. The comparison file name is the base name of the substitute result comparison file."
msgstr ""

#: xml/regress.xml:501(programlisting)
#, no-wrap
msgid "\n    float8:out:i.86-.*-openbsd=float8-small-is-zero.out"
msgstr ""

#: xml/regress.xml:490(para)
msgid "For example: some systems interpret very small floating-point values as zero, rather than reporting an underflow error. This causes a few differences in the <filename>float8</filename>regression test. Therefore, we provide a variant comparison file, <filename>float8-small-is-zero.out</filename>, which includes the results to be expected on these systems. To silence the bogus <quote>failure</quote>message on <systemitem>OpenBSD</systemitem>platforms, <filename>resultmap</filename>includes: <placeholder-1/>which will trigger on any machine where the output of <command>config.guess</command>matches <literal>i.86-.*-openbsd</literal>. Other lines in <filename>resultmap</filename>select the variant comparison file for other platforms where it's appropriate."
msgstr ""

#: xml/regress.xml:508(para)
msgid "The second selection mechanism for variant comparison files is much more automatic: it simply uses the <quote>best match</quote>among several supplied comparison files. The regression test driver script considers both the standard comparison file for a test, <literal><replaceable>testname</replaceable>.out</literal>, and variant files named <literal><replaceable>testname</replaceable>_ <replaceable>digit</replaceable>.out</literal>(where the <replaceable>digit</replaceable>is any single digit <literal>0</literal>- <literal>9</literal>). If any such file is an exact match, the test is considered to pass; otherwise, the one that generates the shortest diff is used to create the failure report. (If <filename>resultmap</filename>includes an entry for the particular test, then the base <replaceable>testname</replaceable>is the substitute name given in <filename>resultmap</filename>.)"
msgstr ""

#: xml/regress.xml:529(para)
msgid "For example, for the <literal>char</literal>test, the comparison file <filename>char.out</filename>contains results that are expected in the <literal>C</literal>and <literal>POSIX</literal>locales, while the file <filename>char_1.out</filename>contains results sorted as they appear in many other locales."
msgstr ""

#: xml/regress.xml:537(para)
msgid "The best-match mechanism was devised to cope with locale-dependent results, but it can be used in any situation where the test results cannot be predicted easily from the platform name alone. A limitation of this mechanism is that the test driver cannot tell which variant is actually <quote>correct</quote>for the current environment; it will just pick the variant that seems to work best. Therefore it is safest to use this mechanism only for variant results that you are willing to consider equally valid in all contexts."
msgstr ""

#: xml/regress.xml:548(title)
msgid "TAP Tests"
msgstr ""

#: xml/regress.xml:556(programlisting)
#, no-wrap
msgid "make -C src/bin check\n    PROVE_FLAGS='--reverse'"
msgstr ""

#: xml/regress.xml:549(para)
msgid "The client program tests under <filename>src/bin</filename>use the Perl TAP tools and are run by <command>prove</command>. You can pass command-line options to <command>prove</command>by setting the <command>make</command>variable <varname>PROVE_FLAGS</varname>, for example: <placeholder-1/>The default is <literal>--verbose</literal>. See the manual page of <command>prove</command>for more information."
msgstr ""

#: xml/regress.xml:560(para)
msgid "The tests written in Perl require the Perl module <literal>IPC::Run</literal>. This module is available from CPAN or an operating system package."
msgstr ""

#: xml/regress.xml:565(title)
msgid "Test Coverage Examination"
msgstr ""

#: xml/regress.xml:566(para)
msgid "The PostgreSQL source code can be compiled with coverage testing instrumentation, so that it becomes possible to examine which parts of the code are covered by the regression tests or any other test suite that is run with the code. This is currently supported when compiling with GCC and requires the <command>gcov</command>and <command>lcov</command>programs."
msgstr ""

#: xml/regress.xml:573(para)
msgid "A typical workflow would look like this: <screen>./configure --enable-coverage ... OTHER OPTIONS ...\n    make make check # or other test suite make\n    coverage-html</screen>Then point your HTML browser to <filename>coverage/index.html</filename>. The <command>make</command>commands also work in subdirectories."
msgstr ""

#: xml/regress.xml:580(para)
msgid "To reset the execution counts between test runs, run: <screen>make coverage-clean</screen>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/regress.xml:0(None)
msgid "translator-credits"
msgstr ""

