msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/pageinspect.xml:3(title) xml/pageinspect.xml:5(primary)
msgid "pageinspect"
msgstr ""

#: xml/pageinspect.xml:7(para)
msgid "The <filename>pageinspect</filename>module provides functions that allow you to inspect the contents of database pages at a low level, which is useful for debugging purposes. All of these functions may be used only by superusers."
msgstr ""

#: xml/pageinspect.xml:13(title)
msgid "Functions"
msgstr ""

#: xml/pageinspect.xml:17(function)
msgid "get_raw_page(relname text, fork text, blkno int) returns bytea"
msgstr ""

#: xml/pageinspect.xml:20(primary)
msgid "get_raw_page"
msgstr ""

#: xml/pageinspect.xml:24(para)
msgid "<function>get_raw_page</function>reads the specified block of the named relation and returns a copy as a <type>bytea</type>value. This allows a single time-consistent copy of the block to be obtained. <replaceable>fork</replaceable>should be <literal>'main'</literal>for the main data fork, <literal>'fsm'</literal>for the free space map, <literal>'vm'</literal>for the visibility map, or <literal>'init'</literal>for the initialization fork."
msgstr ""

#: xml/pageinspect.xml:39(function)
msgid "get_raw_page(relname text, blkno int) returns bytea"
msgstr ""

#: xml/pageinspect.xml:43(para)
msgid "A shorthand version of <function>get_raw_page</function>, for reading from the main fork. Equivalent to <literal>get_raw_page(relname, 'main', blkno)</literal>"
msgstr ""

#: xml/pageinspect.xml:52(function)
msgid "page_header(page bytea) returns record"
msgstr ""

#: xml/pageinspect.xml:55(primary)
msgid "page_header"
msgstr ""

#: xml/pageinspect.xml:59(para)
msgid "<function>page_header</function>shows fields that are common to all <productname>PostgreSQL</productname>heap and index pages."
msgstr ""

#: xml/pageinspect.xml:64(para)
msgid "A page image obtained with <function>get_raw_page</function>should be passed as argument. For example: <screen>test=# SELECT * FROM\n          page_header(get_raw_page('pg_class', 0)); lsn | checksum\n          | flags | lower | upper | special | pagesize | version |\n          prune_xid\n          -----------+----------+--------+-------+-------+---------+----------+---------+-----------\n          0/24A1B50 | 1 | 1 | 232 | 368 | 8192 | 8192 | 4 |\n          0</screen>The returned columns correspond to the fields in the <structname>PageHeaderData</structname>struct. See <filename>src/include/storage/bufpage.h</filename>for details."
msgstr ""

#: xml/pageinspect.xml:82(function)
msgid "heap_page_items(page bytea) returns setof record"
msgstr ""

#: xml/pageinspect.xml:85(primary)
msgid "heap_page_items"
msgstr ""

#: xml/pageinspect.xml:89(para)
msgid "<function>heap_page_items</function>shows all line pointers on a heap page. For those line pointers that are in use, tuple headers are also shown. All tuples are shown, whether or not the tuples were visible to an MVCC snapshot at the time the raw page was copied."
msgstr ""

#: xml/pageinspect.xml:95(para)
msgid "A heap page image obtained with <function>get_raw_page</function>should be passed as argument. For example: <screen>test=# SELECT * FROM\n          heap_page_items(get_raw_page('pg_class', 0));</screen>See <filename>src/include/storage/itemid.h</filename>and <filename>src/include/access/htup_details.h</filename>for explanations of the fields returned."
msgstr ""

#: xml/pageinspect.xml:108(function)
msgid "bt_metap(relname text) returns record"
msgstr ""

#: xml/pageinspect.xml:111(primary)
msgid "bt_metap"
msgstr ""

#: xml/pageinspect.xml:115(para)
msgid "<function>bt_metap</function>returns information about a B-tree index's metapage. For example: <screen>test=# SELECT * FROM\n          bt_metap('pg_cast_oid_index'); -[ RECORD 1 ]----- magic |\n          340322 version | 2 root | 1 level | 0 fastroot | 1\n          fastlevel | 0</screen>"
msgstr ""

#: xml/pageinspect.xml:126(function)
msgid "bt_page_stats(relname text, blkno int) returns record"
msgstr ""

#: xml/pageinspect.xml:129(primary)
msgid "bt_page_stats"
msgstr ""

#: xml/pageinspect.xml:133(para)
msgid "<function>bt_page_stats</function>returns summary information about single pages of B-tree indexes. For example: <screen>test=# SELECT * FROM\n          bt_page_stats('pg_cast_oid_index', 1); -[ RECORD 1\n          ]-+----- blkno | 1 type | l live_items | 256 dead_items |\n          0 avg_item_size | 12 page_size | 8192 free_size | 4056\n          btpo_prev | 0 btpo_next | 0 btpo | 0 btpo_flags |\n          3</screen>"
msgstr ""

#: xml/pageinspect.xml:147(function)
msgid "bt_page_items(relname text, blkno int) returns setof record"
msgstr ""

#: xml/pageinspect.xml:150(primary)
msgid "bt_page_items"
msgstr ""

#: xml/pageinspect.xml:154(para)
msgid "<function>bt_page_items</function>returns detailed information about all of the items on a B-tree index page. For example: <screen>test=# SELECT * FROM\n          bt_page_items('pg_cast_oid_index', 1); itemoffset | ctid\n          | itemlen | nulls | vars | data\n          ------------+---------+---------+-------+------+-------------\n          1 | (0,1) | 12 | f | f | 23 27 00 00 2 | (0,2) | 12 | f |\n          f | 24 27 00 00 3 | (0,3) | 12 | f | f | 25 27 00 00 4 |\n          (0,4) | 12 | f | f | 26 27 00 00 5 | (0,5) | 12 | f | f |\n          27 27 00 00 6 | (0,6) | 12 | f | f | 28 27 00 00 7 |\n          (0,7) | 12 | f | f | 29 27 00 00 8 | (0,8) | 12 | f | f |\n          2a 27 00 00</screen>In a B-tree leaf page, <structfield>ctid</structfield>points to a heap tuple. In an internal page, the block number part of <structfield>ctid</structfield>points to another page in the index itself, while the offset part (the second number) is ignored and is usually 1."
msgstr ""

#: xml/pageinspect.xml:173(para)
msgid "Note that the first item on any non-rightmost page (any page with a non-zero value in the <structfield>btpo_next</structfield>field) is the page's <quote>high key</quote>, meaning its <structfield>data</structfield>serves as an upper bound on all items appearing on the page, while its <structfield>ctid</structfield>field is meaningless. Also, on non-leaf pages, the first real data item (the first item that is not a high key) is a <quote>minus infinity</quote>item, with no actual value in its <structfield>data</structfield>field. Such an item does have a valid downlink in its <structfield>ctid</structfield>field, however."
msgstr ""

#: xml/pageinspect.xml:191(function)
msgid "brin_page_type(page bytea) returns text"
msgstr ""

#: xml/pageinspect.xml:194(primary)
msgid "brin_page_type"
msgstr ""

#: xml/pageinspect.xml:198(para)
msgid "<function>brin_page_type</function>returns the page type of the given <acronym>BRIN</acronym>index page, or throws an error if the page is not a valid <acronym>BRIN</acronym>page. For example: <screen>test=# SELECT\n          brin_page_type(get_raw_page('brinidx', 0));\n          brin_page_type ---------------- meta</screen>"
msgstr ""

#: xml/pageinspect.xml:211(function)
msgid "brin_metapage_info(page bytea) returns record"
msgstr ""

#: xml/pageinspect.xml:214(primary)
msgid "brin_metapage_info"
msgstr ""

#: xml/pageinspect.xml:218(para)
msgid "<function>brin_metapage_info</function>returns assorted information about a <acronym>BRIN</acronym>index metapage. For example: <screen>test=# SELECT * FROM\n          brin_metapage_info(get_raw_page('brinidx', 0)); magic |\n          version | pagesperrange | lastrevmappage\n          ------------+---------+---------------+----------------\n          0xA8109CFA | 1 | 4 | 2</screen>"
msgstr ""

#: xml/pageinspect.xml:231(function)
msgid "brin_revmap_data(page bytea) returns setof tid"
msgstr ""

#: xml/pageinspect.xml:234(primary)
msgid "brin_revmap_data"
msgstr ""

#: xml/pageinspect.xml:238(para)
msgid "<function>brin_revmap_data</function>returns the list of tuple identifiers in a <acronym>BRIN</acronym>index range map page. For example: <screen>test=# SELECT * FROM\n          brin_revmap_data(get_raw_page('brinidx', 2)) limit 5;\n          pages --------- (6,137) (6,138) (6,139) (6,140)\n          (6,141)</screen>"
msgstr ""

#: xml/pageinspect.xml:251(function)
msgid "brin_page_items(page bytea, index oid) returns setof record"
msgstr ""

#: xml/pageinspect.xml:254(primary)
msgid "brin_page_items"
msgstr ""

#: xml/pageinspect.xml:258(para)
msgid "<function>brin_page_items</function>returns the data stored in the <acronym>BRIN</acronym>data page. For example: <screen>test=# SELECT * FROM\n          brin_page_items(get_raw_page('brinidx', 5), 'brinidx')\n          ORDER BY blknum, attnum LIMIT 6; itemoffset | blknum |\n          attnum | allnulls | hasnulls | placeholder | value\n          ------------+--------+--------+----------+----------+-------------+--------------\n          137 | 0 | 1 | t | f | f | 137 | 0 | 2 | f | f | f | {1 ..\n          88} 138 | 4 | 1 | t | f | f | 138 | 4 | 2 | f | f | f |\n          {89 .. 176} 139 | 8 | 1 | t | f | f | 139 | 8 | 2 | f | f\n          | f | {177 .. 264}</screen>The returned columns correspond to the fields in the <structname>BrinMemTuple</structname>and <structname>BrinValues</structname>structs. See <filename>src/include/access/brin_tuple.h</filename>for details."
msgstr ""

#: xml/pageinspect.xml:280(function)
msgid "gin_metapage_info(page bytea) returns record"
msgstr ""

#: xml/pageinspect.xml:283(primary)
msgid "gin_metapage_info"
msgstr ""

#: xml/pageinspect.xml:287(para)
msgid "<function>gin_metapage_info</function>returns information about a <acronym>GIN</acronym>index metapage. For example: <screen>test=# SELECT * FROM\n          gin_metapage_info(get_raw_page('gin_index', 0)); -[\n          RECORD 1 ]----+----------- pending_head | 4294967295\n          pending_tail | 4294967295 tail_free_size | 0\n          n_pending_pages | 0 n_pending_tuples | 0 n_total_pages |\n          7 n_entry_pages | 6 n_data_pages | 0 n_entries | 693\n          version | 2</screen>"
msgstr ""

#: xml/pageinspect.xml:302(function)
msgid "gin_page_opaque_info(page bytea) returns record"
msgstr ""

#: xml/pageinspect.xml:305(primary)
msgid "gin_page_opaque_info"
msgstr ""

#: xml/pageinspect.xml:309(para)
msgid "<function>gin_page_opaque_info</function>returns information about a <acronym>GIN</acronym>index opaque area, like the page type. For example: <screen>test=# SELECT * FROM\n          gin_page_opaque_info(get_raw_page('gin_index', 2));\n          rightlink | maxoff | flags\n          -----------+--------+------------------------ 5 | 0 |\n          {data,leaf,compressed} (1 row)</screen>"
msgstr ""

#: xml/pageinspect.xml:323(function)
msgid "gin_leafpage_items(page bytea) returns setof record"
msgstr ""

#: xml/pageinspect.xml:326(primary)
msgid "gin_leafpage_items"
msgstr ""

#: xml/pageinspect.xml:330(para)
msgid "<function>gin_leafpage_items</function>returns information about the data stored in a <acronym>GIN</acronym>leaf page. For example: <screen>test=# SELECT first_tid, nbytes, tids[0:5] as\n          some_tids FROM\n          gin_leafpage_items(get_raw_page('gin_test_idx', 2));\n          first_tid | nbytes | some_tids\n          -----------+--------+----------------------------------------------------------\n          (8,41) | 244 |\n          {\"(8,41)\",\"(8,43)\",\"(8,44)\",\"(8,45)\",\"(8,46)\"} (10,45) |\n          248 | {\"(10,45)\",\"(10,46)\",\"(10,47)\",\"(10,48)\",\"(10,49)\"}\n          (12,52) | 248 |\n          {\"(12,52)\",\"(12,53)\",\"(12,54)\",\"(12,55)\",\"(12,56)\"}\n          (14,59) | 320 |\n          {\"(14,59)\",\"(14,60)\",\"(14,61)\",\"(14,62)\",\"(14,63)\"}\n          (167,16) | 376 |\n          {\"(167,16)\",\"(167,17)\",\"(167,18)\",\"(167,19)\",\"(167,20)\"}\n          (170,30) | 376 |\n          {\"(170,30)\",\"(170,31)\",\"(170,32)\",\"(170,33)\",\"(170,34)\"}\n          (173,44) | 197 |\n          {\"(173,44)\",\"(173,45)\",\"(173,46)\",\"(173,47)\",\"(173,48)\"}\n          (7 rows)</screen>"
msgstr ""

#: xml/pageinspect.xml:357(function)
msgid "fsm_page_contents(page bytea) returns text"
msgstr ""

#: xml/pageinspect.xml:360(primary)
msgid "fsm_page_contents"
msgstr ""

#: xml/pageinspect.xml:364(para)
msgid "<function>fsm_page_contents</function>shows the internal node structure of a FSM page. The output is a multiline string, with one line per node in the binary tree within the page. Only those nodes that are not zero are printed. The so-called \"next\" pointer, which points to the next slot to be returned from the page, is also printed."
msgstr ""

#: xml/pageinspect.xml:372(para)
msgid "See <filename> src/backend/storage/freespace/README</filename>for more information on the structure of an FSM page."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/pageinspect.xml:0(None)
msgid "translator-credits"
msgstr ""

