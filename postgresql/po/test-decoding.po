msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/test-decoding.xml:3(title) xml/test-decoding.xml:5(primary)
msgid "test_decoding"
msgstr ""

#: xml/test-decoding.xml:7(para)
msgid "<filename>test_decoding</filename>is an example of a logical decoding output plugin. It doesn't do anything especially useful, but can serve as a starting point for developing your own decoder."
msgstr ""

#: xml/test-decoding.xml:12(para)
msgid "<filename>test_decoding</filename>receives WAL through the logical decoding mechanism and decodes it into text representations of the operations performed."
msgstr ""

#: xml/test-decoding.xml:18(programlisting)
#, no-wrap
msgid "postgres=# SELECT * FROM\n  pg_logical_slot_get_changes('test_slot', NULL, NULL,\n  'include-xids', '0'); location | xid | data\n  -----------+-----+--------------------------------------------------\n  0/16D30F8 | 691 | BEGIN 0/16D32A0 | 691 | table public.data:\n  INSERT: id[int4]:2 data[text]:'arg' 0/16D32A0 | 691 | table\n  public.data: INSERT: id[int4]:3 data[text]:'demo' 0/16D32A0 | 691\n  | COMMIT 0/16D32D8 | 692 | BEGIN 0/16D3398 | 692 | table\n  public.data: DELETE: id[int4]:2 0/16D3398 | 692 | table\n  public.data: DELETE: id[int4]:3 0/16D3398 | 692 | COMMIT (8\n  rows)"
msgstr ""

#: xml/test-decoding.xml:16(para)
msgid "Typical output from this plugin, used over the SQL logical decoding interface, might be: <placeholder-1/>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/test-decoding.xml:0(None)
msgid "translator-credits"
msgstr ""

