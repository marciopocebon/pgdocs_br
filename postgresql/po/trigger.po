msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/trigger.xml:3(title)
msgid "Triggers"
msgstr ""

#: xml/trigger.xml:5(primary) xml/trigger.xml:390(primary)
msgid "trigger"
msgstr ""

#: xml/trigger.xml:7(para)
msgid "This chapter provides general information about writing trigger functions. Trigger functions can be written in most of the available procedural languages, including <application>PL/pgSQL</application>( <xref linkend=\"plpgsql\">), <application>PL/Tcl</application>( <xref linkend=\"pltcl\">), <application>PL/Perl</application>( <xref linkend=\"plperl\">), and <application>PL/Python</application>( <xref linkend=\"plpython\">). After reading this chapter, you should consult the chapter for your favorite procedural language to find out the language-specific details of writing a trigger in it.</xref></xref></xref></xref>"
msgstr ""

#: xml/trigger.xml:21(para)
msgid "It is also possible to write a trigger function in C, although most people find it easier to use one of the procedural languages. It is not currently possible to write a trigger function in the plain SQL function language."
msgstr ""

#: xml/trigger.xml:26(title)
msgid "Overview of Trigger Behavior"
msgstr ""

#: xml/trigger.xml:27(para)
msgid "A trigger is a specification that the database should automatically execute a particular function whenever a certain type of operation is performed. Triggers can be attached to tables, views, and foreign tables."
msgstr ""

#: xml/trigger.xml:31(para)
msgid "On tables and foreign tables, triggers can be defined to execute either before or after any <command>INSERT</command>, <command>UPDATE</command>, or <command>DELETE</command>operation, either once per modified row, or once per <acronym>SQL</acronym>statement. If an <command>INSERT</command>contains an <literal>ON CONFLICT DO UPDATE</literal>clause, it is possible that the effects of a BEFORE insert trigger and a BEFORE update trigger can both be applied together, if a reference to an <varname>EXCLUDED</varname>column appears. <command>UPDATE</command>triggers can moreover be set to fire only if certain columns are mentioned in the <literal>SET</literal>clause of the <command>UPDATE</command>statement. Triggers can also fire for <command>TRUNCATE</command>statements. If a trigger event occurs, the trigger's function is called at the appropriate time to handle the event. Foreign tables do not support the TRUNCATE statement at all."
msgstr ""

#: xml/trigger.xml:51(para)
msgid "On views, triggers can be defined to execute instead of <command>INSERT</command>, <command>UPDATE</command>, or <command>DELETE</command>operations. <literal>INSTEAD OF</literal>triggers are fired once for each row that needs to be modified in the view. It is the responsibility of the trigger's function to perform the necessary modifications to the underlying base tables and, where appropriate, return the modified row as it will appear in the view. Triggers on views can also be defined to execute once per <acronym>SQL</acronym>statement, before or after <command>INSERT</command>, <command>UPDATE</command>, or <command>DELETE</command>operations."
msgstr ""

#: xml/trigger.xml:66(para)
msgid "The trigger function must be defined before the trigger itself can be created. The trigger function must be declared as a function taking no arguments and returning type <literal>trigger</literal>. (The trigger function receives its input through a specially-passed <structname>TriggerData</structname>structure, not in the form of ordinary function arguments.)"
msgstr ""

#: xml/trigger.xml:73(para)
msgid "Once a suitable trigger function has been created, the trigger is established with <xref linkend=\"sql-createtrigger\">. The same trigger function can be used for multiple triggers.</xref>"
msgstr ""

#: xml/trigger.xml:77(para)
msgid "<productname>PostgreSQL</productname>offers both <firstterm>per-row</firstterm>triggers and <firstterm>per-statement</firstterm>triggers. With a per-row trigger, the trigger function is invoked once for each row that is affected by the statement that fired the trigger. In contrast, a per-statement trigger is invoked only once when an appropriate statement is executed, regardless of the number of rows affected by that statement. In particular, a statement that affects zero rows will still result in the execution of any applicable per-statement triggers. These two types of triggers are sometimes called <firstterm>row-level</firstterm>triggers and <firstterm>statement-level</firstterm>triggers, respectively. Triggers on <command>TRUNCATE</command>may only be defined at statement level. On views, triggers that fire before or after may only be defined at statement level, while triggers that fire instead of an <command>INSERT</command>, <command>UPDATE</command>, or <command>DELETE</command>may only be defined at row level."
msgstr ""

#: xml/trigger.xml:100(para)
msgid "Triggers are also classified according to whether they fire <firstterm>before</firstterm>, <firstterm>after</firstterm>, or <firstterm>instead of</firstterm>the operation. These are referred to as <literal>BEFORE</literal>triggers, <literal>AFTER</literal>triggers, and <literal>INSTEAD OF</literal>triggers respectively. Statement-level <literal>BEFORE</literal>triggers naturally fire before the statement starts to do anything, while statement-level <literal>AFTER</literal>triggers fire at the very end of the statement. These types of triggers may be defined on tables or views. Row-level <literal>BEFORE</literal>triggers fire immediately before a particular row is operated on, while row-level <literal>AFTER</literal>triggers fire at the end of the statement (but before any statement-level <literal>AFTER</literal>triggers). These types of triggers may only be defined on tables and foreign tables. Row-level <literal>INSTEAD OF</literal>triggers may only be defined on views, and fire immediately as each row in the view is identified as needing to be operated on."
msgstr ""

#: xml/trigger.xml:124(para)
msgid "If an <command>INSERT</command>contains an <literal>ON CONFLICT DO UPDATE</literal>clause, it is possible that the effects of all row-level <literal>BEFORE</literal><command>INSERT</command>triggers and all row-level BEFORE <command>UPDATE</command>triggers can both be applied in a way that is apparent from the final state of the updated row, if an <varname>EXCLUDED</varname>column is referenced. There need not be an <varname>EXCLUDED</varname>column reference for both sets of BEFORE row-level triggers to execute, though. The possibility of surprising outcomes should be considered when there are both <literal>BEFORE</literal><command>INSERT</command>and <literal>BEFORE</literal><command>UPDATE</command>row-level triggers that both affect a row being inserted/updated (this can still be problematic if the modifications are more or less equivalent if they're not also idempotent). Note that statement-level <command>UPDATE</command>triggers are executed when <literal>ON CONFLICT DO UPDATE</literal>is specified, regardless of whether or not any rows were affected by the <command>UPDATE</command>(and regardless of whether the alternative <command>UPDATE</command>path was ever taken). An <command>INSERT</command>with an <literal>ON CONFLICT DO UPDATE</literal>clause will execute statement-level <literal>BEFORE</literal><command>INSERT</command>triggers first, then statement-level <literal>BEFORE</literal><command>UPDATE</command>triggers, followed by statement-level <literal>AFTER</literal><command>UPDATE</command>triggers and finally statement-level <literal>AFTER</literal><command>INSERT</command>triggers."
msgstr ""

#: xml/trigger.xml:172(para)
msgid "It can return <symbol>NULL</symbol>to skip the operation for the current row. This instructs the executor to not perform the row-level operation that invoked the trigger (the insertion, modification, or deletion of a particular table row)."
msgstr ""

#: xml/trigger.xml:180(para)
msgid "For row-level <command>INSERT</command>and <command>UPDATE</command>triggers only, the returned row becomes the row that will be inserted or will replace the row being updated. This allows the trigger function to modify the row being inserted or updated."
msgstr ""

#: xml/trigger.xml:163(para)
msgid "Trigger functions invoked by per-statement triggers should always return <symbol>NULL</symbol>. Trigger functions invoked by per-row triggers can return a table row (a value of type <structname>HeapTuple</structname>) to the calling executor, if they choose. A row-level trigger fired before an operation has the following choices: <placeholder-1/>A row-level <literal>BEFORE</literal>trigger that does not intend to cause either of these behaviors must be careful to return as its result the same row that was passed in (that is, the <varname>NEW</varname>row for <command>INSERT</command>and <command>UPDATE</command>triggers, the <varname>OLD</varname>row for <command>DELETE</command>triggers)."
msgstr ""

#: xml/trigger.xml:196(para)
msgid "A row-level <literal>INSTEAD OF</literal>trigger should either return <symbol>NULL</symbol>to indicate that it did not modify any data from the view's underlying base tables, or it should return the view row that was passed in (the <varname>NEW</varname>row for <command>INSERT</command>and <command>UPDATE</command>operations, or the <varname>OLD</varname>row for <command>DELETE</command>operations). A nonnull return value is used to signal that the trigger performed the necessary data modifications in the view. This will cause the count of the number of rows affected by the command to be incremented. For <command>INSERT</command>and <command>UPDATE</command>operations, the trigger may modify the <varname>NEW</varname>row before returning it. This will change the data returned by <command>INSERT RETURNING</command>or <command>UPDATE RETURNING</command>, and is useful when the view will not show exactly the same data that was provided."
msgstr ""

#: xml/trigger.xml:218(para)
msgid "The return value is ignored for row-level triggers fired after an operation, and so they can return <symbol>NULL</symbol>."
msgstr ""

#: xml/trigger.xml:221(para)
msgid "If more than one trigger is defined for the same event on the same relation, the triggers will be fired in alphabetical order by trigger name. In the case of <literal>BEFORE</literal>and <literal>INSTEAD OF</literal>triggers, the possibly-modified row returned by each trigger becomes the input to the next trigger. If any <literal>BEFORE</literal>or <literal>INSTEAD OF</literal>trigger returns <symbol>NULL</symbol>, the operation is abandoned for that row and subsequent triggers are not fired (for that row)."
msgstr ""

#: xml/trigger.xml:232(para)
msgid "A trigger definition can also specify a Boolean <literal>WHEN</literal>condition, which will be tested to see whether the trigger should be fired. In row-level triggers the <literal>WHEN</literal>condition can examine the old and/or new values of columns of the row. (Statement-level triggers can also have <literal>WHEN</literal>conditions, although the feature is not so useful for them.) In a <literal>BEFORE</literal>trigger, the <literal>WHEN</literal>condition is evaluated just before the function is or would be executed, so using <literal>WHEN</literal>is not materially different from testing the same condition at the beginning of the trigger function. However, in an <literal>AFTER</literal>trigger, the <literal>WHEN</literal>condition is evaluated just after the row update occurs, and it determines whether an event is queued to fire the trigger at the end of statement. So when an <literal>AFTER</literal>trigger's <literal>WHEN</literal>condition does not return true, it is not necessary to queue an event nor to re-fetch the row at end of statement. This can result in significant speedups in statements that modify many rows, if the trigger only needs to be fired for a few of the rows. <literal>INSTEAD OF</literal>triggers do not support <literal>WHEN</literal>conditions."
msgstr ""

#: xml/trigger.xml:258(para)
msgid "Typically, row-level <literal>BEFORE</literal>triggers are used for checking or modifying the data that will be inserted or updated. For example, a <literal>BEFORE</literal>trigger might be used to insert the current time into a <type>timestamp</type>column, or to check that two elements of the row are consistent. Row-level <literal>AFTER</literal>triggers are most sensibly used to propagate the updates to other tables, or make consistency checks against other tables. The reason for this division of labor is that an <literal>AFTER</literal>trigger can be certain it is seeing the final value of the row, while a <literal>BEFORE</literal>trigger cannot; there might be other <literal>BEFORE</literal>triggers firing after it. If you have no specific reason to make a trigger <literal>BEFORE</literal>or <literal>AFTER</literal>, the <literal>BEFORE</literal>case is more efficient, since the information about the operation doesn't have to be saved until end of statement."
msgstr ""

#: xml/trigger.xml:280(para)
msgid "If a trigger function executes SQL commands then these commands might fire triggers again. This is known as cascading triggers. There is no direct limitation on the number of cascade levels. It is possible for cascades to cause a recursive invocation of the same trigger; for example, an <command>INSERT</command>trigger might execute a command that inserts an additional row into the same table, causing the <command>INSERT</command>trigger to be fired again. It is the trigger programmer's responsibility to avoid infinite recursion in such scenarios."
msgstr ""

#: xml/trigger.xml:290(para)
msgid "<indexterm><primary>trigger</primary><secondary>arguments for trigger functions</secondary></indexterm>When a trigger is being defined, arguments can be specified for it. The purpose of including arguments in the trigger definition is to allow different triggers with similar requirements to call the same function. As an example, there could be a generalized trigger function that takes as its arguments two column names and puts the current user in one and the current time stamp in the other. Properly written, this trigger function would be independent of the specific table it is triggering on. So the same function could be used for <command>INSERT</command>events on any table with suitable columns, to automatically track creation of records in a transaction table for example. It could also be used to track last-update events if defined as an <command>UPDATE</command>trigger."
msgstr ""

#: xml/trigger.xml:308(para)
msgid "Each programming language that supports triggers has its own method for making the trigger input data available to the trigger function. This input data includes the type of trigger event (e.g., <command>INSERT</command>or <command>UPDATE</command>) as well as any arguments that were listed in <command>CREATE TRIGGER</command>. For a row-level trigger, the input data also includes the <varname>NEW</varname>row for <command>INSERT</command>and <command>UPDATE</command>triggers, and/or the <varname>OLD</varname>row for <command>UPDATE</command>and <command>DELETE</command>triggers. Statement-level triggers do not currently have any way to examine the individual row(s) modified by the statement."
msgstr ""

#: xml/trigger.xml:327(title)
msgid "Visibility of Data Changes"
msgstr ""

#: xml/trigger.xml:335(para)
msgid "Statement-level triggers follow simple visibility rules: none of the changes made by a statement are visible to statement-level triggers that are invoked before the statement, whereas all modifications are visible to statement-level <literal>AFTER</literal>triggers."
msgstr ""

#: xml/trigger.xml:343(para)
msgid "The data change (insertion, update, or deletion) causing the trigger to fire is naturally <emphasis>not</emphasis>visible to SQL commands executed in a row-level <literal>BEFORE</literal>trigger, because it hasn't happened yet."
msgstr ""

#: xml/trigger.xml:351(para)
msgid "However, SQL commands executed in a row-level <literal>BEFORE</literal>trigger <emphasis>will</emphasis>see the effects of data changes for rows previously processed in the same outer command. This requires caution, since the ordering of these change events is not in general predictable; a SQL command that affects multiple rows can visit the rows in any order."
msgstr ""

#: xml/trigger.xml:361(para)
msgid "Similarly, a row-level <literal>INSTEAD OF</literal>trigger will see the effects of data changes made by previous firings of <literal>INSTEAD OF</literal>triggers in the same outer command."
msgstr ""

#: xml/trigger.xml:368(para)
msgid "When a row-level <literal>AFTER</literal>trigger is fired, all data changes made by the outer command are already complete, and are visible to the invoked trigger function."
msgstr ""

#: xml/trigger.xml:328(para)
msgid "If you execute SQL commands in your trigger function, and these commands access the table that the trigger is for, then you need to be aware of the data visibility rules, because they determine whether these SQL commands will see the data change that the trigger is fired for. Briefly: <placeholder-1/>"
msgstr ""

#: xml/trigger.xml:374(para)
msgid "If your trigger function is written in any of the standard procedural languages, then the above statements apply only if the function is declared <literal>VOLATILE</literal>. Functions that are declared <literal>STABLE</literal>or <literal>IMMUTABLE</literal>will not see changes made by the calling command in any case."
msgstr ""

#: xml/trigger.xml:381(para)
msgid "Further information about data visibility rules can be found in <xref linkend=\"spi-visibility\">. The example in <xref linkend=\"trigger-example\">contains a demonstration of these rules.</xref></xref>"
msgstr ""

#: xml/trigger.xml:388(title)
msgid "Writing Trigger Functions in C"
msgstr ""

#: xml/trigger.xml:391(secondary)
msgid "in C"
msgstr ""

#: xml/trigger.xml:393(para)
msgid "This section describes the low-level details of the interface to a trigger function. This information is only needed when writing trigger functions in C. If you are using a higher-level language then these details are handled for you. In most cases you should consider using a procedural language before writing your triggers in C. The documentation of each procedural language explains how to write a trigger in that language."
msgstr ""

#: xml/trigger.xml:401(para)
msgid "Trigger functions must use the <quote>version 1</quote>function manager interface."
msgstr ""

#: xml/trigger.xml:409(programlisting)
#, no-wrap
msgid "CALLED_AS_TRIGGER(fcinfo)"
msgstr ""

#: xml/trigger.xml:411(programlisting)
#, no-wrap
msgid "((fcinfo)-context != NULL IsA((fcinfo)-context,\n    TriggerData))"
msgstr ""

#: xml/trigger.xml:403(para)
msgid "When a function is called by the trigger manager, it is not passed any normal arguments, but it is passed a <quote>context</quote>pointer pointing to a <structname>TriggerData</structname>structure. C functions can check whether they were called from the trigger manager or not by executing the macro: <placeholder-1/>which expands to: <placeholder-2/>If this returns true, then it is safe to cast <literal>fcinfo-context</literal>to type <literal>TriggerData *</literal>and make use of the pointed-to <structname>TriggerData</structname>structure. The function must <emphasis>not</emphasis>alter the <structname>TriggerData</structname>structure or any of the data it points to."
msgstr ""

#: xml/trigger.xml:424(programlisting)
#, no-wrap
msgid "typedef struct TriggerData { NodeTag type;\n    TriggerEvent tg_event; Relation tg_relation; HeapTuple\n    tg_trigtuple; HeapTuple tg_newtuple; Trigger *tg_trigger;\n    Buffer tg_trigtuplebuf; Buffer tg_newtuplebuf; }\n    TriggerData;"
msgstr ""

#: xml/trigger.xml:433(structfield)
msgid "type"
msgstr ""

#: xml/trigger.xml:436(para)
msgid "Always <literal>T_TriggerData</literal>."
msgstr ""

#: xml/trigger.xml:442(structfield)
msgid "tg_event"
msgstr ""

#: xml/trigger.xml:451(literal)
msgid "TRIGGER_FIRED_BEFORE(tg_event)"
msgstr ""

#: xml/trigger.xml:454(para)
msgid "Returns true if the trigger fired before the operation."
msgstr ""

#: xml/trigger.xml:460(literal)
msgid "TRIGGER_FIRED_AFTER(tg_event)"
msgstr ""

#: xml/trigger.xml:463(para)
msgid "Returns true if the trigger fired after the operation."
msgstr ""

#: xml/trigger.xml:469(literal)
msgid "TRIGGER_FIRED_INSTEAD(tg_event)"
msgstr ""

#: xml/trigger.xml:472(para)
msgid "Returns true if the trigger fired instead of the operation."
msgstr ""

#: xml/trigger.xml:478(literal)
msgid "TRIGGER_FIRED_FOR_ROW(tg_event)"
msgstr ""

#: xml/trigger.xml:481(para)
msgid "Returns true if the trigger fired for a row-level event."
msgstr ""

#: xml/trigger.xml:487(literal)
msgid "TRIGGER_FIRED_FOR_STATEMENT(tg_event)"
msgstr ""

#: xml/trigger.xml:491(para)
msgid "Returns true if the trigger fired for a statement-level event."
msgstr ""

#: xml/trigger.xml:497(literal)
msgid "TRIGGER_FIRED_BY_INSERT(tg_event)"
msgstr ""

#: xml/trigger.xml:501(para)
msgid "Returns true if the trigger was fired by an <command>INSERT</command>command."
msgstr ""

#: xml/trigger.xml:507(literal)
msgid "TRIGGER_FIRED_BY_UPDATE(tg_event)"
msgstr ""

#: xml/trigger.xml:511(para)
msgid "Returns true if the trigger was fired by an <command>UPDATE</command>command."
msgstr ""

#: xml/trigger.xml:517(literal)
msgid "TRIGGER_FIRED_BY_DELETE(tg_event)"
msgstr ""

#: xml/trigger.xml:521(para)
msgid "Returns true if the trigger was fired by a <command>DELETE</command>command."
msgstr ""

#: xml/trigger.xml:527(literal)
msgid "TRIGGER_FIRED_BY_TRUNCATE(tg_event)"
msgstr ""

#: xml/trigger.xml:531(para)
msgid "Returns true if the trigger was fired by a <command>TRUNCATE</command>command."
msgstr ""

#: xml/trigger.xml:445(para)
msgid "Describes the event for which the function is called. You can use the following macros to examine <literal>tg_event</literal>: <placeholder-1/>"
msgstr ""

#: xml/trigger.xml:540(structfield)
msgid "tg_relation"
msgstr ""

#: xml/trigger.xml:543(para)
msgid "A pointer to a structure describing the relation that the trigger fired for. Look at <filename>utils/rel.h</filename>for details about this structure. The most interesting things are <literal>tg_relation-rd_att</literal>(descriptor of the relation tuples) and <literal>tg_relation-rd_rel-relname</literal>(relation name; the type is not <type>char*</type>but <type>NameData</type>; use <literal>SPI_getrelname(tg_relation)</literal>to get a <type>char*</type>if you need a copy of the name)."
msgstr ""

#: xml/trigger.xml:559(structfield)
msgid "tg_trigtuple"
msgstr ""

#: xml/trigger.xml:562(para)
msgid "A pointer to the row for which the trigger was fired. This is the row being inserted, updated, or deleted. If this trigger was fired for an <command>INSERT</command>or <command>DELETE</command>then this is what you should return from the function if you don't want to replace the row with a different one (in the case of <command>INSERT</command>) or skip the operation. For triggers on foreign tables, values of system columns herein are unspecified."
msgstr ""

#: xml/trigger.xml:576(structfield)
msgid "tg_newtuple"
msgstr ""

#: xml/trigger.xml:579(para)
msgid "A pointer to the new version of the row, if the trigger was fired for an <command>UPDATE</command>, and <symbol>NULL</symbol>if it is for an <command>INSERT</command>or a <command>DELETE</command>. This is what you have to return from the function if the event is an <command>UPDATE</command>and you don't want to replace this row by a different one or skip the operation. For triggers on foreign tables, values of system columns herein are unspecified."
msgstr ""

#: xml/trigger.xml:594(structfield)
msgid "tg_trigger"
msgstr ""

#: xml/trigger.xml:600(programlisting)
#, no-wrap
msgid "typedef struct Trigger { Oid tgoid; char\n          *tgname; Oid tgfoid; int16 tgtype; char tgenabled; bool\n          tgisinternal; Oid tgconstrrelid; Oid tgconstrindid; Oid\n          tgconstraint; bool tgdeferrable; bool tginitdeferred;\n          int16 tgnargs; int16 tgnattr; int16 *tgattr; char\n          **tgargs; char *tgqual; } Trigger;"
msgstr ""

#: xml/trigger.xml:597(para)
msgid "A pointer to a structure of type <structname>Trigger</structname>, defined in <filename>utils/reltrigger.h</filename>: <placeholder-1/>where <structfield>tgname</structfield>is the trigger's name, <structfield>tgnargs</structfield>is the number of arguments in <structfield>tgargs</structfield>, and <structfield>tgargs</structfield>is an array of pointers to the arguments specified in the <command>CREATE TRIGGER</command>statement. The other members are for internal use only."
msgstr ""

#: xml/trigger.xml:618(structfield)
msgid "tg_trigtuplebuf"
msgstr ""

#: xml/trigger.xml:621(para)
msgid "The buffer containing <structfield>tg_trigtuple</structfield>, or <symbol>InvalidBuffer</symbol>if there is no such tuple or it is not stored in a disk buffer."
msgstr ""

#: xml/trigger.xml:629(structfield)
msgid "tg_newtuplebuf"
msgstr ""

#: xml/trigger.xml:632(para)
msgid "The buffer containing <structfield>tg_newtuple</structfield>, or <symbol>InvalidBuffer</symbol>if there is no such tuple or it is not stored in a disk buffer."
msgstr ""

#: xml/trigger.xml:421(para)
msgid "<structname>struct TriggerData</structname>is defined in <filename>commands/trigger.h</filename>: <placeholder-1/>where the members are defined as follows: <placeholder-2/>"
msgstr ""

#: xml/trigger.xml:639(para)
msgid "A trigger function must return either a <structname>HeapTuple</structname>pointer or a <symbol>NULL</symbol>pointer ( <emphasis>not</emphasis>an SQL null value, that is, do not set <parameter>isNull</parameter>true). Be careful to return either <structfield>tg_trigtuple</structfield>or <structfield>tg_newtuple</structfield>, as appropriate, if you don't want to modify the row being operated on."
msgstr ""

#: xml/trigger.xml:650(title)
msgid "A Complete Trigger Example"
msgstr ""

#: xml/trigger.xml:651(para)
msgid "Here is a very simple example of a trigger function written in C. (Examples of triggers written in procedural languages can be found in the documentation of the procedural languages.)"
msgstr ""

#: xml/trigger.xml:655(para)
msgid "The function <function>trigf</function>reports the number of rows in the table <structname>ttest</structname>and skips the actual operation if the command attempts to insert a null value into the column <structfield>x</structfield>. (So the trigger acts as a not-null constraint but doesn't abort the transaction.)"
msgstr ""

#: xml/trigger.xml:663(programlisting)
#, no-wrap
msgid "CREATE TABLE ttest ( x integer\n    );"
msgstr ""

#: xml/trigger.xml:662(para)
msgid "First, the table definition: <placeholder-1/>"
msgstr ""

#: xml/trigger.xml:666(programlisting)
#, no-wrap
msgid "#include \"postgres.h\" #include \"executor/spi.h\"\n    /* this is what you need to work with SPI */ #include\n    \"commands/trigger.h\" /* ... triggers ... */ #include\n    \"utils/rel.h\" /* ... and relations */ PG_MODULE_MAGIC;\n    PG_FUNCTION_INFO_V1(trigf); Datum trigf(PG_FUNCTION_ARGS) {\n    TriggerData *trigdata = (TriggerData *) fcinfo-&gt;context;\n    TupleDesc tupdesc; HeapTuple rettuple; char *when; bool\n    checknull = false; bool isnull; int ret, i; /* make sure it's\n    called as a trigger at all */ if (!CALLED_AS_TRIGGER(fcinfo))\n    elog(ERROR, \"trigf: not called by trigger manager\"); /* tuple\n    to return to executor */ if\n    (TRIGGER_FIRED_BY_UPDATE(trigdata-&gt;tg_event)) rettuple =\n    trigdata-&gt;tg_newtuple; else rettuple =\n    trigdata-&gt;tg_trigtuple; /* check for null values */ if\n    (!TRIGGER_FIRED_BY_DELETE(trigdata-&gt;tg_event) &amp;&amp;\n    TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event)) checknull = true;\n    if (TRIGGER_FIRED_BEFORE(trigdata-&gt;tg_event)) when =\n    \"before\"; else when = \"after \"; tupdesc =\n    trigdata-&gt;tg_relation-&gt;rd_att; /* connect to SPI manager\n    */ if ((ret = SPI_connect()) &lt; 0) elog(ERROR, \"trigf (fired\n    %s): SPI_connect returned %d\", when, ret); /* get number of\n    rows in table */ ret = SPI_exec(\"SELECT count(*) FROM ttest\",\n    0); if (ret &lt; 0) elog(ERROR, \"trigf (fired %s): SPI_exec\n    returned %d\", when, ret); /* count(*) returns int8, so be\n    careful to convert */ i =\n    DatumGetInt64(SPI_getbinval(SPI_tuptable-&gt;vals[0],\n    SPI_tuptable-&gt;tupdesc, 1, &amp;isnull)); elog (INFO, \"trigf\n    (fired %s): there are %d rows in ttest\", when, i);\n    SPI_finish(); if (checknull) { SPI_getbinval(rettuple, tupdesc,\n    1, &amp;isnull); if (isnull) rettuple = NULL; } return\n    PointerGetDatum(rettuple); }"
msgstr ""

#: xml/trigger.xml:665(para)
msgid "This is the source code of the trigger function: <placeholder-1/>"
msgstr ""

#: xml/trigger.xml:700(programlisting)
#, no-wrap
msgid "CREATE FUNCTION trigf() RETURNS trigger AS ' \n    <replaceable>filename</replaceable>' LANGUAGE C; CREATE TRIGGER\n    tbefore BEFORE INSERT OR UPDATE OR DELETE ON ttest FOR EACH ROW\n    EXECUTE PROCEDURE trigf(); CREATE TRIGGER tafter AFTER INSERT\n    OR UPDATE OR DELETE ON ttest FOR EACH ROW EXECUTE PROCEDURE\n    trigf();"
msgstr ""

#: xml/trigger.xml:697(para)
msgid "After you have compiled the source code (see <xref linkend=\"dfunc\">), declare the function and the triggers: <placeholder-1/></xref>"
msgstr ""

#: xml/trigger.xml:706(para)
msgid "Now you can test the operation of the trigger: <screen>= INSERT INTO ttest VALUES (NULL); INFO: trigf (fired\n    before): there are 0 rows in ttest INSERT 0 0 -- Insertion\n    skipped and AFTER trigger is not fired = SELECT * FROM ttest; x\n    --- (0 rows) = INSERT INTO ttest VALUES (1); INFO: trigf (fired\n    before): there are 0 rows in ttest INFO: trigf (fired after ):\n    there are 1 rows in ttest ^^^^^^^^ remember what we said about\n    visibility. INSERT 167793 1 vac= SELECT * FROM ttest; x --- 1\n    (1 row) = INSERT INTO ttest SELECT x * 2 FROM ttest; INFO:\n    trigf (fired before): there are 1 rows in ttest INFO: trigf\n    (fired after ): there are 2 rows in ttest ^^^^^^ remember what\n    we said about visibility. INSERT 167794 1 = SELECT * FROM\n    ttest; x --- 1 2 (2 rows) = UPDATE ttest SET x = NULL WHERE x =\n    2; INFO: trigf (fired before): there are 2 rows in ttest UPDATE\n    0 = UPDATE ttest SET x = 4 WHERE x = 2; INFO: trigf (fired\n    before): there are 2 rows in ttest INFO: trigf (fired after ):\n    there are 2 rows in ttest UPDATE 1 vac= SELECT * FROM ttest; x\n    --- 1 4 (2 rows) = DELETE FROM ttest; INFO: trigf (fired\n    before): there are 2 rows in ttest INFO: trigf (fired before):\n    there are 1 rows in ttest INFO: trigf (fired after ): there are\n    0 rows in ttest INFO: trigf (fired after ): there are 0 rows in\n    ttest ^^^^^^ remember what we said about visibility. DELETE 2 =\n    SELECT * FROM ttest; x --- (0 rows)</screen>"
msgstr ""

#: xml/trigger.xml:729(para)
msgid "There are more complex examples in <filename>src/test/regress/regress.c</filename>and in <xref linkend=\"contrib-spi\">.</xref>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/trigger.xml:0(None)
msgid "translator-credits"
msgstr ""

