msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/contrib-spi.xml:3(title)
msgid "spi"
msgstr ""

#: xml/contrib-spi.xml:5(primary)
msgid "SPI"
msgstr ""

#: xml/contrib-spi.xml:6(secondary)
msgid "examples"
msgstr ""

#: xml/contrib-spi.xml:8(para)
msgid "The <application>spi</application>module provides several workable examples of using SPI and triggers. While these functions are of some value in their own right, they are even more useful as examples to modify for your own purposes. The functions are general enough to be used with any table, but you have to specify table and field names (as described below) while creating a trigger."
msgstr ""

#: xml/contrib-spi.xml:16(para)
msgid "Each of the groups of functions described below is provided as a separately-installable extension."
msgstr ""

#: xml/contrib-spi.xml:19(title)
msgid "refint Functions for Implementing Referential Integrity"
msgstr ""

#: xml/contrib-spi.xml:21(para)
msgid "<function>check_primary_key()</function>and <function>check_foreign_key()</function>are used to check foreign key constraints. (This functionality is long since superseded by the built-in foreign key mechanism, of course, but the module is still useful as an example.)"
msgstr ""

#: xml/contrib-spi.xml:27(para)
msgid "<function>check_primary_key()</function>checks the referencing table. To use, create a <literal>BEFORE INSERT OR UPDATE</literal>trigger using this function on a table referencing another table. Specify as the trigger arguments: the referencing table's column name(s) which form the foreign key, the referenced table name, and the column names in the referenced table which form the primary/unique key. To handle multiple foreign keys, create a trigger for each reference."
msgstr ""

#: xml/contrib-spi.xml:37(para)
msgid "<function>check_foreign_key()</function>checks the referenced table. To use, create a <literal>BEFORE DELETE OR UPDATE</literal>trigger using this function on a table referenced by other table(s). Specify as the trigger arguments: the number of referencing tables for which the function has to perform checking, the action if a referencing key is found ( <literal>cascade</literal>to delete the referencing row, <literal>restrict</literal>to abort transaction if referencing keys exist, <literal>setnull</literal>to set referencing key fields to null), the triggered table's column names which form the primary/unique key, then the referencing table name and column names (repeated for as many referencing tables as were specified by first argument). Note that the primary/unique key columns should be marked NOT NULL and should have a unique index."
msgstr ""

#: xml/contrib-spi.xml:55(para)
msgid "There are examples in <filename>refint.example</filename>."
msgstr ""

#: xml/contrib-spi.xml:59(title)
msgid "timetravel Functions for Implementing Time Travel"
msgstr ""

#: xml/contrib-spi.xml:68(programlisting)
#, no-wrap
msgid "CREATE TABLE mytab ( ... ... start_date\n    abstime, stop_date abstime ... ... );"
msgstr ""

#: xml/contrib-spi.xml:61(para)
msgid "Long ago, <productname>PostgreSQL</productname>had a built-in time travel feature that kept the insert and delete times for each tuple. This can be emulated using these functions. To use these functions, you must add to a table two columns of <type>abstime</type>type to store the date when a tuple was inserted (start_date) and changed/deleted (stop_date): <placeholder-1/>The columns can be named whatever you like, but in this discussion we'll call them start_date and stop_date."
msgstr ""

#: xml/contrib-spi.xml:72(para)
msgid "When a new row is inserted, start_date should normally be set to current time, and stop_date to <literal>infinity</literal>. The trigger will automatically substitute these values if the inserted data contains nulls in these columns. Generally, inserting explicit non-null data in these columns should only be done when re-loading dumped data."
msgstr ""

#: xml/contrib-spi.xml:79(para)
msgid "Tuples with stop_date equal to <literal>infinity</literal>are <quote>valid now</quote>, and can be modified. Tuples with a finite stop_date cannot be modified anymore the trigger will prevent it. (If you need to do that, you can turn off time travel as shown below.)"
msgstr ""

#: xml/contrib-spi.xml:85(para)
msgid "For a modifiable row, on update only the stop_date in the tuple being updated will be changed (to current time) and a new tuple with the modified data will be inserted. Start_date in this new tuple will be set to current time and stop_date to <literal>infinity</literal>."
msgstr ""

#: xml/contrib-spi.xml:90(para)
msgid "A delete does not actually remove the tuple but only sets its stop_date to current time."
msgstr ""

#: xml/contrib-spi.xml:92(para)
msgid "To query for tuples <quote>valid now</quote>, include <literal>stop_date = 'infinity'</literal>in the query's WHERE condition. (You might wish to incorporate that in a view.) Similarly, you can query for tuples valid at any past time with suitable conditions on start_date and stop_date."
msgstr ""

#: xml/contrib-spi.xml:98(para)
msgid "<function>timetravel()</function>is the general trigger function that supports this behavior. Create a <literal>BEFORE INSERT OR UPDATE OR DELETE</literal>trigger using this function on each time-traveled table. Specify two trigger arguments: the actual names of the start_date and stop_date columns. Optionally, you can specify one to three more arguments, which must refer to columns of type <type>text</type>. The trigger will store the name of the current user into the first of these columns during INSERT, the second column during UPDATE, and the third during DELETE."
msgstr ""

#: xml/contrib-spi.xml:110(para)
msgid "<function>set_timetravel()</function>allows you to turn time-travel on or off for a table. <literal>set_timetravel('mytab', 1)</literal>will turn TT ON for table <literal>mytab</literal>. <literal>set_timetravel('mytab', 0)</literal>will turn TT OFF for table <literal>mytab</literal>. In both cases the old status is reported. While TT is off, you can modify the start_date and stop_date columns freely. Note that the on/off status is local to the current database session fresh sessions will always start out with TT ON for all tables."
msgstr ""

#: xml/contrib-spi.xml:123(para)
msgid "<function>get_timetravel()</function>returns the TT state for a table without changing it."
msgstr ""

#: xml/contrib-spi.xml:126(para)
msgid "There is an example in <filename>timetravel.example</filename>."
msgstr ""

#: xml/contrib-spi.xml:130(title)
msgid "autoinc Functions for Autoincrementing Fields"
msgstr ""

#: xml/contrib-spi.xml:131(para)
msgid "<function>autoinc()</function>is a trigger that stores the next value of a sequence into an integer field. This has some overlap with the built-in <quote>serial column</quote>feature, but it is not the same: <function>autoinc()</function>will override attempts to substitute a different field value during inserts, and optionally it can be used to increment the field during updates, too."
msgstr ""

#: xml/contrib-spi.xml:140(para)
msgid "To use, create a <literal>BEFORE INSERT</literal>(or optionally <literal>BEFORE INSERT OR UPDATE</literal>) trigger using this function. Specify two trigger arguments: the name of the integer column to be modified, and the name of the sequence object that will supply values. (Actually, you can specify any number of pairs of such names, if you'd like to update more than one autoincrementing column.)"
msgstr ""

#: xml/contrib-spi.xml:148(para)
msgid "There is an example in <filename>autoinc.example</filename>."
msgstr ""

#: xml/contrib-spi.xml:152(title)
msgid "insert_username Functions for Tracking Who Changed a Table"
msgstr ""

#: xml/contrib-spi.xml:154(para)
msgid "<function>insert_username()</function>is a trigger that stores the current user's name into a text field. This can be useful for tracking who last modified a particular row within a table."
msgstr ""

#: xml/contrib-spi.xml:159(para)
msgid "To use, create a <literal>BEFORE INSERT</literal>and/or <literal>UPDATE</literal>trigger using this function. Specify a single trigger argument: the name of the text column to be modified."
msgstr ""

#: xml/contrib-spi.xml:164(para)
msgid "There is an example in <filename>insert_username.example</filename>."
msgstr ""

#: xml/contrib-spi.xml:168(title)
msgid "moddatetime Functions for Tracking Last Modification Time"
msgstr ""

#: xml/contrib-spi.xml:170(para)
msgid "<function>moddatetime()</function>is a trigger that stores the current time into a <type>timestamp</type>field. This can be useful for tracking the last modification time of a particular row within a table."
msgstr ""

#: xml/contrib-spi.xml:176(para)
msgid "To use, create a <literal>BEFORE UPDATE</literal>trigger using this function. Specify a single trigger argument: the name of the column to be modified. The column must be of type <type>timestamp</type>or <type>timestamp with time zone</type>."
msgstr ""

#: xml/contrib-spi.xml:182(para)
msgid "There is an example in <filename>moddatetime.example</filename>."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/contrib-spi.xml:0(None)
msgid "translator-credits"
msgstr ""

