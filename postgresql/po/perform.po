msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/perform.xml:3(title)
msgid "Performance Tips"
msgstr ""

#: xml/perform.xml:5(primary)
msgid "performance"
msgstr ""

#: xml/perform.xml:7(para)
msgid "Query performance can be affected by many things. Some of these can be controlled by the user, while others are fundamental to the underlying design of the system. This chapter provides some hints about understanding and tuning <productname>PostgreSQL</productname>performance."
msgstr ""

#: xml/perform.xml:13(title)
msgid "Using <command>EXPLAIN</command>"
msgstr ""

#: xml/perform.xml:16(primary)
msgid "EXPLAIN"
msgstr ""

#: xml/perform.xml:19(primary)
msgid "query plan"
msgstr ""

#: xml/perform.xml:21(para)
msgid "<productname>PostgreSQL</productname>devises a <firstterm>query plan</firstterm>for each query it receives. Choosing the right plan to match the query structure and the properties of the data is absolutely critical for good performance, so the system includes a complex <firstterm>planner</firstterm>that tries to choose good plans. You can use the <xref linkend=\"sql-explain\">command to see what query plan the planner creates for any query. Plan-reading is an art that requires some experience to master, but this section attempts to cover the basics.</xref>"
msgstr ""

#: xml/perform.xml:33(para)
msgid "Examples in this section are drawn from the regression test database after doing a <command>VACUUM ANALYZE</command>, using 9.3 development sources. You should be able to get similar results if you try the examples yourself, but your estimated costs and row counts might vary slightly because <command>ANALYZE</command>'s statistics are random samples rather than exact, and because costs are inherently somewhat platform-dependent."
msgstr ""

#: xml/perform.xml:42(para)
msgid "The examples use <command>EXPLAIN</command>'s default <quote>text</quote>output format, which is compact and convenient for humans to read. If you want to feed <command>EXPLAIN</command>'s output to a program for further analysis, you should use one of its machine-readable output formats (XML, JSON, or YAML) instead."
msgstr ""

#: xml/perform.xml:50(title)
msgid "<command>EXPLAIN</command>Basics"
msgstr ""

#: xml/perform.xml:52(para)
msgid "The structure of a query plan is a tree of <firstterm>plan nodes</firstterm>. Nodes at the bottom level of the tree are scan nodes: they return raw rows from a table. There are different types of scan nodes for different table access methods: sequential scans, index scans, and bitmap index scans. There are also non-table row sources, such as <literal>VALUES</literal>clauses and set-returning functions in <literal>FROM</literal>, which have their own scan node types. If the query requires joining, aggregation, sorting, or other operations on the raw rows, then there will be additional nodes above the scan nodes to perform these operations. Again, there is usually more than one possible way to do these operations, so different node types can appear here too. The output of <command>EXPLAIN</command>has one line for each node in the plan tree, showing the basic node type plus the cost estimates that the planner made for the execution of that plan node. Additional lines might appear, indented from the node's summary line, to show additional properties of the node. The very first line (the summary line for the topmost node) has the estimated total execution cost for the plan; it is this number that the planner seeks to minimize."
msgstr ""

#: xml/perform.xml:76(para)
msgid "Here is a trivial example, just to show what the output looks like: <screen>EXPLAIN SELECT * FROM tenk1; QUERY PLAN\n      -------------------------------------------------------------\n      Seq Scan on tenk1 (cost=0.00..458.00 rows=10000\n      width=244)</screen>"
msgstr ""

#: xml/perform.xml:89(para)
msgid "Estimated start-up cost. This is the time expended before the output phase can begin, e.g., time to do the sorting in a sort node."
msgstr ""

#: xml/perform.xml:94(para)
msgid "Estimated total cost. This is stated on the assumption that the plan node is run to completion, i.e., all available rows are retrieved. In practice a node's parent node might stop short of reading all available rows (see the <literal>LIMIT</literal>example below)."
msgstr ""

#: xml/perform.xml:102(para)
msgid "Estimated number of rows output by this plan node. Again, the node is assumed to be run to completion."
msgstr ""

#: xml/perform.xml:107(para)
msgid "Estimated average width of rows output by this plan node (in bytes)."
msgstr ""

#: xml/perform.xml:82(para)
msgid "Since this query has no <literal>WHERE</literal>clause, it must scan all the rows of the table, so the planner has chosen to use a simple sequential scan plan. The numbers that are quoted in parentheses are (left to right): <placeholder-1/>"
msgstr ""

#: xml/perform.xml:111(para)
msgid "The costs are measured in arbitrary units determined by the planner's cost parameters (see <xref linkend=\"runtime-config-query-constants\">). Traditional practice is to measure the costs in units of disk page fetches; that is, <xref linkend=\"guc-seq-page-cost\">is conventionally set to <literal>1.0</literal>and the other cost parameters are set relative to that. The examples in this section are run with the default cost parameters.</xref></xref>"
msgstr ""

#: xml/perform.xml:120(para)
msgid "It's important to understand that the cost of an upper-level node includes the cost of all its child nodes. It's also important to realize that the cost only reflects things that the planner cares about. In particular, the cost does not consider the time spent transmitting result rows to the client, which could be an important factor in the real elapsed time; but the planner ignores it because it cannot change it by altering the plan. (Every correct plan will output the same row set, we trust.)"
msgstr ""

#: xml/perform.xml:129(para)
msgid "The <literal>rows</literal>value is a little tricky because it is not the number of rows processed or scanned by the plan node, but rather the number emitted by the node. This is often less than the number scanned, as a result of filtering by any <literal>WHERE</literal>-clause conditions that are being applied at the node. Ideally the top-level rows estimate will approximate the number of rows actually returned, updated, or deleted by the query."
msgstr ""

#: xml/perform.xml:138(para)
msgid "Returning to our example: <screen>EXPLAIN SELECT * FROM tenk1; QUERY PLAN\n      -------------------------------------------------------------\n      Seq Scan on tenk1 (cost=0.00..458.00 rows=10000\n      width=244)</screen>"
msgstr ""

#: xml/perform.xml:145(programlisting)
#, no-wrap
msgid "SELECT relpages, reltuples FROM pg_class\n      WHERE relname = 'tenk1';"
msgstr ""

#: xml/perform.xml:143(para)
msgid "These numbers are derived very straightforwardly. If you do: <placeholder-1/>you will find that <classname>tenk1</classname>has 358 disk pages and 10000 rows. The estimated cost is computed as (disk pages read * <xref linkend=\"guc-seq-page-cost\">) + (rows scanned * <xref linkend=\"guc-cpu-tuple-cost\">). By default, <varname>seq_page_cost</varname>is 1.0 and <varname>cpu_tuple_cost</varname>is 0.01, so the estimated cost is (358 * 1.0) + (10000 * 0.01) = 458.</xref></xref>"
msgstr ""

#: xml/perform.xml:155(para)
msgid "Now let's modify the query to add a <literal>WHERE</literal>condition: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 7000; QUERY\n      PLAN\n      ------------------------------------------------------------\n      Seq Scan on tenk1 (cost=0.00..483.00 rows=7001 width=244)\n      Filter: (unique1 7000)</screen>Notice that the <command>EXPLAIN</command>output shows the <literal>WHERE</literal>clause being applied as a <quote>filter</quote>condition attached to the Seq Scan plan node. This means that the plan node checks the condition for each row it scans, and outputs only the ones that pass the condition. The estimate of output rows has been reduced because of the <literal>WHERE</literal>clause. However, the scan will still have to visit all 10000 rows, so the cost hasn't decreased; in fact it has gone up a bit (by 10000 * <xref linkend=\"guc-cpu-operator-cost\">, to be exact) to reflect the extra CPU time spent checking the <literal>WHERE</literal>condition.</xref>"
msgstr ""

#: xml/perform.xml:175(para)
msgid "The actual number of rows this query would select is 7000, but the <literal>rows</literal>estimate is only approximate. If you try to duplicate this experiment, you will probably get a slightly different estimate; moreover, it can change after each <command>ANALYZE</command>command, because the statistics produced by <command>ANALYZE</command>are taken from a randomized sample of the table."
msgstr ""

#: xml/perform.xml:185(para)
msgid "Now, let's make the condition more restrictive: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 100; QUERY\n      PLAN\n      ------------------------------------------------------------------------------\n      Bitmap Heap Scan on tenk1 (cost=5.07..229.20 rows=101\n      width=244) Recheck Cond: (unique1 100) - Bitmap Index Scan on\n      tenk1_unique1 (cost=0.00..5.04 rows=101 width=0) Index Cond:\n      (unique1 100)</screen>Here the planner has decided to use a two-step plan: the child plan node visits an index to find the locations of rows matching the index condition, and then the upper plan node actually fetches those rows from the table itself. Fetching rows separately is much more expensive than reading them sequentially, but because not all the pages of the table have to be visited, this is still cheaper than a sequential scan. (The reason for using two plan levels is that the upper plan node sorts the row locations identified by the index into physical order before reading them, to minimize the cost of separate fetches. The <quote>bitmap</quote>mentioned in the node names is the mechanism that does the sorting.)"
msgstr ""

#: xml/perform.xml:205(para)
msgid "Now let's add another condition to the <literal>WHERE</literal>clause: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 100 AND\n      stringu1 = 'xxx'; QUERY PLAN\n      ------------------------------------------------------------------------------\n      Bitmap Heap Scan on tenk1 (cost=5.04..229.43 rows=1\n      width=244) Recheck Cond: (unique1 100) Filter: (stringu1 =\n      'xxx'::name) - Bitmap Index Scan on tenk1_unique1\n      (cost=0.00..5.04 rows=101 width=0) Index Cond: (unique1\n      100)</screen>The added condition <literal>stringu1 = 'xxx'</literal>reduces the output row count estimate, but not the cost because we still have to visit the same set of rows. Notice that the <literal>stringu1</literal>clause cannot be applied as an index condition, since this index is only on the <literal>unique1</literal>column. Instead it is applied as a filter on the rows retrieved by the index. Thus the cost has actually gone up slightly to reflect this extra checking."
msgstr ""

#: xml/perform.xml:224(para)
msgid "In some cases the planner will prefer a <quote>simple</quote>index scan plan: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 = 42; QUERY\n      PLAN\n      -----------------------------------------------------------------------------\n      Index Scan using tenk1_unique1 on tenk1 (cost=0.29..8.30\n      rows=1 width=244) Index Cond: (unique1 = 42)</screen>In this type of plan the table rows are fetched in index order, which makes them even more expensive to read, but there are so few that the extra cost of sorting the row locations is not worth it. You'll most often see this plan type for queries that fetch just a single row. It's also often used for queries that have an <literal>ORDER BY</literal>condition that matches the index order, because then no extra sorting step is needed to satisfy the <literal>ORDER BY</literal>."
msgstr ""

#: xml/perform.xml:241(para)
msgid "If there are separate indexes on several of the columns referenced in <literal>WHERE</literal>, the planner might choose to use an AND or OR combination of the indexes: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 100 AND\n      unique2 9000; QUERY PLAN\n      -------------------------------------------------------------------------------------\n      Bitmap Heap Scan on tenk1 (cost=25.08..60.21 rows=10\n      width=244) Recheck Cond: ((unique1 100) AND (unique2 9000)) -\n      BitmapAnd (cost=25.08..25.08 rows=10 width=0) - Bitmap Index\n      Scan on tenk1_unique1 (cost=0.00..5.04 rows=101 width=0)\n      Index Cond: (unique1 100) - Bitmap Index Scan on\n      tenk1_unique2 (cost=0.00..19.78 rows=999 width=0) Index Cond:\n      (unique2 9000)</screen>But this requires visiting both indexes, so it's not necessarily a win compared to using just one index and treating the other condition as a filter. If you vary the ranges involved you'll see the plan change accordingly."
msgstr ""

#: xml/perform.xml:259(para)
msgid "Here is an example showing the effects of <literal>LIMIT</literal>: <screen>EXPLAIN SELECT * FROM tenk1 WHERE unique1 100 AND\n      unique2 9000 LIMIT 2; QUERY PLAN\n      -------------------------------------------------------------------------------------\n      Limit (cost=0.29..14.48 rows=2 width=244) - Index Scan using\n      tenk1_unique2 on tenk1 (cost=0.29..71.27 rows=10 width=244)\n      Index Cond: (unique2 9000) Filter: (unique1\n      100)</screen>"
msgstr ""

#: xml/perform.xml:268(para)
msgid "This is the same query as above, but we added a <literal>LIMIT</literal>so that not all the rows need be retrieved, and the planner changed its mind about what to do. Notice that the total cost and row count of the Index Scan node are shown as if it were run to completion. However, the Limit node is expected to stop after retrieving only a fifth of those rows, so its total cost is only a fifth as much, and that's the actual estimated cost of the query. This plan is preferred over adding a Limit node to the previous plan because the Limit could not avoid paying the startup cost of the bitmap scan, so the total cost would be something over 25 units with that approach."
msgstr ""

#: xml/perform.xml:280(para)
msgid "Let's try joining two tables, using the columns we have been discussing: <screen>EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2 WHERE\n      t1.unique1 10 AND t1.unique2 = t2.unique2; QUERY PLAN\n      --------------------------------------------------------------------------------------\n      Nested Loop (cost=4.65..118.62 rows=10 width=488) - Bitmap\n      Heap Scan on tenk1 t1 (cost=4.36..39.47 rows=10 width=244)\n      Recheck Cond: (unique1 10) - Bitmap Index Scan on\n      tenk1_unique1 (cost=0.00..4.36 rows=10 width=0) Index Cond:\n      (unique1 10) - Index Scan using tenk2_unique2 on tenk2 t2\n      (cost=0.29..7.91 rows=1 width=244) Index Cond: (unique2 =\n      t1.unique2)</screen>"
msgstr ""

#: xml/perform.xml:292(para)
msgid "In this plan, we have a nested-loop join node with two table scans as inputs, or children. The indentation of the node summary lines reflects the plan tree structure. The join's first, or <quote>outer</quote>, child is a bitmap scan similar to those we saw before. Its cost and row count are the same as we'd get from <literal>SELECT ... WHERE unique1 10</literal>because we are applying the <literal>WHERE</literal>clause <literal>unique1 10</literal>at that node. The <literal>t1.unique2 = t2.unique2</literal>clause is not relevant yet, so it doesn't affect the row count of the outer scan. The nested-loop join node will run its second, or <quote>inner</quote>child once for each row obtained from the outer child. Column values from the current outer row can be plugged into the inner scan; here, the <literal>t1.unique2</literal>value from the outer row is available, so we get a plan and costs similar to what we saw above for a simple <literal>SELECT ... WHERE t2.unique2 = <replaceable>constant</replaceable></literal>case. (The estimated cost is actually a bit lower than what was seen above, as a result of caching that's expected to occur during the repeated index scans on <literal>t2</literal>.) The costs of the loop node are then set on the basis of the cost of the outer scan, plus one repetition of the inner scan for each outer row (10 * 7.87, here), plus a little CPU time for join processing."
msgstr ""

#: xml/perform.xml:321(para)
msgid "In this example the join's output row count is the same as the product of the two scans' row counts, but that's not true in all cases because there can be additional <literal>WHERE</literal>clauses that mention both tables and so can only be applied at the join point, not to either input scan. Here's an example: <screen>EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2 WHERE\n      t1.unique1 10 AND t2.unique2 10 AND t1.hundred t2.hundred;\n      QUERY PLAN\n      ---------------------------------------------------------------------------------------------\n      Nested Loop (cost=4.65..49.46 rows=33 width=488) Join Filter:\n      (t1.hundred t2.hundred) - Bitmap Heap Scan on tenk1 t1\n      (cost=4.36..39.47 rows=10 width=244) Recheck Cond: (unique1\n      10) - Bitmap Index Scan on tenk1_unique1 (cost=0.00..4.36\n      rows=10 width=0) Index Cond: (unique1 10) - Materialize\n      (cost=0.29..8.51 rows=10 width=244) - Index Scan using\n      tenk2_unique2 on tenk2 t2 (cost=0.29..8.46 rows=10 width=244)\n      Index Cond: (unique2 10)</screen>The condition <literal>t1.hundred t2.hundred</literal>can't be tested in the <literal>tenk2_unique2</literal>index, so it's applied at the join node. This reduces the estimated output row count of the join node, but does not change either input scan."
msgstr ""

#: xml/perform.xml:344(para)
msgid "Notice that here the planner has chosen to <quote>materialize</quote>the inner relation of the join, by putting a Materialize plan node atop it. This means that the <literal>t2</literal>index scan will be done just once, even though the nested-loop join node needs to read that data ten times, once for each row from the outer relation. The Materialize node saves the data in memory as it's read, and then returns the data from memory on each subsequent pass."
msgstr ""

#: xml/perform.xml:353(para)
msgid "When dealing with outer joins, you might see join plan nodes with both <quote>Join Filter</quote>and plain <quote>Filter</quote>conditions attached. Join Filter conditions come from the outer join's <literal>ON</literal>clause, so a row that fails the Join Filter condition could still get emitted as a null-extended row. But a plain Filter condition is applied after the outer-join rules and so acts to remove rows unconditionally. In an inner join there is no semantic difference between these types of filters."
msgstr ""

#: xml/perform.xml:364(para)
msgid "If we change the query's selectivity a bit, we might get a very different join plan: <screen>EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2 WHERE\n      t1.unique1 100 AND t1.unique2 = t2.unique2; QUERY PLAN\n      ------------------------------------------------------------------------------------------\n      Hash Join (cost=230.47..713.98 rows=101 width=488) Hash Cond:\n      (t2.unique2 = t1.unique2) - Seq Scan on tenk2 t2\n      (cost=0.00..445.00 rows=10000 width=244) - Hash\n      (cost=229.20..229.20 rows=101 width=244) - Bitmap Heap Scan\n      on tenk1 t1 (cost=5.07..229.20 rows=101 width=244) Recheck\n      Cond: (unique1 100) - Bitmap Index Scan on tenk1_unique1\n      (cost=0.00..5.04 rows=101 width=0) Index Cond: (unique1\n      100)</screen>"
msgstr ""

#: xml/perform.xml:377(para)
msgid "Here, the planner has chosen to use a hash join, in which rows of one table are entered into an in-memory hash table, after which the other table is scanned and the hash table is probed for matches to each row. Again note how the indentation reflects the plan structure: the bitmap scan on <literal>tenk1</literal>is the input to the Hash node, which constructs the hash table. That's then returned to the Hash Join node, which reads rows from its outer child plan and searches the hash table for each one."
msgstr ""

#: xml/perform.xml:386(para)
msgid "Another possible type of join is a merge join, illustrated here: <screen>EXPLAIN SELECT * FROM tenk1 t1, onek t2 WHERE\n      t1.unique1 100 AND t1.unique2 = t2.unique2; QUERY PLAN\n      ------------------------------------------------------------------------------------------\n      Merge Join (cost=198.11..268.19 rows=10 width=488) Merge\n      Cond: (t1.unique2 = t2.unique2) - Index Scan using\n      tenk1_unique2 on tenk1 t1 (cost=0.29..656.28 rows=101\n      width=244) Filter: (unique1 100) - Sort (cost=197.83..200.33\n      rows=1000 width=244) Sort Key: t2.unique2 - Seq Scan on onek\n      t2 (cost=0.00..148.00 rows=1000 width=244)</screen>"
msgstr ""

#: xml/perform.xml:397(para)
msgid "Merge join requires its input data to be sorted on the join keys. In this plan the <literal>tenk1</literal>data is sorted by using an index scan to visit the rows in the correct order, but a sequential scan and sort is preferred for <literal>onek</literal>, because there are many more rows to be visited in that table. (Sequential-scan-and-sort frequently beats an index scan for sorting many rows, because of the nonsequential disk access required by the index scan.)"
msgstr ""

#: xml/perform.xml:407(para)
msgid "One way to look at variant plans is to force the planner to disregard whatever strategy it thought was the cheapest, using the enable/disable flags described in <xref linkend=\"runtime-config-query-enable\">. (This is a crude tool, but useful. See also <xref linkend=\"explicit-joins\">.) For example, if we're unconvinced that sequential-scan-and-sort is the best way to deal with table <literal>onek</literal>in the previous example, we could try <screen>SET enable_sort = off; EXPLAIN SELECT * FROM tenk1\n      t1, onek t2 WHERE t1.unique1 100 AND t1.unique2 = t2.unique2;\n      QUERY PLAN\n      ------------------------------------------------------------------------------------------\n      Merge Join (cost=0.56..292.65 rows=10 width=488) Merge Cond:\n      (t1.unique2 = t2.unique2) - Index Scan using tenk1_unique2 on\n      tenk1 t1 (cost=0.29..656.28 rows=101 width=244) Filter:\n      (unique1 100) - Index Scan using onek_unique2 on onek t2\n      (cost=0.28..224.79 rows=1000 width=244)</screen>which shows that the planner thinks that sorting <literal>onek</literal>by index-scanning is about 12% more expensive than sequential-scan-and-sort. Of course, the next question is whether it's right about that. We can investigate that using <command>EXPLAIN ANALYZE</command>, as discussed below.</xref></xref>"
msgstr ""

#: xml/perform.xml:435(command)
msgid "EXPLAIN ANALYZE"
msgstr ""

#: xml/perform.xml:437(para)
msgid "It is possible to check the accuracy of the planner's estimates by using <command>EXPLAIN</command>'s <literal>ANALYZE</literal>option. With this option, <command>EXPLAIN</command>actually executes the query, and then displays the true row counts and true run time accumulated within each plan node, along with the same estimates that a plain <command>EXPLAIN</command>shows. For example, we might get a result like this: <screen>EXPLAIN ANALYZE SELECT * FROM tenk1 t1, tenk2 t2\n      WHERE t1.unique1 10 AND t1.unique2 = t2.unique2; QUERY PLAN\n      ---------------------------------------------------------------------------------------------------------------------------------\n      Nested Loop (cost=4.65..118.62 rows=10 width=488) (actual\n      time=0.128..0.377 rows=10 loops=1) - Bitmap Heap Scan on\n      tenk1 t1 (cost=4.36..39.47 rows=10 width=244) (actual\n      time=0.057..0.121 rows=10 loops=1) Recheck Cond: (unique1 10)\n      - Bitmap Index Scan on tenk1_unique1 (cost=0.00..4.36 rows=10\n      width=0) (actual time=0.024..0.024 rows=10 loops=1) Index\n      Cond: (unique1 10) - Index Scan using tenk2_unique2 on tenk2\n      t2 (cost=0.29..7.91 rows=1 width=244) (actual\n      time=0.021..0.022 rows=1 loops=10) Index Cond: (unique2 =\n      t1.unique2) Planning time: 0.181 ms Execution time: 0.501\n      ms</screen>Note that the <quote>actual time</quote>values are in milliseconds of real time, whereas the <literal>cost</literal>estimates are expressed in arbitrary units; so they are unlikely to match up. The thing that's usually most important to look for is whether the estimated row counts are reasonably close to reality. In this example the estimates were all dead-on, but that's quite unusual in practice."
msgstr ""

#: xml/perform.xml:469(para)
msgid "In some query plans, it is possible for a subplan node to be executed more than once. For example, the inner index scan will be executed once per outer row in the above nested-loop plan. In such cases, the <literal>loops</literal>value reports the total number of executions of the node, and the actual time and rows values shown are averages per-execution. This is done to make the numbers comparable with the way that the cost estimates are shown. Multiply by the <literal>loops</literal>value to get the total time actually spent in the node. In the above example, we spent a total of 0.220 milliseconds executing the index scans on <literal>tenk2</literal>."
msgstr ""

#: xml/perform.xml:482(para)
msgid "In some cases <command>EXPLAIN ANALYZE</command>shows additional execution statistics beyond the plan node execution times and row counts. For example, Sort and Hash nodes provide extra information: <screen>EXPLAIN ANALYZE SELECT * FROM tenk1 t1, tenk2 t2\n      WHERE t1.unique1 100 AND t1.unique2 = t2.unique2 ORDER BY\n      t1.fivethous; QUERY PLAN\n      --------------------------------------------------------------------------------------------------------------------------------------------\n      Sort (cost=717.34..717.59 rows=101 width=488) (actual\n      time=7.761..7.774 rows=100 loops=1) Sort Key: t1.fivethous\n      Sort Method: quicksort Memory: 77kB - Hash Join\n      (cost=230.47..713.98 rows=101 width=488) (actual\n      time=0.711..7.427 rows=100 loops=1) Hash Cond: (t2.unique2 =\n      t1.unique2) - Seq Scan on tenk2 t2 (cost=0.00..445.00\n      rows=10000 width=244) (actual time=0.007..2.583 rows=10000\n      loops=1) - Hash (cost=229.20..229.20 rows=101 width=244)\n      (actual time=0.659..0.659 rows=100 loops=1) Buckets: 1024\n      Batches: 1 Memory Usage: 28kB - Bitmap Heap Scan on tenk1 t1\n      (cost=5.07..229.20 rows=101 width=244) (actual\n      time=0.080..0.526 rows=100 loops=1) Recheck Cond: (unique1\n      100) - Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04\n      rows=101 width=0) (actual time=0.049..0.049 rows=100 loops=1)\n      Index Cond: (unique1 100) Planning time: 0.194 ms Execution\n      time: 8.008 ms</screen>The Sort node shows the sort method used (in particular, whether the sort was in-memory or on-disk) and the amount of memory or disk space needed. The Hash node shows the number of hash buckets and batches as well as the peak amount of memory used for the hash table. (If the number of batches exceeds one, there will also be disk space usage involved, but that is not shown.)"
msgstr ""

#: xml/perform.xml:513(para)
msgid "Another type of extra information is the number of rows removed by a filter condition: <screen>EXPLAIN ANALYZE SELECT * FROM tenk1 WHERE ten 7;\n      QUERY PLAN\n      ---------------------------------------------------------------------------------------------------------\n      Seq Scan on tenk1 (cost=0.00..483.00 rows=7000 width=244)\n      (actual time=0.016..5.107 rows=7000 loops=1) Filter: (ten 7)\n      Rows Removed by Filter: 3000 Planning time: 0.083 ms\n      Execution time: 5.905 ms</screen>These counts can be particularly valuable for filter conditions applied at join nodes. The <quote>Rows Removed</quote>line only appears when at least one scanned row, or potential join pair in the case of a join node, is rejected by the filter condition."
msgstr ""

#: xml/perform.xml:527(para)
msgid "A case similar to filter conditions occurs with <quote>lossy</quote>index scans. For example, consider this search for polygons containing a specific point: <screen>EXPLAIN ANALYZE SELECT * FROM polygon_tbl WHERE f1 @\n      polygon '(0.5,2.0)'; QUERY PLAN\n      ------------------------------------------------------------------------------------------------------\n      Seq Scan on polygon_tbl (cost=0.00..1.05 rows=1 width=32)\n      (actual time=0.044..0.044 rows=0 loops=1) Filter: (f1 @\n      '((0.5,2))'::polygon) Rows Removed by Filter: 4 Planning\n      time: 0.040 ms Execution time: 0.083 ms</screen>The planner thinks (quite correctly) that this sample table is too small to bother with an index scan, so we have a plain sequential scan in which all the rows got rejected by the filter condition. But if we force an index scan to be used, we see: <screen>SET enable_seqscan TO off; EXPLAIN ANALYZE SELECT *\n      FROM polygon_tbl WHERE f1 @ polygon '(0.5,2.0)'; QUERY PLAN\n      --------------------------------------------------------------------------------------------------------------------------\n      Index Scan using gpolygonind on polygon_tbl (cost=0.13..8.15\n      rows=1 width=32) (actual time=0.062..0.062 rows=0 loops=1)\n      Index Cond: (f1 @ '((0.5,2))'::polygon) Rows Removed by Index\n      Recheck: 1 Planning time: 0.034 ms Execution time: 0.144\n      ms</screen>Here we can see that the index returned one candidate row, which was then rejected by a recheck of the index condition. This happens because a GiST index is <quote>lossy</quote>for polygon containment tests: it actually returns the rows with polygons that overlap the target, and then we have to do the exact containment test on those rows."
msgstr ""

#: xml/perform.xml:555(para)
msgid "<command>EXPLAIN</command>has a <literal>BUFFERS</literal>option that can be used with <literal>ANALYZE</literal>to get even more run time statistics: <screen>EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM tenk1 WHERE\n      unique1 100 AND unique2 9000; QUERY PLAN\n      ---------------------------------------------------------------------------------------------------------------------------------\n      Bitmap Heap Scan on tenk1 (cost=25.08..60.21 rows=10\n      width=244) (actual time=0.323..0.342 rows=10 loops=1) Recheck\n      Cond: ((unique1 100) AND (unique2 9000)) Buffers: shared\n      hit=15 - BitmapAnd (cost=25.08..25.08 rows=10 width=0)\n      (actual time=0.309..0.309 rows=0 loops=1) Buffers: shared\n      hit=7 - Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04\n      rows=101 width=0) (actual time=0.043..0.043 rows=100 loops=1)\n      Index Cond: (unique1 100) Buffers: shared hit=2 - Bitmap\n      Index Scan on tenk1_unique2 (cost=0.00..19.78 rows=999\n      width=0) (actual time=0.227..0.227 rows=999 loops=1) Index\n      Cond: (unique2 9000) Buffers: shared hit=5 Planning time:\n      0.088 ms Execution time: 0.423 ms</screen>The numbers provided by <literal>BUFFERS</literal>help to identify which parts of the query are the most I/O-intensive."
msgstr ""

#: xml/perform.xml:578(para)
msgid "Keep in mind that because <command>EXPLAIN ANALYZE</command>actually runs the query, any side-effects will happen as usual, even though whatever results the query might output are discarded in favor of printing the <command>EXPLAIN</command>data. If you want to analyze a data-modifying query without changing your tables, you can roll the command back afterwards, for example: <screen>BEGIN; EXPLAIN ANALYZE UPDATE tenk1 SET hundred =\n      hundred + 1 WHERE unique1 100; QUERY PLAN\n      --------------------------------------------------------------------------------------------------------------------------------\n      Update on tenk1 (cost=5.07..229.46 rows=101 width=250)\n      (actual time=14.628..14.628 rows=0 loops=1) - Bitmap Heap\n      Scan on tenk1 (cost=5.07..229.46 rows=101 width=250) (actual\n      time=0.101..0.439 rows=100 loops=1) Recheck Cond: (unique1\n      100) - Bitmap Index Scan on tenk1_unique1 (cost=0.00..5.04\n      rows=101 width=0) (actual time=0.043..0.043 rows=100 loops=1)\n      Index Cond: (unique1 100) Planning time: 0.079 ms Execution\n      time: 14.727 ms ROLLBACK;</screen>"
msgstr ""

#: xml/perform.xml:597(para)
msgid "As seen in this example, when the query is an <command>INSERT</command>, <command>UPDATE</command>, or <command>DELETE</command>command, the actual work of applying the table changes is done by a top-level Insert, Update, or Delete plan node. The plan nodes underneath this node perform the work of locating the old rows and/or computing the new data. So above, we see the same sort of bitmap table scan we've seen already, and its output is fed to an Update node that stores the updated rows. It's worth noting that although the data-modifying node can take a considerable amount of run time (here, it's consuming the lion's share of the time), the planner does not currently add anything to the cost estimates to account for that work. That's because the work to be done is the same for every correct query plan, so it doesn't affect planning decisions."
msgstr ""

#: xml/perform.xml:613(para)
msgid "When an <command>UPDATE</command>or <command>DELETE</command>command affects an inheritance hierarchy, the output might look like this: <screen>EXPLAIN UPDATE parent SET f2 = f2 + 1 WHERE f1 = 101;\n      QUERY PLAN\n      -----------------------------------------------------------------------------------\n      Update on parent (cost=0.00..24.53 rows=4 width=14) Update on\n      parent Update on child1 Update on child2 Update on child3 -\n      Seq Scan on parent (cost=0.00..0.00 rows=1 width=14) Filter:\n      (f1 = 101) - Index Scan using child1_f1_key on child1\n      (cost=0.15..8.17 rows=1 width=14) Index Cond: (f1 = 101) -\n      Index Scan using child2_f1_key on child2 (cost=0.15..8.17\n      rows=1 width=14) Index Cond: (f1 = 101) - Index Scan using\n      child3_f1_key on child3 (cost=0.15..8.17 rows=1 width=14)\n      Index Cond: (f1 = 101)</screen>In this example the Update node needs to consider three child tables as well as the originally-mentioned parent table. So there are four input scanning subplans, one per table. For clarity, the Update node is annotated to show the specific target tables that will be updated, in the same order as the corresponding subplans. (These annotations are new as of <productname>PostgreSQL</productname>9.5; in prior versions the reader had to intuit the target tables by inspecting the subplans.)"
msgstr ""

#: xml/perform.xml:638(para)
msgid "The <literal>Planning time</literal>shown by <command>EXPLAIN ANALYZE</command>is the time it took to generate the query plan from the parsed query and optimize it. It does not include parsing or rewriting."
msgstr ""

#: xml/perform.xml:643(para)
msgid "The <literal>Execution time</literal>shown by <command>EXPLAIN ANALYZE</command>includes executor start-up and shut-down time, as well as the time to run any triggers that are fired, but it does not include parsing, rewriting, or planning time. Time spent executing <literal>BEFORE</literal>triggers, if any, is included in the time for the related Insert, Update, or Delete node; but time spent executing <literal>AFTER</literal>triggers is not counted there because <literal>AFTER</literal>triggers are fired after completion of the whole plan. The total time spent in each trigger (either <literal>BEFORE</literal>or <literal>AFTER</literal>) is also shown separately. Note that deferred constraint triggers will not be executed until end of transaction and are thus not considered at all by <command>EXPLAIN ANALYZE</command>."
msgstr ""

#: xml/perform.xml:664(title)
msgid "Caveats"
msgstr ""

#: xml/perform.xml:665(para)
msgid "There are two significant ways in which run times measured by <command>EXPLAIN ANALYZE</command>can deviate from normal execution of the same query. First, since no output rows are delivered to the client, network transmission costs and I/O conversion costs are not included. Second, the measurement overhead added by <command>EXPLAIN ANALYZE</command>can be significant, especially on machines with slow <function>gettimeofday()</function>operating-system calls. You can use the <xref linkend=\"pgtesttiming\">tool to measure the overhead of timing on your system.</xref>"
msgstr ""

#: xml/perform.xml:678(para)
msgid "<command>EXPLAIN</command>results should not be extrapolated to situations much different from the one you are actually testing; for example, results on a toy-sized table cannot be assumed to apply to large tables. The planner's cost estimates are not linear and so it might choose a different plan for a larger or smaller table. An extreme example is that on a table that only occupies one disk page, you'll nearly always get a sequential scan plan whether indexes are available or not. The planner realizes that it's going to take one disk page read to process the table in any case, so there's no value in expending additional page reads to look at an index. (We saw this happening in the <literal>polygon_tbl</literal>example above.)"
msgstr ""

#: xml/perform.xml:692(para)
msgid "There are cases in which the actual and estimated values won't match up well, but nothing is really wrong. One such case occurs when plan node execution is stopped short by a <literal>LIMIT</literal>or similar effect. For example, in the <literal>LIMIT</literal>query we used before, <screen>EXPLAIN ANALYZE SELECT * FROM tenk1 WHERE unique1 100\n      AND unique2 9000 LIMIT 2; QUERY PLAN\n      -------------------------------------------------------------------------------------------------------------------------------\n      Limit (cost=0.29..14.71 rows=2 width=244) (actual\n      time=0.177..0.249 rows=2 loops=1) - Index Scan using\n      tenk1_unique2 on tenk1 (cost=0.29..72.42 rows=10 width=244)\n      (actual time=0.174..0.244 rows=2 loops=1) Index Cond:\n      (unique2 9000) Filter: (unique1 100) Rows Removed by Filter:\n      287 Planning time: 0.096 ms Execution time: 0.336\n      ms</screen>the estimated cost and row count for the Index Scan node are shown as though it were run to completion. But in reality the Limit node stopped requesting rows after it got two, so the actual row count is only 2 and the run time is less than the cost estimate would suggest. This is not an estimation error, only a discrepancy in the way the estimates and true values are displayed."
msgstr ""

#: xml/perform.xml:715(para)
msgid "Merge joins also have measurement artifacts that can confuse the unwary. A merge join will stop reading one input if it's exhausted the other input and the next key value in the one input is greater than the last key value of the other input; in such a case there can be no more matches and so no need to scan the rest of the first input. This results in not reading all of one child, with results like those mentioned for <literal>LIMIT</literal>. Also, if the outer (first) child contains rows with duplicate key values, the inner (second) child is backed up and rescanned for the portion of its rows matching that key value. <command>EXPLAIN ANALYZE</command>counts these repeated emissions of the same inner rows as if they were real additional rows. When there are many outer duplicates, the reported actual row count for the inner child plan node can be significantly larger than the number of rows that are actually in the inner relation."
msgstr ""

#: xml/perform.xml:733(para)
msgid "BitmapAnd and BitmapOr nodes always report their actual row counts as zero, due to implementation limitations."
msgstr ""

#: xml/perform.xml:738(title)
msgid "Statistics Used by the Planner"
msgstr ""

#: xml/perform.xml:740(primary)
msgid "statistics"
msgstr ""

#: xml/perform.xml:741(secondary)
msgid "of the planner"
msgstr ""

#: xml/perform.xml:743(para)
msgid "As we saw in the previous section, the query planner needs to estimate the number of rows retrieved by a query in order to make good choices of query plans. This section provides a quick look at the statistics that the system uses for these estimates."
msgstr ""

#: xml/perform.xml:748(para)
msgid "One component of the statistics is the total number of entries in each table and index, as well as the number of disk blocks occupied by each table and index. This information is kept in the table <link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>, in the columns <structfield>reltuples</structfield>and <structfield>relpages</structfield>. We can look at it with queries similar to this one: <screen>SELECT relname, relkind, reltuples, relpages FROM\n    pg_class WHERE relname LIKE 'tenk1%'; relname | relkind |\n    reltuples | relpages\n    ----------------------+---------+-----------+---------- tenk1 |\n    r | 10000 | 358 tenk1_hundred | i | 10000 | 30\n    tenk1_thous_tenthous | i | 10000 | 30 tenk1_unique1 | i | 10000\n    | 30 tenk1_unique2 | i | 10000 | 30 (5 rows)</screen>Here we can see that <structname>tenk1</structname>contains 10000 rows, as do its indexes, but the indexes are (unsurprisingly) much smaller than the table."
msgstr ""

#: xml/perform.xml:769(para)
msgid "For efficiency reasons, <structfield>reltuples</structfield>and <structfield>relpages</structfield>are not updated on-the-fly, and so they usually contain somewhat out-of-date values. They are updated by <command>VACUUM</command>, <command>ANALYZE</command>, and a few DDL commands such as <command>CREATE INDEX</command>. A <command>VACUUM</command>or <command>ANALYZE</command>operation that does not scan the entire table (which is commonly the case) will incrementally update the <structfield>reltuples</structfield>count on the basis of the part of the table it did scan, resulting in an approximate value. In any case, the planner will scale the values it finds in <structname>pg_class</structname>to match the current physical table size, thus obtaining a closer approximation."
msgstr ""

#: xml/perform.xml:788(primary)
msgid "pg_statistic"
msgstr ""

#: xml/perform.xml:790(para)
msgid "Most queries retrieve only a fraction of the rows in a table, due to <literal>WHERE</literal>clauses that restrict the rows to be examined. The planner thus needs to make an estimate of the <firstterm>selectivity</firstterm>of <literal>WHERE</literal>clauses, that is, the fraction of rows that match each condition in the <literal>WHERE</literal>clause. The information used for this task is stored in the <link linkend=\"catalog-pg-statistic\"><structname>pg_statistic</structname></link>system catalog. Entries in <structname>pg_statistic</structname>are updated by the <command>ANALYZE</command>and <command>VACUUM ANALYZE</command>commands, and are always approximate even when freshly updated."
msgstr ""

#: xml/perform.xml:807(primary)
msgid "pg_stats"
msgstr ""

#: xml/perform.xml:809(para)
msgid "Rather than look at <structname>pg_statistic</structname>directly, it's better to look at its view <link linkend=\"view-pg-stats\"><structname>pg_stats</structname></link>when examining the statistics manually. <structname>pg_stats</structname>is designed to be more easily readable. Furthermore, <structname>pg_stats</structname>is readable by all, whereas <structname>pg_statistic</structname>is only readable by a superuser. (This prevents unprivileged users from learning something about the contents of other people's tables from the statistics. The <structname>pg_stats</structname>view is restricted to show only rows about tables that the current user can read.) For example, we might do: <screen>SELECT attname, inherited, n_distinct,\n    array_to_string(most_common_vals, E'\\n') as most_common_vals\n    FROM pg_stats WHERE tablename = 'road'; attname | inherited |\n    n_distinct | most_common_vals\n    ---------+-----------+------------+------------------------------------\n    name | f | -0.363388 | I- 580 Ramp+ | | | I- 880 Ramp+ | | | Sp\n    Railroad + | | | I- 580 + | | | I- 680 Ramp name | t |\n    -0.284859 | I- 880 Ramp+ | | | I- 580 Ramp+ | | | I- 680 Ramp+\n    | | | I- 580 + | | | State Hwy 13 Ramp (2 rows)</screen>Note that two rows are displayed for the same column, one corresponding to the complete inheritance hierarchy starting at the <literal>road</literal>table ( <literal>inherited</literal>= <literal>t</literal>), and another one including only the <literal>road</literal>table itself ( <literal>inherited</literal>= <literal>f</literal>)."
msgstr ""

#: xml/perform.xml:843(para)
msgid "The amount of information stored in <structname>pg_statistic</structname>by <command>ANALYZE</command>, in particular the maximum number of entries in the <structfield>most_common_vals</structfield>and <structfield>histogram_bounds</structfield>arrays for each column, can be set on a column-by-column basis using the <command>ALTER TABLE SET STATISTICS</command>command, or globally by setting the <xref linkend=\"guc-default-statistics-target\">configuration variable. The default limit is presently 100 entries. Raising the limit might allow more accurate planner estimates to be made, particularly for columns with irregular data distributions, at the price of consuming more space in <structname>pg_statistic</structname>and slightly more time to compute the estimates. Conversely, a lower limit might be sufficient for columns with simple data distributions.</xref>"
msgstr ""

#: xml/perform.xml:861(para)
msgid "Further details about the planner's use of statistics can be found in <xref linkend=\"planner-stats-details\">.</xref>"
msgstr ""

#: xml/perform.xml:866(title)
msgid "Controlling the Planner with Explicit <literal>JOIN</literal>Clauses"
msgstr ""

#: xml/perform.xml:869(primary)
msgid "join"
msgstr ""

#: xml/perform.xml:870(secondary)
msgid "controlling the order"
msgstr ""

#: xml/perform.xml:872(para)
msgid "It is possible to control the query planner to some extent by using the explicit <literal>JOIN</literal>syntax. To see why this matters, we first need some background."
msgstr ""

#: xml/perform.xml:877(programlisting)
#, no-wrap
msgid "SELECT * FROM a, b, c WHERE a.id = b.id AND\n    b.ref = c.id;"
msgstr ""

#: xml/perform.xml:876(para)
msgid "In a simple join query, such as: <placeholder-1/>the planner is free to join the given tables in any order. For example, it could generate a query plan that joins A to B, using the <literal>WHERE</literal>condition <literal>a.id = b.id</literal>, and then joins C to this joined table, using the other <literal>WHERE</literal>condition. Or it could join B to C and then join A to that result. Or it could join A to C and then join them with B but that would be inefficient, since the full Cartesian product of A and C would have to be formed, there being no applicable condition in the <literal>WHERE</literal>clause to allow optimization of the join. (All joins in the <productname>PostgreSQL</productname>executor happen between two input tables, so it's necessary to build up the result in one or another of these fashions.) The important point is that these different join possibilities give semantically equivalent results but might have hugely different execution costs. Therefore, the planner will explore all of them to try to find the most efficient query plan."
msgstr ""

#: xml/perform.xml:898(para)
msgid "When a query only involves two or three tables, there aren't many join orders to worry about. But the number of possible join orders grows exponentially as the number of tables expands. Beyond ten or so input tables it's no longer practical to do an exhaustive search of all the possibilities, and even for six or seven tables planning might take an annoyingly long time. When there are too many input tables, the <productname>PostgreSQL</productname>planner will switch from exhaustive search to a <firstterm>genetic</firstterm>probabilistic search through a limited number of possibilities. (The switch-over threshold is set by the <xref linkend=\"guc-geqo-threshold\">run-time parameter.) The genetic search takes less time, but it won't necessarily find the best possible plan.</xref>"
msgstr ""

#: xml/perform.xml:917(programlisting)
#, no-wrap
msgid "SELECT * FROM a LEFT JOIN (b JOIN c ON (b.ref =\n    c.id)) ON (a.id = b.id);"
msgstr ""

#: xml/perform.xml:927(programlisting)
#, no-wrap
msgid "SELECT * FROM a LEFT JOIN b ON (a.bid = b.id)\n    LEFT JOIN c ON (a.cid = c.id);"
msgstr ""

#: xml/perform.xml:914(para)
msgid "When the query involves outer joins, the planner has less freedom than it does for plain (inner) joins. For example, consider: <placeholder-1/>Although this query's restrictions are superficially similar to the previous example, the semantics are different because a row must be emitted for each row of A that has no matching row in the join of B and C. Therefore the planner has no choice of join order here: it must join B to C and then join A to that result. Accordingly, this query takes less time to plan than the previous query. In other cases, the planner might be able to determine that more than one join order is safe. For example, given: <placeholder-2/>it is valid to join A to either B or C first. Currently, only <literal>FULL JOIN</literal>completely constrains the join order. Most practical cases involving <literal>LEFT JOIN</literal>or <literal>RIGHT JOIN</literal>can be rearranged to some extent."
msgstr ""

#: xml/perform.xml:935(para)
msgid "Explicit inner join syntax ( <literal>INNER JOIN</literal>, <literal>CROSS JOIN</literal>, or unadorned <literal>JOIN</literal>) is semantically the same as listing the input relations in <literal>FROM</literal>, so it does not constrain the join order."
msgstr ""

#: xml/perform.xml:950(programlisting)
#, no-wrap
msgid "SELECT * FROM a, b, c WHERE a.id = b.id AND\n    b.ref = c.id; SELECT * FROM a CROSS JOIN b CROSS JOIN c WHERE\n    a.id = b.id AND b.ref = c.id; SELECT * FROM a JOIN (b JOIN c ON\n    (b.ref = c.id)) ON (a.id = b.id);"
msgstr ""

#: xml/perform.xml:942(para)
msgid "Even though most kinds of <literal>JOIN</literal>don't completely constrain the join order, it is possible to instruct the <productname>PostgreSQL</productname>query planner to treat all <literal>JOIN</literal>clauses as constraining the join order anyway. For example, these three queries are logically equivalent: <placeholder-1/>But if we tell the planner to honor the <literal>JOIN</literal>order, the second and third take less time to plan than the first. This effect is not worth worrying about for only three tables, but it can be a lifesaver with many tables."
msgstr ""

#: xml/perform.xml:959(para)
msgid "To force the planner to follow the join order laid out by explicit <literal>JOIN</literal>s, set the <xref linkend=\"guc-join-collapse-limit\">run-time parameter to 1. (Other possible values are discussed below.)</xref>"
msgstr ""

#: xml/perform.xml:968(programlisting)
#, no-wrap
msgid "SELECT * FROM a CROSS JOIN b, c, d, e WHERE\n    ...;"
msgstr ""

#: xml/perform.xml:964(para)
msgid "You do not need to constrain the join order completely in order to cut search time, because it's OK to use <literal>JOIN</literal>operators within items of a plain <literal>FROM</literal>list. For example, consider: <placeholder-1/>With <varname>join_collapse_limit</varname>= 1, this forces the planner to join A to B before joining them to other tables, but doesn't constrain its choices otherwise. In this example, the number of possible join orders is reduced by a factor of 5."
msgstr ""

#: xml/perform.xml:975(para)
msgid "Constraining the planner's search in this way is a useful technique both for reducing planning time and for directing the planner to a good query plan. If the planner chooses a bad join order by default, you can force it to choose a better order via <literal>JOIN</literal>syntax assuming that you know of a better order, that is. Experimentation is recommended."
msgstr ""

#: xml/perform.xml:985(programlisting)
#, no-wrap
msgid "SELECT * FROM x, y, (SELECT * FROM a, b, c\n    WHERE something) AS ss WHERE\n    somethingelse;"
msgstr ""

#: xml/perform.xml:993(programlisting)
#, no-wrap
msgid "SELECT * FROM x, y, a, b, c WHERE something AND\n    somethingelse;"
msgstr ""

#: xml/perform.xml:982(para)
msgid "A closely related issue that affects planning time is collapsing of subqueries into their parent query. For example, consider: <placeholder-1/>This situation might arise from use of a view that contains a join; the view's <literal>SELECT</literal>rule will be inserted in place of the view reference, yielding a query much like the above. Normally, the planner will try to collapse the subquery into the parent, yielding: <placeholder-2/>This usually results in a better plan than planning the subquery separately. (For example, the outer <literal>WHERE</literal>conditions might be such that joining X to A first eliminates many rows of A, thus avoiding the need to form the full logical output of the subquery.) But at the same time, we have increased the planning time; here, we have a five-way join problem replacing two separate three-way join problems. Because of the exponential growth of the number of possibilities, this makes a big difference. The planner tries to avoid getting stuck in huge join search problems by not collapsing a subquery if more than <varname>from_collapse_limit</varname><literal>FROM</literal>items would result in the parent query. You can trade off planning time against quality of plan by adjusting this run-time parameter up or down."
msgstr ""

#: xml/perform.xml:1015(quote)
msgid "flatten out"
msgstr ""

#: xml/perform.xml:1018(varname) xml/perform.xml:1021(varname)
msgid "join_collapse_limit"
msgstr ""

#: xml/perform.xml:1019(varname)
msgid "from_collapse_limit"
msgstr ""

#: xml/perform.xml:1012(xref)
msgid "are similarly named because they do almost the same thing: one controls when the planner will <placeholder-1/>subqueries, and the other controls when it will flatten out explicit joins. Typically you would either set <placeholder-2/>equal to <placeholder-3/>(so that explicit joins and subqueries act similarly) or set <placeholder-4/>to 1 (if you want to control join order with explicit joins). But you might set them differently if you are trying to fine-tune the trade-off between planning time and run time."
msgstr ""

#: xml/perform.xml:1011(xref)
msgid "and <placeholder-1/>"
msgstr ""

#: xml/perform.xml:1028(title)
msgid "Populating a Database"
msgstr ""

#: xml/perform.xml:1029(para)
msgid "One might need to insert a large amount of data when first populating a database. This section contains some suggestions on how to make this process as efficient as possible."
msgstr ""

#: xml/perform.xml:1034(title)
msgid "Disable Autocommit"
msgstr ""

#: xml/perform.xml:1036(primary)
msgid "autocommit"
msgstr ""

#: xml/perform.xml:1037(secondary)
msgid "bulk-loading data"
msgstr ""

#: xml/perform.xml:1039(para)
msgid "When using multiple <command>INSERT</command>s, turn off autocommit and just do one commit at the end. (In plain SQL, this means issuing <command>BEGIN</command>at the start and <command>COMMIT</command>at the end. Some client libraries might do this behind your back, in which case you need to make sure the library does it when you want it done.) If you allow each insertion to be committed separately, <productname>PostgreSQL</productname>is doing a lot of work for each row that is added. An additional benefit of doing all insertions in one transaction is that if the insertion of one row were to fail then the insertion of all rows inserted up to that point would be rolled back, so you won't be stuck with partially loaded data."
msgstr ""

#: xml/perform.xml:1055(title)
msgid "Use <command>COPY</command>"
msgstr ""

#: xml/perform.xml:1057(para)
msgid "Use <xref linkend=\"sql-copy\">to load all the rows in one command, instead of using a series of <command>INSERT</command>commands. The <command>COPY</command>command is optimized for loading large numbers of rows; it is less flexible than <command>INSERT</command>, but incurs significantly less overhead for large data loads. Since <command>COPY</command>is a single command, there is no need to disable autocommit if you use this method to populate a table.</xref>"
msgstr ""

#: xml/perform.xml:1068(para)
msgid "If you cannot use <command>COPY</command>, it might help to use <xref linkend=\"sql-prepare\">to create a prepared <command>INSERT</command>statement, and then use <command>EXECUTE</command>as many times as required. This avoids some of the overhead of repeatedly parsing and planning <command>INSERT</command>. Different interfaces provide this facility in different ways; look for <quote>prepared statements</quote>in the interface documentation.</xref>"
msgstr ""

#: xml/perform.xml:1079(para)
msgid "Note that loading a large number of rows using <command>COPY</command>is almost always faster than using <command>INSERT</command>, even if <command>PREPARE</command>is used and multiple insertions are batched into a single transaction."
msgstr ""

#: xml/perform.xml:1084(para)
msgid "<command>COPY</command>is fastest when used within the same transaction as an earlier <command>CREATE TABLE</command>or <command>TRUNCATE</command>command. In such cases no WAL needs to be written, because in case of an error, the files containing the newly loaded data will be removed anyway. However, this consideration only applies when <xref linkend=\"guc-wal-level\">is <literal>minimal</literal>as all commands must write WAL otherwise.</xref>"
msgstr ""

#: xml/perform.xml:1097(title)
msgid "Remove Indexes"
msgstr ""

#: xml/perform.xml:1098(para)
msgid "If you are loading a freshly created table, the fastest method is to create the table, bulk load the table's data using <command>COPY</command>, then create any indexes needed for the table. Creating an index on pre-existing data is quicker than updating it incrementally as each row is loaded."
msgstr ""

#: xml/perform.xml:1104(para)
msgid "If you are adding large amounts of data to an existing table, it might be a win to drop the indexes, load the table, and then recreate the indexes. Of course, the database performance for other users might suffer during the time the indexes are missing. One should also think twice before dropping a unique index, since the error checking afforded by the unique constraint will be lost while the index is missing."
msgstr ""

#: xml/perform.xml:1114(title)
msgid "Remove Foreign Key Constraints"
msgstr ""

#: xml/perform.xml:1115(para)
msgid "Just as with indexes, a foreign key constraint can be checked <quote>in bulk</quote>more efficiently than row-by-row. So it might be useful to drop foreign key constraints, load data, and re-create the constraints. Again, there is a trade-off between data load speed and loss of error checking while the constraint is missing."
msgstr ""

#: xml/perform.xml:1122(para)
msgid "What's more, when you load data into a table with existing foreign key constraints, each new row requires an entry in the server's list of pending trigger events (since it is the firing of a trigger that checks the row's foreign key constraint). Loading many millions of rows can cause the trigger event queue to overflow available memory, leading to intolerable swapping or even outright failure of the command. Therefore it may be <emphasis>necessary</emphasis>, not just desirable, to drop and re-apply foreign keys when loading large amounts of data. If temporarily removing the constraint isn't acceptable, the only other recourse may be to split up the load operation into smaller transactions."
msgstr ""

#: xml/perform.xml:1137(title)
msgid "Increase <varname>maintenance_work_mem</varname>"
msgstr ""

#: xml/perform.xml:1139(para)
msgid "Temporarily increasing the <xref linkend=\"guc-maintenance-work-mem\">configuration variable when loading large amounts of data can lead to improved performance. This will help to speed up <command>CREATE INDEX</command>commands and <command>ALTER TABLE ADD FOREIGN KEY</command>commands. It won't do much for <command>COPY</command>itself, so this advice is only useful when you are using one or both of the above techniques.</xref>"
msgstr ""

#: xml/perform.xml:1151(title)
msgid "Increase <varname>max_wal_size</varname>"
msgstr ""

#: xml/perform.xml:1153(para)
msgid "Temporarily increasing the <xref linkend=\"guc-max-wal-size\">configuration variable can also make large data loads faster. This is because loading a large amount of data into <productname>PostgreSQL</productname>will cause checkpoints to occur more often than the normal checkpoint frequency (specified by the <varname>checkpoint_timeout</varname>configuration variable). Whenever a checkpoint occurs, all dirty pages must be flushed to disk. By increasing <varname>max_wal_size</varname>temporarily during bulk data loads, the number of checkpoints that are required can be reduced.</xref>"
msgstr ""

#: xml/perform.xml:1168(title)
msgid "Disable WAL Archival and Streaming Replication"
msgstr ""

#: xml/perform.xml:1169(para)
msgid "When loading large amounts of data into an installation that uses WAL archiving or streaming replication, it might be faster to take a new base backup after the load has completed than to process a large amount of incremental WAL data. To prevent incremental WAL logging while loading, disable archiving and streaming replication, by setting <xref linkend=\"guc-wal-level\">to <literal>minimal</literal>, <xref linkend=\"guc-archive-mode\">to <literal>off</literal>, and <xref linkend=\"guc-max-wal-senders\">to zero. But note that changing these settings requires a server restart.</xref></xref></xref>"
msgstr ""

#: xml/perform.xml:1194(command)
msgid "CREATE TABLE AS SELECT"
msgstr ""

#: xml/perform.xml:1198(para)
msgid "<command>CREATE INDEX</command>(and variants such as <command>ALTER TABLE ADD PRIMARY KEY</command>)"
msgstr ""

#: xml/perform.xml:1204(command)
msgid "ALTER TABLE SET TABLESPACE"
msgstr ""

#: xml/perform.xml:1209(command)
msgid "CLUSTER"
msgstr ""

#: xml/perform.xml:1213(para)
msgid "<command>COPY FROM</command>, when the target table has been created or truncated earlier in the same transaction"
msgstr ""

#: xml/perform.xml:1182(para)
msgid "Aside from avoiding the time for the archiver or WAL sender to process the WAL data, doing this will actually make certain commands faster, because they are designed not to write WAL at all if <varname>wal_level</varname>is <literal>minimal</literal>. (They can guarantee crash safety more cheaply by doing an <function>fsync</function>at the end than by writing WAL.) This applies to the following commands: <placeholder-1/>"
msgstr ""

#: xml/perform.xml:1221(title)
msgid "Run <command>ANALYZE</command>Afterwards"
msgstr ""

#: xml/perform.xml:1223(para)
msgid "Whenever you have significantly altered the distribution of data within a table, running <xref linkend=\"sql-analyze\">is strongly recommended. This includes bulk loading large amounts of data into the table. Running <command>ANALYZE</command>(or <command>VACUUM ANALYZE</command>) ensures that the planner has up-to-date statistics about the table. With no statistics or obsolete statistics, the planner might make poor decisions during query planning, leading to poor performance on any tables with inaccurate or nonexistent statistics. Note that if the autovacuum daemon is enabled, it might run <command>ANALYZE</command>automatically; see <xref linkend=\"vacuum-for-statistics\">and <xref linkend=\"autovacuum\">for more information.</xref></xref></xref>"
msgstr ""

#: xml/perform.xml:1241(title)
msgid "Some Notes About <application>pg_dump</application>"
msgstr ""

#: xml/perform.xml:1243(para)
msgid "Dump scripts generated by <application>pg_dump</application>automatically apply several, but not all, of the above guidelines. To reload a <application>pg_dump</application>dump as quickly as possible, you need to do a few extra things manually. (Note that these points apply while <emphasis>restoring</emphasis>a dump, not while <emphasis>creating</emphasis>it. The same points apply whether loading a text dump with <application>psql</application>or using <application>pg_restore</application>to load from a <application>pg_dump</application>archive file.)"
msgstr ""

#: xml/perform.xml:1264(para)
msgid "Set appropriate (i.e., larger than normal) values for <varname>maintenance_work_mem</varname>and <varname>max_wal_size</varname>."
msgstr ""

#: xml/perform.xml:1270(para)
msgid "If using WAL archiving or streaming replication, consider disabling them during the restore. To do that, set <varname>archive_mode</varname>to <literal>off</literal>, <varname>wal_level</varname>to <literal>minimal</literal>, and <varname>max_wal_senders</varname>to zero before loading the dump. Afterwards, set them back to the right values and take a fresh base backup."
msgstr ""

#: xml/perform.xml:1282(para)
msgid "Experiment with the parallel dump and restore modes of both <application>pg_dump</application>and <application>pg_restore</application>and find the optimal number of concurrent jobs to use. Dumping and restoring in parallel by means of the <option>-j</option>option should give you a significantly higher performance over the serial mode."
msgstr ""

#: xml/perform.xml:1292(para)
msgid "Consider whether the whole dump should be restored as a single transaction. To do that, pass the <option>-1</option>or <option>--single-transaction</option>command-line option to <application>psql</application>or <application>pg_restore</application>. When using this mode, even the smallest of errors will rollback the entire restore, possibly discarding many hours of processing. Depending on how interrelated the data is, that might seem preferable to manual cleanup, or not. <command>COPY</command>commands will run fastest if you use a single transaction and have WAL archiving turned off."
msgstr ""

#: xml/perform.xml:1308(para)
msgid "If multiple CPUs are available in the database server, consider using <application>pg_restore</application>'s <option>--jobs</option>option. This allows concurrent data loading and index creation."
msgstr ""

#: xml/perform.xml:1315(para)
msgid "Run <command>ANALYZE</command>afterwards."
msgstr ""

#: xml/perform.xml:1255(para)
msgid "By default, <application>pg_dump</application>uses <command>COPY</command>, and when it is generating a complete schema-and-data dump, it is careful to load data before creating indexes and foreign keys. So in this case several guidelines are handled automatically. What is left for you to do is to: <placeholder-1/>"
msgstr ""

#: xml/perform.xml:1323(para)
msgid "You can get the effect of disabling foreign keys by using the <option>--disable-triggers</option>option but realize that that eliminates, rather than just postpones, foreign key validation, and so it is possible to insert bad data if you use it."
msgstr ""

#: xml/perform.xml:1319(para)
msgid "A data-only dump will still use <command>COPY</command>, but it does not drop or recreate indexes, and it does not normally touch foreign keys. <placeholder-1/>So when loading a data-only dump, it is up to you to drop and recreate indexes and foreign keys if you wish to use those techniques. It's still useful to increase <varname>max_wal_size</varname>while loading the data, but don't bother increasing <varname>maintenance_work_mem</varname>; rather, you'd do that while manually recreating indexes and foreign keys afterwards. And don't forget to <command>ANALYZE</command>when you're done; see <xref linkend=\"vacuum-for-statistics\">and <xref linkend=\"autovacuum\">for more information.</xref></xref>"
msgstr ""

#: xml/perform.xml:1344(title)
msgid "Non-Durable Settings"
msgstr ""

#: xml/perform.xml:1346(primary)
msgid "non-durable"
msgstr ""

#: xml/perform.xml:1361(para)
msgid "Place the database cluster's data directory in a memory-backed file system (i.e. <acronym>RAM</acronym>disk). This eliminates all database disk I/O, but limits data storage to the amount of available memory (and perhaps swap)."
msgstr ""

#: xml/perform.xml:1368(para)
msgid "Turn off <xref linkend=\"guc-fsync\">; there is no need to flush data to disk.</xref>"
msgstr ""

#: xml/perform.xml:1373(para)
msgid "Turn off <xref linkend=\"guc-synchronous-commit\">; there might be no need to force <acronym>WAL</acronym>writes to disk on every commit. This setting does risk transaction loss (though not data corruption) in case of a crash of the <emphasis>database</emphasis>.</xref>"
msgstr ""

#: xml/perform.xml:1382(para)
msgid "Turn off <xref linkend=\"guc-full-page-writes\">; there is no need to guard against partial page writes.</xref>"
msgstr ""

#: xml/perform.xml:1387(para)
msgid "Increase <xref linkend=\"guc-max-wal-size\">and <xref linkend=\"guc-checkpoint-timeout\">; this reduces the frequency of checkpoints, but increases the storage requirements of <filename>/pg_xlog</filename>.</xref></xref>"
msgstr ""

#: xml/perform.xml:1395(para)
msgid "Create <link linkend=\"SQL-CREATETABLE-UNLOGGED\">unlogged tables</link>to avoid <acronym>WAL</acronym>writes, though it makes the tables non-crash-safe."
msgstr ""

#: xml/perform.xml:1348(para)
msgid "Durability is a database feature that guarantees the recording of committed transactions even if the server crashes or loses power. However, durability adds significant database overhead, so if your site does not require such a guarantee, <productname>PostgreSQL</productname>can be configured to run much faster. The following are configuration changes you can make to improve performance in such cases. Except as noted below, durability is still guaranteed in case of a crash of the database software; only abrupt operating system stoppage creates a risk of data loss or corruption when these settings are used. <placeholder-1/>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/perform.xml:0(None)
msgid "translator-credits"
msgstr ""

