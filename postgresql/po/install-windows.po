msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/install-windows.xml:3(title)
msgid "Installation from Source Code on <productname>Windows</productname>"
msgstr ""

#: xml/install-windows.xml:6(primary)
msgid "installation"
msgstr ""

#: xml/install-windows.xml:7(secondary)
msgid "on Windows"
msgstr ""

#: xml/install-windows.xml:9(para)
msgid "It is recommended that most users download the binary distribution for Windows, available as a graphical installer package from the <productname>PostgreSQL</productname>website. Building from source is only intended for people developing <productname>PostgreSQL</productname>or extensions."
msgstr ""

#: xml/install-windows.xml:15(para)
msgid "There are several different ways of building PostgreSQL on <productname>Windows</productname>. The simplest way to build with Microsoft tools is to install <productname>Visual Studio Express 2013 for Windows Desktop</productname>and use the included compiler. It is also possible to build with the full <productname>Microsoft Visual C++ 2005 to 2013</productname>. In some cases that requires the installation of the <productname>Windows SDK</productname>in addition to the compiler."
msgstr ""

#: xml/install-windows.xml:25(para)
msgid "It is also possible to build PostgreSQL using the GNU compiler tools provided by <productname>MinGW</productname>, or using <productname>Cygwin</productname>for older versions of <productname>Windows</productname>."
msgstr ""

#: xml/install-windows.xml:30(para)
msgid "Finally, the client access library ( <application>libpq</application>) can be built using <productname>Visual C++ 7.1</productname>or <productname>Borland C++</productname>for compatibility with statically linked applications built using these tools."
msgstr ""

#: xml/install-windows.xml:35(para)
msgid "Building using <productname>MinGW</productname>or <productname>Cygwin</productname>uses the normal build system, see <xref linkend=\"installation\">and the specific notes in <xref linkend=\"installation-notes-mingw\">and <xref linkend=\"installation-notes-cygwin\">. To produce native 64 bit binaries in these environments, use the tools from <productname>MinGW-w64</productname>. These tools can also be used to cross-compile for 32 bit and 64 bit <productname>Windows</productname>targets on other hosts, such as <productname>Linux</productname>and <productname>Darwin</productname>. <productname>Cygwin</productname>is not recommended for running a production server, and it should only be used for running on older versions of <productname>Windows</productname>where the native build does not work, such as <productname>Windows 98</productname>. The official binaries are built using <productname>Visual Studio</productname>.</xref></xref></xref>"
msgstr ""

#: xml/install-windows.xml:58(para)
msgid "Native builds of <application>psql</application>don't support command line editing. The <productname>Cygwin</productname>build does support command line editing, so it should be used where psql is needed for interactive use on <productname>Windows</productname>."
msgstr ""

#: xml/install-windows.xml:66(title)
msgid "Building with <productname>Visual C++</productname>or the <productname>Microsoft Windows SDK</productname>"
msgstr ""

#: xml/install-windows.xml:69(para)
msgid "PostgreSQL can be built using the Visual C++ compiler suite from Microsoft. These compilers can be either from <productname>Visual Studio</productname>, <productname>Visual Studio Express</productname>or some versions of the <productname>Microsoft Windows SDK</productname>. If you do not already have a <productname>Visual Studio</productname>environment set up, the easiest ways are to use the compilers from <productname>Visual Studio Express 2013 for Windows Desktop</productname>or those in the <productname>Windows SDK 7.1</productname>, which are both free downloads from Microsoft."
msgstr ""

#: xml/install-windows.xml:82(para)
msgid "PostgreSQL is known to support compilation using the compilers shipped with <productname>Visual Studio 2005</productname>to <productname>Visual Studio 2013</productname>(including Express editions), as well as standalone Windows SDK releases 6.0 to 7.1. 64-bit PostgreSQL builds are only supported with <productname>Microsoft Windows SDK</productname>version 6.0a to 7.1 or <productname>Visual Studio 2008</productname>and above."
msgstr ""

#: xml/install-windows.xml:91(para)
msgid "The tools for building using <productname>Visual C++</productname>or <productname>Platform SDK</productname>are in the <filename>src/tools/msvc</filename>directory. When building, make sure there are no tools from <productname>MinGW</productname>or <productname>Cygwin</productname>present in your system PATH. Also, make sure you have all the required Visual C++ tools available in the PATH. In <productname>Visual Studio</productname>, start the <application>Visual Studio Command Prompt</application>. If you wish to build a 64-bit version, you must use the 64-bit version of the command, and vice versa. In the <productname>Microsoft Windows SDK</productname>, start the <application>CMD shell</application>listed under the SDK on the Start Menu. In recent SDK versions you can change the targeted CPU architecture, build type, and target OS by using the <command>setenv</command>command, e.g. <command>setenv /x86 /release /xp</command>to target Windows XP or later with a 32-bit release build. See <command>/?</command>for other options to <command>setenv</command>. All commands should be run from the <filename>src\\tools\\msvc</filename>directory."
msgstr ""

#: xml/install-windows.xml:126(programlisting)
#, no-wrap
msgid "$config-&gt;{python} =\n    'c:\\python26';"
msgstr ""

#: xml/install-windows.xml:114(para)
msgid "Before you build, you may need to edit the file <filename>config.pl</filename>to reflect any configuration options you want to change, or the paths to any third party libraries to use. The complete configuration is determined by first reading and parsing the file <filename>config_default.pl</filename>, and then apply any changes from <filename>config.pl</filename>. For example, to specify the location of your <productname>Python</productname>installation, put the following in <filename>config.pl</filename>: <placeholder-1/>You only need to specify those parameters that are different from what's in <filename>config_default.pl</filename>."
msgstr ""

#: xml/install-windows.xml:135(programlisting)
#, no-wrap
msgid "$ENV{PATH}=$ENV{PATH} .\n    ';c:\\some\\where\\bison\\bin';"
msgstr ""

#: xml/install-windows.xml:130(para)
msgid "If you need to set any other environment variables, create a file called <filename>buildenv.pl</filename>and put the required commands there. For example, to add the path for bison when it's not in the PATH, create a file containing: <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:138(title)
msgid "Requirements"
msgstr ""

#: xml/install-windows.xml:147(productname)
msgid "Microsoft Windows SDK"
msgstr ""

#: xml/install-windows.xml:150(para)
msgid "If your build environment doesn't ship with a supported version of the <productname>Microsoft Windows SDK</productname>it is recommended that you upgrade to the latest version (currently version 7.1), available for download from <placeholder-1/>."
msgstr ""

#: xml/install-windows.xml:157(para)
msgid "You must always include the <application>Windows Headers and Libraries</application>part of the SDK. If you install a <productname>Windows SDK</productname>including the <application>Visual C++ Compilers</application>, you don't need <productname>Visual Studio</productname>to build. Note that as of Version 8.0a the Windows SDK no longer ships with a complete command-line build environment."
msgstr ""

#: xml/install-windows.xml:171(productname)
msgid "ActiveState Perl"
msgstr ""

#: xml/install-windows.xml:174(para)
msgid "ActiveState Perl is required to run the build generation scripts. MinGW or Cygwin Perl will not work. It must also be present in the PATH. Binaries can be downloaded from <ulink url=\"http://www.activestate.com\"/>(Note: version 5.8 or later is required, the free Standard Distribution is sufficient)."
msgstr ""

#: xml/install-windows.xml:139(para)
msgid "The following additional products are required to build <productname>PostgreSQL</productname>. Use the <filename>config.pl</filename>file to specify which directories the libraries are available in. <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:192(productname)
msgid "ActiveState TCL"
msgstr ""

#: xml/install-windows.xml:195(para)
msgid "Required for building <application>PL/TCL</application>(Note: version 8.4 is required, the free Standard Distribution is sufficient)."
msgstr ""

#: xml/install-windows.xml:202(term)
msgid "<productname>Bison</productname>and <productname>Flex</productname>"
msgstr ""

#: xml/install-windows.xml:206(para)
msgid "<productname>Bison</productname>and <productname>Flex</productname>are required to build from Git, but not required when building from a release file. Only <productname>Bison</productname>1.875 or versions 2.2 and later will work. <productname>Flex</productname>must be version 2.5.31 or later."
msgstr ""

#: xml/install-windows.xml:215(para)
msgid "Both <productname>Bison</productname>and <productname>Flex</productname>are included in the <productname>msys</productname>tool suite, available from <ulink url=\"http://www.mingw.org/wiki/MSYS\"/>as part of the <productname>MinGW</productname>compiler suite. You can also get <productname>msys</productname>as part of <productname>msysGit</productname>from <ulink url=\"http://git-scm.com/\"/>."
msgstr ""

#: xml/install-windows.xml:227(para)
msgid "You will need to add the directory containing <filename>flex.exe</filename>and <filename>bison.exe</filename>to the PATH environment variable in <filename>buildenv.pl</filename>unless they are already in PATH. In the case of MinGW, the directory is the <filename>\\msys\\1.0\\bin</filename>subdirectory of your MinGW installation directory. For msysGit, it's the <filename>bin</filename>directory in your Git install directory. Do not add the MinGW compiler tools themselves to PATH."
msgstr ""

#: xml/install-windows.xml:239(para)
msgid "The Bison distribution from GnuWin32 appears to have a bug that causes Bison to malfunction when installed in a directory with spaces in the name, such as the default location on English installations <filename>C:\\Program Files\\GnuWin32</filename>. Consider installing into <filename>C:\\GnuWin32</filename>or use the NTFS short name path to GnuWin32 in your PATH environment setting (e.g. <filename>C:\\PROGRA~1\\GnuWin32</filename>)."
msgstr ""

#: xml/install-windows.xml:252(para)
msgid "The obsolete \"winflex\" binaries distributed on the PostgreSQL FTP site and referenced in older documentation will fail with \"flex: fatal internal error, exec failed\" on 64-bit Windows hosts. Use flex from msys instead."
msgstr ""

#: xml/install-windows.xml:262(productname)
msgid "Diff"
msgstr ""

#: xml/install-windows.xml:265(para)
msgid "Diff is required to run the regression tests, and can be downloaded from <placeholder-1/>."
msgstr ""

#: xml/install-windows.xml:273(productname)
msgid "Gettext"
msgstr ""

#: xml/install-windows.xml:276(para)
msgid "Gettext is required to build with NLS support, and can be downloaded from <ulink url=\"http://gnuwin32.sourceforge.net\"/>. Note that binaries, dependencies and developer files are all needed."
msgstr ""

#: xml/install-windows.xml:285(productname)
msgid "MIT Kerberos"
msgstr ""

#: xml/install-windows.xml:288(para)
msgid "Required for GSSAPI authentication support. MIT Kerberos can be downloaded from <placeholder-1/>."
msgstr ""

#: xml/install-windows.xml:295(term)
msgid "<productname>libxml2</productname>and <productname>libxslt</productname>"
msgstr ""

#: xml/install-windows.xml:299(para)
msgid "Required for XML support. Binaries can be downloaded from <ulink url=\"http://zlatkovic.com/pub/libxml\"/>or source from <ulink url=\"http://xmlsoft.org\"/>. Note that libxml2 requires iconv, which is available from the same download location."
msgstr ""

#: xml/install-windows.xml:310(productname)
msgid "openssl"
msgstr ""

#: xml/install-windows.xml:313(para)
msgid "Required for SSL support. Binaries can be downloaded from <placeholder-1/>or source from <ulink url=\"http://www.openssl.org\"/>."
msgstr ""

#: xml/install-windows.xml:322(productname)
msgid "ossp-uuid"
msgstr ""

#: xml/install-windows.xml:325(para)
msgid "Required for UUID-OSSP support (contrib only). Source can be downloaded from <placeholder-1/>."
msgstr ""

#: xml/install-windows.xml:333(productname)
msgid "Python"
msgstr ""

#: xml/install-windows.xml:336(para)
msgid "Required for building <application>PL/Python</application>. Binaries can be downloaded from <ulink url=\"http://www.python.org\"/>."
msgstr ""

#: xml/install-windows.xml:344(productname)
msgid "zlib"
msgstr ""

#: xml/install-windows.xml:347(para)
msgid "Required for compression support in <application>pg_dump</application>and <application>pg_restore</application>. Binaries can be downloaded from <ulink url=\"http://www.zlib.net\"/>."
msgstr ""

#: xml/install-windows.xml:184(para)
msgid "The following additional products are not required to get started, but are required to build the complete package. Use the <filename>config.pl</filename>file to specify which directories the libraries are available in. <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:357(title)
msgid "Special Considerations for 64-bit Windows"
msgstr ""

#: xml/install-windows.xml:358(para)
msgid "PostgreSQL will only build for the x64 architecture on 64-bit Windows, there is no support for Itanium processors."
msgstr ""

#: xml/install-windows.xml:361(para)
msgid "Mixing 32- and 64-bit versions in the same build tree is not supported. The build system will automatically detect if it's running in a 32- or 64-bit environment, and build PostgreSQL accordingly. For this reason, it is important to start the correct command prompt before building."
msgstr ""

#: xml/install-windows.xml:366(para)
msgid "To use a server-side third party library such as <productname>python</productname>or <productname>openssl</productname>, this library <emphasis>must</emphasis>also be 64-bit. There is no support for loading a 32-bit library in a 64-bit server. Several of the third party libraries that PostgreSQL supports may only be available in 32-bit versions, in which case they cannot be used with 64-bit PostgreSQL."
msgstr ""

#: xml/install-windows.xml:376(title)
msgid "Building"
msgstr ""

#: xml/install-windows.xml:393(programlisting)
#, no-wrap
msgid "$ENV{CONFIG}=\"Debug\";"
msgstr ""

#: xml/install-windows.xml:377(para)
msgid "To build all of PostgreSQL in release configuration (the default), run the command: <screen>\n        <userinput>build</userinput>\n      </screen>To build all of PostgreSQL in debug configuration, run the command: <screen>\n        <userinput>build DEBUG</userinput>\n      </screen>To build just a single project, for example psql, run the commands: <screen>\n        <userinput>build psql</userinput>\n        <userinput>build DEBUG psql</userinput>\n      </screen>To change the default build configuration to debug, put the following in the <filename>buildenv.pl</filename>file: <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:394(para)
msgid "It is also possible to build from inside the Visual Studio GUI. In this case, you need to run: <screen>\n        <userinput>perl mkvcbuild.pl</userinput>\n      </screen>from the command prompt, and then open the generated <filename>pgsql.sln</filename>(in the root directory of the source tree) in Visual Studio."
msgstr ""

#: xml/install-windows.xml:404(title)
msgid "Cleaning and Installing"
msgstr ""

#: xml/install-windows.xml:405(para)
msgid "Most of the time, the automatic dependency tracking in Visual Studio will handle changed files. But if there have been large changes, you may need to clean the installation. To do this, simply run the <filename>clean.bat</filename>command, which will automatically clean out all generated files. You can also run it with the <parameter>dist</parameter>parameter, in which case it will behave like <userinput>make distclean</userinput>and remove the flex/bison output files as well."
msgstr ""

#: xml/install-windows.xml:416(para)
msgid "By default, all files are written into a subdirectory of the <filename>debug</filename>or <filename>release</filename>directories. To install these files using the standard layout, and also generate the files required to initialize and use the database, run the command: <screen>\n        <userinput>install c:\\destination\\directory</userinput>\n      </screen>"
msgstr ""

#: xml/install-windows.xml:426(para)
msgid "If you want to install only the client applications and interface libraries, then you can use these commands: <screen>\n        <userinput>install c:\\destination\\directory\n        client</userinput>\n      </screen>"
msgstr ""

#: xml/install-windows.xml:434(title)
msgid "Running the Regression Tests"
msgstr ""

#: xml/install-windows.xml:435(para)
msgid "To run the regression tests, make sure you have completed the build of all required parts first. Also, make sure that the DLLs required to load all parts of the system (such as the Perl and Python DLLs for the procedural languages) are present in the system path. If they are not, set it through the <filename>buildenv.pl</filename>file. To run the tests, run one of the following commands from the <filename>src\\tools\\msvc</filename>directory: <screen>\n        <userinput>vcregress check</userinput>\n        <userinput>vcregress installcheck</userinput>\n        <userinput>vcregress plcheck</userinput>\n        <userinput>vcregress contribcheck</userinput>\n        <userinput>vcregress modulescheck</userinput>\n        <userinput>vcregress ecpgcheck</userinput>\n        <userinput>vcregress isolationcheck</userinput>\n        <userinput>vcregress bincheck</userinput>\n        <userinput>vcregress upgradecheck</userinput>\n      </screen>To change the schedule used (default is parallel), append it to the command line like: <screen>\n        <userinput>vcregress check serial</userinput>\n      </screen>For more information about the regression tests, see <xref linkend=\"regress\">.</xref>"
msgstr ""

#: xml/install-windows.xml:467(productname)
msgid "IPC::Run"
msgstr ""

#: xml/install-windows.xml:483(programlisting)
#, no-wrap
msgid "$ENV{PERL5LIB}=$ENV{PERL5LIB} .\n            ';c:\\IPC-Run-0.94\\lib';"
msgstr ""

#: xml/install-windows.xml:470(para)
msgid "As of this writing, <literal>IPC::Run</literal>is not included in the ActiveState Perl installation, nor in the ActiveState Perl Package Manager (PPM) library. To install, download the <filename>IPC-Run-version.tar.gz</filename>source archive from CPAN, at <placeholder-1/>, and uncompress. Edit the <filename>buildenv.pl</filename>file, and add a PERL5LIB variable to point to the <filename>lib</filename>subdirectory from the extracted archive. For example: <placeholder-2/>"
msgstr ""

#: xml/install-windows.xml:461(para)
msgid "Running the regression tests on client programs, with \"vcregress bincheck\", requires an additional Perl module to be installed: <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:490(title)
msgid "Building the Documentation"
msgstr ""

#: xml/install-windows.xml:497(term)
msgid "OpenJade 1.3.1-2"
msgstr ""

#: xml/install-windows.xml:499(para)
msgid "Download from <placeholder-1/>and uncompress in the subdirectory <filename>openjade-1.3.1</filename>."
msgstr ""

#: xml/install-windows.xml:506(term)
msgid "DocBook DTD 4.2"
msgstr ""

#: xml/install-windows.xml:508(para) xml/install-windows.xml:526(para)
msgid "Download from <placeholder-1/>and uncompress in the subdirectory <filename>docbook</filename>."
msgstr ""

#: xml/install-windows.xml:515(term)
msgid "DocBook DSSSL 1.79"
msgstr ""

#: xml/install-windows.xml:517(para)
msgid "Download from <placeholder-1/>and uncompress in the subdirectory <filename>docbook-dsssl-1.79</filename>."
msgstr ""

#: xml/install-windows.xml:524(term)
msgid "ISO character entities"
msgstr ""

#: xml/install-windows.xml:535(programlisting)
#, no-wrap
msgid "\n      $ENV{DOCROOT}='c:\\docbook';"
msgstr ""

#: xml/install-windows.xml:491(para)
msgid "Building the PostgreSQL documentation in HTML format requires several tools and files. Create a root directory for all these files, and store them in the subdirectories in the list below. <placeholder-1/>Edit the <filename>buildenv.pl</filename>file, and add a variable for the location of the root directory, for example: <placeholder-2/>To build the documentation, run the command <filename>builddoc.bat</filename>. Note that this will actually run the build twice, in order to generate the indexes. The generated HTML files will be in <filename>doc\\src\\sgml</filename>."
msgstr ""

#: xml/install-windows.xml:545(title)
msgid "Building <application>libpq</application>with <productname>Visual C++</productname>or <productname>Borland C++</productname>"
msgstr ""

#: xml/install-windows.xml:549(para)
msgid "Using <productname>Visual C++ 7.1-9.0</productname>or <productname>Borland C++</productname>to build libpq is only recommended if you need a version with different debug/release flags, or if you need a static library to link into an application. For normal use the <productname>MinGW</productname>or <productname>Visual Studio</productname>or <productname>Windows SDK</productname>method is recommended."
msgstr ""

#: xml/install-windows.xml:559(para)
msgid "To build the <application>libpq</application>client library using <productname>Visual Studio 7.1 or later</productname>, change into the <filename>src</filename>directory and type the command: <screen>\n      <userinput>nmake /f win32.mak</userinput>\n    </screen>"
msgstr ""

#: xml/install-windows.xml:567(para)
msgid "To build a 64-bit version of the <application>libpq</application>client library using <productname>Visual Studio 8.0 or later</productname>, change into the <filename>src</filename>directory and type in the command: <screen>\n      <userinput>nmake /f win32.mak CPU=AMD64</userinput>\n    </screen>See the <filename>win32.mak</filename>file for further details about supported variables."
msgstr ""

#: xml/install-windows.xml:577(para)
msgid "To build the <application>libpq</application>client library using <productname>Borland C++</productname>, change into the <filename>src</filename>directory and type the command: <screen>\n      <userinput>make -N -DCFG=Release /f bcc32.mak</userinput>\n    </screen>"
msgstr ""

#: xml/install-windows.xml:585(title)
msgid "Generated Files"
msgstr ""

#: xml/install-windows.xml:590(filename)
msgid "interfaces\\libpq\\Release\\libpq.dll"
msgstr ""

#: xml/install-windows.xml:593(para)
msgid "The dynamically linkable frontend library"
msgstr ""

#: xml/install-windows.xml:598(filename)
msgid "interfaces\\libpq\\Release\\libpqdll.lib"
msgstr ""

#: xml/install-windows.xml:602(para)
msgid "Import library to link your programs to <filename>libpq.dll</filename>"
msgstr ""

#: xml/install-windows.xml:608(filename)
msgid "interfaces\\libpq\\Release\\libpq.lib"
msgstr ""

#: xml/install-windows.xml:611(para)
msgid "Static version of the frontend library"
msgstr ""

#: xml/install-windows.xml:586(para)
msgid "The following files will be built: <placeholder-1/>"
msgstr ""

#: xml/install-windows.xml:615(para)
msgid "Normally you do not need to install any of the client files. You should place the <filename>libpq.dll</filename>file in the same directory as your applications executable file. Do not install <filename>libpq.dll</filename>into your <filename>Windows</filename>, <filename>System</filename>or <filename>System32</filename>directory unless absolutely necessary. If this file is installed using a setup program, then it should be installed with version checking using the <symbol>VERSIONINFO</symbol>resource included in the file, to ensure that a newer version of the library is not overwritten."
msgstr ""

#: xml/install-windows.xml:628(para)
msgid "If you are planning to do development using <application>libpq</application>on this machine, you will have to add the <filename>src\\include</filename>and <filename>src\\interfaces\\libpq</filename>subdirectories of the source tree to the include path in your compiler's settings."
msgstr ""

#: xml/install-windows.xml:635(para)
msgid "To use the library, you must add the <filename>libpqdll.lib</filename>file to your project. (In Visual C++, just right-click on the project and choose to add it.)"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/install-windows.xml:0(None)
msgid "translator-credits"
msgstr ""

