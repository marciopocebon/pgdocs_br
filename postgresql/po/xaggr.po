msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/xaggr.xml:3(title)
msgid "User-defined Aggregates"
msgstr ""

#: xml/xaggr.xml:5(primary) xml/xaggr.xml:114(primary) xml/xaggr.xml:217(primary) xml/xaggr.xml:221(primary) xml/xaggr.xml:329(primary) xml/xaggr.xml:406(primary)
msgid "aggregate function"
msgstr ""

#: xml/xaggr.xml:6(secondary)
msgid "user-defined"
msgstr ""

#: xml/xaggr.xml:8(para)
msgid "Aggregate functions in <productname>PostgreSQL</productname>are defined in terms of <firstterm>state values</firstterm>and <firstterm>state transition functions</firstterm>. That is, an aggregate operates using a state value that is updated as each successive input row is processed. To define a new aggregate function, one selects a data type for the state value, an initial value for the state, and a state transition function. The state transition function takes the previous state value and the aggregate's input value(s) for the current row, and returns a new state value. A <firstterm>final function</firstterm>can also be specified, in case the desired result of the aggregate is different from the data that needs to be kept in the running state value. The final function takes the last state value and returns whatever is wanted as the aggregate result. In principle, the transition and final functions are just ordinary functions that could also be used outside the context of the aggregate. (In practice, it's often helpful for performance reasons to create specialized transition functions that can only work when called as part of an aggregate.)"
msgstr ""

#: xml/xaggr.xml:29(para)
msgid "Thus, in addition to the argument and result data types seen by a user of the aggregate, there is an internal state-value data type that might be different from both the argument and result types."
msgstr ""

#: xml/xaggr.xml:43(programlisting)
#, no-wrap
msgid "CREATE AGGREGATE sum (complex) ( sfunc =\n  complex_add, stype = complex, initcond = '(0,0)'\n  );"
msgstr ""

#: xml/xaggr.xml:46(programlisting)
#, no-wrap
msgid "SELECT sum(a) FROM test_complex; sum -----------\n  (34,53.9)"
msgstr ""

#: xml/xaggr.xml:33(para)
msgid "If we define an aggregate that does not use a final function, we have an aggregate that computes a running function of the column values from each row. <function>sum</function>is an example of this kind of aggregate. <function>sum</function>starts at zero and always adds the current row's value to its running total. For example, if we want to make a <function>sum</function>aggregate to work on a data type for complex numbers, we only need the addition function for that data type. The aggregate definition would be: <placeholder-1/>which we might use like this: <placeholder-2/>(Notice that we are relying on function overloading: there is more than one aggregate named <function>sum</function>, but <productname>PostgreSQL</productname>can figure out which kind of sum applies to a column of type <type>complex</type>.)"
msgstr ""

#: xml/xaggr.xml:53(para)
msgid "The above definition of <function>sum</function>will return zero (the initial state value) if there are no nonnull input values. Perhaps we want to return null in that case instead the SQL standard expects <function>sum</function>to behave that way. We can do this simply by omitting the <literal>initcond</literal>phrase, so that the initial state value is null. Ordinarily this would mean that the <literal>sfunc</literal>would need to check for a null state-value input. But for <function>sum</function>and some other simple aggregates like <function>max</function>and <function>min</function>, it is sufficient to insert the first nonnull input value into the state variable and then start applying the transition function at the second nonnull input value. <productname>PostgreSQL</productname>will do that automatically if the initial state value is null and the transition function is marked <quote>strict</quote>(i.e., not to be called for null inputs)."
msgstr ""

#: xml/xaggr.xml:74(para)
msgid "Another bit of default behavior for a <quote>strict</quote>transition function is that the previous state value is retained unchanged whenever a null input value is encountered. Thus, null values are ignored. If you need some other behavior for null inputs, do not declare your transition function as strict; instead code it to test for null inputs and do whatever is needed."
msgstr ""

#: xml/xaggr.xml:89(programlisting)
#, no-wrap
msgid "CREATE AGGREGATE avg (float8) ( sfunc =\n  float8_accum, stype = float8[], finalfunc = float8_avg, initcond\n  = '{0,0,0}' );"
msgstr ""

#: xml/xaggr.xml:81(para)
msgid "<function>avg</function>(average) is a more complex example of an aggregate. It requires two pieces of running state: the sum of the inputs and the count of the number of inputs. The final result is obtained by dividing these quantities. Average is typically implemented by using an array as the state value. For example, the built-in implementation of <function>avg(float8)</function>looks like: <placeholder-1/>"
msgstr ""

#: xml/xaggr.xml:93(para)
msgid "<function>float8_accum</function>requires a three-element array, not just two elements, because it accumulates the sum of squares as well as the sum and count of the inputs. This is so that it can be used for some other aggregates as well as <function>avg</function>."
msgstr ""

#: xml/xaggr.xml:100(para)
msgid "Aggregate function calls in SQL allow <literal>DISTINCT</literal>and <literal>ORDER BY</literal>options that control which rows are fed to the aggregate's transition function and in what order. These options are implemented behind the scenes and are not the concern of the aggregate's support functions."
msgstr ""

#: xml/xaggr.xml:106(para)
msgid "For further details see the <xref linkend=\"sql-createaggregate\">command.</xref>"
msgstr ""

#: xml/xaggr.xml:109(title)
msgid "Moving-Aggregate Mode"
msgstr ""

#: xml/xaggr.xml:111(primary)
msgid "moving-aggregate mode"
msgstr ""

#: xml/xaggr.xml:115(secondary)
msgid "moving aggregate"
msgstr ""

#: xml/xaggr.xml:117(para)
msgid "Aggregate functions can optionally support <firstterm>moving-aggregate mode</firstterm>, which allows substantially faster execution of aggregate functions within windows with moving frame starting points. (See <xref linkend=\"tutorial-window\">and <xref linkend=\"syntax-window-functions\">for information about use of aggregate functions as window functions.) The basic idea is that in addition to a normal <quote>forward</quote>transition function, the aggregate provides an <firstterm>inverse transition function</firstterm>, which allows rows to be removed from the aggregate's running state value when they exit the window frame. For example a <function>sum</function>aggregate, which uses addition as the forward transition function, would use subtraction as the inverse transition function. Without an inverse transition function, the window function mechanism must recalculate the aggregate from scratch each time the frame starting point moves, resulting in run time proportional to the number of input rows times the average frame length. With an inverse transition function, the run time is only proportional to the number of input rows.</xref></xref>"
msgstr ""

#: xml/xaggr.xml:139(para)
msgid "The inverse transition function is passed the current state value and the aggregate input value(s) for the earliest row included in the current state. It must reconstruct what the state value would have been if the given input row had never been aggregated, but only the rows following it. This sometimes requires that the forward transition function keep more state than is needed for plain aggregation mode. Therefore, the moving-aggregate mode uses a completely separate implementation from the plain mode: it has its own state data type, its own forward transition function, and its own final function if needed. These can be the same as the plain mode's data type and functions, if there is no need for extra state."
msgstr ""

#: xml/xaggr.xml:154(programlisting)
#, no-wrap
msgid "CREATE AGGREGATE sum (complex) ( sfunc =\n    complex_add, stype = complex, initcond = '(0,0)', msfunc =\n    complex_add, minvfunc = complex_sub, mstype = complex,\n    minitcond = '(0,0)' );"
msgstr ""

#: xml/xaggr.xml:151(para)
msgid "As an example, we could extend the <function>sum</function>aggregate given above to support moving-aggregate mode like this: <placeholder-1/>The parameters whose names begin with <literal>m</literal>define the moving-aggregate implementation. Except for the inverse transition function <literal>minvfunc</literal>, they correspond to the plain-aggregate parameters without <literal>m</literal>."
msgstr ""

#: xml/xaggr.xml:164(para)
msgid "The forward transition function for moving-aggregate mode is not allowed to return null as the new state value. If the inverse transition function returns null, this is taken as an indication that the inverse function cannot reverse the state calculation for this particular input, and so the aggregate calculation will be redone from scratch for the current frame starting position. This convention allows moving-aggregate mode to be used in situations where there are some infrequent cases that are impractical to reverse out of the running state value. The inverse transition function can <quote>punt</quote>on these cases, and yet still come out ahead so long as it can work for most cases. As an example, an aggregate working with floating-point numbers might choose to punt when a <literal>NaN</literal>(not a number) input has to be removed from the running state value."
msgstr ""

#: xml/xaggr.xml:192(programlisting)
#, no-wrap
msgid "CREATE AGGREGATE unsafe_sum (float8) ( stype =\n    float8, sfunc = float8pl, mstype = float8, msfunc = float8pl,\n    minvfunc = float8mi );"
msgstr ""

#: xml/xaggr.xml:197(programlisting)
#, no-wrap
msgid "SELECT unsafe_sum(x) OVER (ORDER BY n ROWS\n    BETWEEN CURRENT ROW AND 1 FOLLOWING) FROM (VALUES (1,\n    1.0e20::float8), (2, 1.0::float8)) AS v\n    (n,x);"
msgstr ""

#: xml/xaggr.xml:180(para)
msgid "When writing moving-aggregate support functions, it is important to be sure that the inverse transition function can reconstruct the correct state value exactly. Otherwise there might be user-visible differences in results depending on whether the moving-aggregate mode is used. An example of an aggregate for which adding an inverse transition function seems easy at first, yet where this requirement cannot be met is <function>sum</function>over <type>float4</type>or <type>float8</type>inputs. A naive declaration of <function>sum( <type>float8</type>)</function>could be <placeholder-1/>This aggregate, however, can give wildly different results than it would have without the inverse transition function. For example, consider <placeholder-2/>This query returns <literal>0</literal>as its second result, rather than the expected answer of <literal>1</literal>. The cause is the limited precision of floating-point values: adding <literal>1</literal>to <literal>1e20</literal>results in <literal>1e20</literal>again, and so subtracting <literal>1e20</literal>from that yields <literal>0</literal>, not <literal>1</literal>. Note that this is a limitation of floating-point arithmetic in general, not a limitation of <productname>PostgreSQL</productname>."
msgstr ""

#: xml/xaggr.xml:215(title)
msgid "Polymorphic and Variadic Aggregates"
msgstr ""

#: xml/xaggr.xml:218(secondary)
msgid "polymorphic"
msgstr ""

#: xml/xaggr.xml:222(secondary)
msgid "variadic"
msgstr ""

#: xml/xaggr.xml:233(programlisting)
#, no-wrap
msgid "CREATE AGGREGATE array_accum (anyelement) (\n    sfunc = array_append, stype = anyarray, initcond = '{}'\n    );"
msgstr ""

#: xml/xaggr.xml:224(para)
msgid "Aggregate functions can use polymorphic state transition functions or final functions, so that the same functions can be used to implement multiple aggregates. See <xref linkend=\"extend-types-polymorphic\">for an explanation of polymorphic functions. Going a step further, the aggregate function itself can be specified with polymorphic input type(s) and state type, allowing a single aggregate definition to serve for multiple input data types. Here is an example of a polymorphic aggregate: <placeholder-1/>Here, the actual state type for any given aggregate call is the array type having the actual input type as elements. The behavior of the aggregate is to concatenate all the inputs into an array of that type. (Note: the built-in aggregate <function>array_agg</function>provides similar functionality, with better performance than this definition would have.)</xref>"
msgstr ""

#: xml/xaggr.xml:245(programlisting)
#, no-wrap
msgid "SELECT attrelid::regclass, array_accum(attname)\n    FROM pg_attribute WHERE attnum 0 AND attrelid =\n    'pg_tablespace'::regclass GROUP BY attrelid; attrelid |\n    array_accum\n    ---------------+---------------------------------------\n    pg_tablespace | {spcname,spcowner,spcacl,spcoptions} (1 row)\n    SELECT attrelid::regclass, array_accum(atttypid::regtype) FROM\n    pg_attribute WHERE attnum 0 AND attrelid =\n    'pg_tablespace'::regclass GROUP BY attrelid; attrelid |\n    array_accum ---------------+---------------------------\n    pg_tablespace | {name,oid,aclitem[],text[]} (1\n    row)"
msgstr ""

#: xml/xaggr.xml:243(para)
msgid "Here's the output using two different actual data types as arguments: <placeholder-1/>"
msgstr ""

#: xml/xaggr.xml:280(programlisting)
#, no-wrap
msgid "CREATE FUNCTION array_agg_transfn(internal,\n    anynonarray) RETURNS internal ...; CREATE FUNCTION\n    array_agg_finalfn(internal, anynonarray) RETURNS anyarray ...;\n    CREATE AGGREGATE array_agg (anynonarray) ( sfunc =\n    array_agg_transfn, stype = internal, finalfunc =\n    array_agg_finalfn, finalfunc_extra );"
msgstr ""

#: xml/xaggr.xml:257(para)
msgid "Ordinarily, an aggregate function with a polymorphic result type has a polymorphic state type, as in the above example. This is necessary because otherwise the final function cannot be declared sensibly: it would need to have a polymorphic result type but no polymorphic argument type, which <command>CREATE FUNCTION</command>will reject on the grounds that the result type cannot be deduced from a call. But sometimes it is inconvenient to use a polymorphic state type. The most common case is where the aggregate support functions are to be written in C and the state type should be declared as <type>internal</type>because there is no SQL-level equivalent for it. To address this case, it is possible to declare the final function as taking extra <quote>dummy</quote>arguments that match the input arguments of the aggregate. Such dummy arguments are always passed as null values since no specific value is available when the final function is called. Their only use is to allow a polymorphic final function's result type to be connected to the aggregate's input type(s). For example, the definition of the built-in aggregate <function>array_agg</function>is equivalent to <placeholder-1/>Here, the <literal>finalfunc_extra</literal>option specifies that the final function receives, in addition to the state value, extra dummy argument(s) corresponding to the aggregate's input argument(s). The extra <type>anynonarray</type>argument allows the declaration of <function>array_agg_finalfn</function>to be valid."
msgstr ""

#: xml/xaggr.xml:293(para)
msgid "An aggregate function can be made to accept a varying number of arguments by declaring its last argument as a <literal>VARIADIC</literal>array, in much the same fashion as for regular functions; see <xref linkend=\"xfunc-sql-variadic-functions\">. The aggregate's transition function(s) must have the same array type as their last argument. The transition function(s) typically would also be marked <literal>VARIADIC</literal>, but this is not strictly required.</xref>"
msgstr ""

#: xml/xaggr.xml:313(programlisting)
#, no-wrap
msgid "SELECT myaggregate(a ORDER BY a, b, c) FROM\n      ..."
msgstr ""

#: xml/xaggr.xml:317(programlisting)
#, no-wrap
msgid "SELECT myaggregate(a, b, c ORDER BY a) FROM\n      ..."
msgstr ""

#: xml/xaggr.xml:304(para)
msgid "Variadic aggregates are easily misused in connection with the <literal>ORDER BY</literal>option (see <xref linkend=\"syntax-aggregates\">), since the parser cannot tell whether the wrong number of actual arguments have been given in such a combination. Keep in mind that everything to the right of <literal>ORDER BY</literal>is a sort key, not an argument to the aggregate. For example, in <placeholder-1/>the parser will see this as a single aggregate function argument and three sort keys. However, the user might have intended <placeholder-2/>If <literal>myaggregate</literal>is variadic, both these calls could be perfectly valid.</xref>"
msgstr ""

#: xml/xaggr.xml:321(para)
msgid "For the same reason, it's wise to think twice before creating aggregate functions with the same names and different numbers of regular arguments."
msgstr ""

#: xml/xaggr.xml:327(title)
msgid "Ordered-Set Aggregates"
msgstr ""

#: xml/xaggr.xml:330(secondary)
msgid "ordered set"
msgstr ""

#: xml/xaggr.xml:348(programlisting)
#, no-wrap
msgid "CREATE FUNCTION\n    ordered_set_transition(internal, anyelement) RETURNS internal\n    ...; CREATE FUNCTION percentile_disc_final(internal, float8,\n    anyelement) RETURNS anyelement ...; CREATE AGGREGATE\n    percentile_disc (float8 ORDER BY anyelement) ( sfunc =\n    ordered_set_transition, stype = internal, finalfunc =\n    percentile_disc_final, finalfunc_extra );"
msgstr ""

#: xml/xaggr.xml:360(programlisting)
#, no-wrap
msgid "SELECT percentile_disc(0.5) WITHIN GROUP (ORDER\n    BY income) FROM households; percentile_disc -----------------\n    50489"
msgstr ""

#: xml/xaggr.xml:332(para)
msgid "The aggregates we have been describing so far are <quote>normal</quote>aggregates. <productname>PostgreSQL</productname>also supports <firstterm>ordered-set aggregates</firstterm>, which differ from normal aggregates in two key ways. First, in addition to ordinary aggregated arguments that are evaluated once per input row, an ordered-set aggregate can have <quote>direct</quote>arguments that are evaluated only once per aggregation operation. Second, the syntax for the ordinary aggregated arguments specifies a sort ordering for them explicitly. An ordered-set aggregate is usually used to implement a computation that depends on a specific row ordering, for instance rank or percentile, so that the sort ordering is a required aspect of any call. For example, the built-in definition of <function>percentile_disc</function>is equivalent to: <placeholder-1/>This aggregate takes a <type>float8</type>direct argument (the percentile fraction) and an aggregated input that can be of any sortable data type. It could be used to obtain a median household income like this: <placeholder-2/>Here, <literal>0.5</literal>is a direct argument; it would make no sense for the percentile fraction to be a value varying across rows."
msgstr ""

#: xml/xaggr.xml:366(para)
msgid "Unlike the case for normal aggregates, the sorting of input rows for an ordered-set aggregate is <emphasis>not</emphasis>done behind the scenes, but is the responsibility of the aggregate's support functions. The typical implementation approach is to keep a reference to a <quote>tuplesort</quote>object in the aggregate's state value, feed the incoming rows into that object, and then complete the sorting and read out the data in the final function. This design allows the final function to perform special operations such as injecting additional <quote>hypothetical</quote>rows into the data to be sorted. While normal aggregates can often be implemented with support functions written in <application>PL/pgSQL</application>or another PL language, ordered-set aggregates generally have to be written in C, since their state values aren't definable as any SQL data type. (In the above example, notice that the state value is declared as type <type>internal</type>this is typical.)"
msgstr ""

#: xml/xaggr.xml:385(para)
msgid "The state transition function for an ordered-set aggregate receives the current state value plus the aggregated input values for each row, and returns the updated state value. This is the same definition as for normal aggregates, but note that the direct arguments (if any) are not provided. The final function receives the last state value, the values of the direct arguments if any, and (if <literal>finalfunc_extra</literal>is specified) null values corresponding to the aggregated input(s). As with normal aggregates, <literal>finalfunc_extra</literal>is only really useful if the aggregate is polymorphic; then the extra dummy argument(s) are needed to connect the final function's result type to the aggregate's input type(s)."
msgstr ""

#: xml/xaggr.xml:399(para)
msgid "Currently, ordered-set aggregates cannot be used as window functions, and therefore there is no need for them to support moving-aggregate mode."
msgstr ""

#: xml/xaggr.xml:404(title)
msgid "Support Functions for Aggregates"
msgstr ""

#: xml/xaggr.xml:407(secondary)
msgid "support functions for"
msgstr ""

#: xml/xaggr.xml:412(programlisting)
#, no-wrap
msgid "if (AggCheckCallContext(fcinfo,\n    NULL))"
msgstr ""

#: xml/xaggr.xml:409(para)
msgid "A function written in C can detect that it is being called as an aggregate transition or final function by calling <function>AggCheckCallContext</function>, for example: <placeholder-1/>One reason for checking this is that when it is true for a transition function, the first input must be a temporary state value and can therefore safely be modified in-place rather than allocating a new copy. See <literal>int8inc()</literal>for an example. (This is the <emphasis>only</emphasis>case where it is safe for a function to modify a pass-by-reference input. In particular, final functions for normal aggregates must not modify their inputs in any case, because in some cases they will be re-executed on the same final state value.)"
msgstr ""

#: xml/xaggr.xml:423(para)
msgid "Another support routine available to aggregate functions written in C is <function>AggGetAggref</function>, which returns the <literal>Aggref</literal>parse node that defines the aggregate call. This is mainly useful for ordered-set aggregates, which can inspect the substructure of the <literal>Aggref</literal>node to find out what sort ordering they are supposed to implement. Examples can be found in <filename>orderedsetaggs.c</filename>in the <productname>PostgreSQL</productname>source code."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/xaggr.xml:0(None)
msgid "translator-credits"
msgstr ""

