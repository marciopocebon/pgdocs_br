msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-04-29 18:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: xml/extend.xml:3(title)
msgid "Extending <acronym>SQL</acronym>"
msgstr ""

#: xml/extend.xml:6(primary)
msgid "extending SQL"
msgstr ""

#: xml/extend.xml:14(para)
msgid "functions (starting in <xref linkend=\"xfunc\">)</xref>"
msgstr ""

#: xml/extend.xml:18(para)
msgid "aggregates (starting in <xref linkend=\"xaggr\">)</xref>"
msgstr ""

#: xml/extend.xml:22(para)
msgid "data types (starting in <xref linkend=\"xtypes\">)</xref>"
msgstr ""

#: xml/extend.xml:26(para)
msgid "operators (starting in <xref linkend=\"xoper\">)</xref>"
msgstr ""

#: xml/extend.xml:30(para)
msgid "operator classes for indexes (starting in <xref linkend=\"xindex\">)</xref>"
msgstr ""

#: xml/extend.xml:34(para)
msgid "packages of related objects (starting in <xref linkend=\"extend-extensions\">)</xref>"
msgstr ""

#: xml/extend.xml:8(para)
msgid "In the sections that follow, we will discuss how you can extend the <productname>PostgreSQL</productname><acronym>SQL</acronym>query language by adding: <placeholder-1/>"
msgstr ""

#: xml/extend.xml:39(title)
msgid "How Extensibility Works"
msgstr ""

#: xml/extend.xml:40(para)
msgid "<productname>PostgreSQL</productname>is extensible because its operation is catalog-driven. If you are familiar with standard relational database systems, you know that they store information about databases, tables, columns, etc., in what are commonly known as system catalogs. (Some systems call this the data dictionary.) The catalogs appear to the user as tables like any other, but the <acronym>DBMS</acronym>stores its internal bookkeeping in them. One key difference between <productname>PostgreSQL</productname>and standard relational database systems is that <productname>PostgreSQL</productname>stores much more information in its catalogs: not only information about tables and columns, but also information about data types, functions, access methods, and so on. These tables can be modified by the user, and since <productname>PostgreSQL</productname>bases its operation on these tables, this means that <productname>PostgreSQL</productname>can be extended by users. By comparison, conventional database systems can only be extended by changing hardcoded procedures in the source code or by loading modules specially written by the <acronym>DBMS</acronym>vendor."
msgstr ""

#: xml/extend.xml:64(para)
msgid "The <productname>PostgreSQL</productname>server can moreover incorporate user-written code into itself through dynamic loading. That is, the user can specify an object code file (e.g., a shared library) that implements a new type or function, and <productname>PostgreSQL</productname>will load it as required. Code written in <acronym>SQL</acronym>is even more trivial to add to the server. This ability to modify its operation <quote>on the fly</quote>makes <productname>PostgreSQL</productname>uniquely suited for rapid prototyping of new applications and storage structures."
msgstr ""

#: xml/extend.xml:79(title)
msgid "The <productname>PostgreSQL</productname>Type System"
msgstr ""

#: xml/extend.xml:82(primary)
msgid "base type"
msgstr ""

#: xml/extend.xml:85(primary) xml/extend.xml:92(primary)
msgid "data type"
msgstr ""

#: xml/extend.xml:86(secondary)
msgid "base"
msgstr ""

#: xml/extend.xml:89(primary)
msgid "composite type"
msgstr ""

#: xml/extend.xml:93(secondary)
msgid "composite"
msgstr ""

#: xml/extend.xml:95(para)
msgid "<productname>PostgreSQL</productname>data types are divided into base types, composite types, domains, and pseudo-types."
msgstr ""

#: xml/extend.xml:100(title)
msgid "Base Types"
msgstr ""

#: xml/extend.xml:101(para)
msgid "Base types are those, like <type>int4</type>, that are implemented below the level of the <acronym>SQL</acronym>language (typically in a low-level language such as C). They generally correspond to what are often known as abstract data types. <productname>PostgreSQL</productname>can only operate on such types through functions provided by the user and only understands the behavior of such types to the extent that the user describes them. Base types are further subdivided into scalar and array types. For each scalar type, a corresponding array type is automatically created that can hold variable-size arrays of that scalar type."
msgstr ""

#: xml/extend.xml:116(title)
msgid "Composite Types"
msgstr ""

#: xml/extend.xml:117(para)
msgid "Composite types, or row types, are created whenever the user creates a table. It is also possible to use <xref linkend=\"sql-createtype\">to define a <quote>stand-alone</quote>composite type with no associated table. A composite type is simply a list of types with associated field names. A value of a composite type is a row or record of field values. The user can access the component fields from <acronym>SQL</acronym>queries. Refer to <xref linkend=\"rowtypes\">for more information on composite types.</xref></xref>"
msgstr ""

#: xml/extend.xml:130(title)
msgid "Domains"
msgstr ""

#: xml/extend.xml:131(para)
msgid "A domain is based on a particular base type and for many purposes is interchangeable with its base type. However, a domain can have constraints that restrict its valid values to a subset of what the underlying base type would allow."
msgstr ""

#: xml/extend.xml:136(para)
msgid "Domains can be created using the <acronym>SQL</acronym>command <xref linkend=\"sql-createdomain\">. Their creation and use is not discussed in this chapter.</xref>"
msgstr ""

#: xml/extend.xml:142(title)
msgid "Pseudo-Types"
msgstr ""

#: xml/extend.xml:143(para)
msgid "There are a few <quote>pseudo-types</quote>for special purposes. Pseudo-types cannot appear as columns of tables or attributes of composite types, but they can be used to declare the argument and result types of functions. This provides a mechanism within the type system to identify special classes of functions. <xref linkend=\"datatype-pseudotypes-table\">lists the existing pseudo-types.</xref>"
msgstr ""

#: xml/extend.xml:153(title)
msgid "Polymorphic Types"
msgstr ""

#: xml/extend.xml:155(primary)
msgid "polymorphic type"
msgstr ""

#: xml/extend.xml:158(primary)
msgid "polymorphic function"
msgstr ""

#: xml/extend.xml:161(primary)
msgid "type"
msgstr ""

#: xml/extend.xml:162(secondary) xml/extend.xml:166(secondary)
msgid "polymorphic"
msgstr ""

#: xml/extend.xml:165(primary)
msgid "function"
msgstr ""

#: xml/extend.xml:168(para)
msgid "Five pseudo-types of special interest are <type>anyelement</type>, <type>anyarray</type>, <type>anynonarray</type>, <type>anyenum</type>, and <type>anyrange</type>, which are collectively called <firstterm>polymorphic types</firstterm>. Any function declared using these types is said to be a <firstterm>polymorphic function</firstterm>. A polymorphic function can operate on many different data types, with the specific data type(s) being determined by the data types actually passed to it in a particular call."
msgstr ""

#: xml/extend.xml:180(para)
msgid "Polymorphic arguments and results are tied to each other and are resolved to a specific data type when a query calling a polymorphic function is parsed. Each position (either argument or return value) declared as <type>anyelement</type>is allowed to have any specific actual data type, but in any given call they must all be the <emphasis>same</emphasis>actual type. Each position declared as <type>anyarray</type>can have any array data type, but similarly they must all be the same type. And similarly, positions declared as <type>anyrange</type>must all be the same range type. Furthermore, if there are positions declared <type>anyarray</type>and others declared <type>anyelement</type>, the actual array type in the <type>anyarray</type>positions must be an array whose elements are the same type appearing in the <type>anyelement</type>positions. Similarly, if there are positions declared <type>anyrange</type>and others declared <type>anyelement</type>, the actual range type in the <type>anyrange</type>positions must be a range whose subtype is the same type appearing in the <type>anyelement</type>positions. <type>anynonarray</type>is treated exactly the same as <type>anyelement</type>, but adds the additional constraint that the actual type must not be an array type. <type>anyenum</type>is treated exactly the same as <type>anyelement</type>, but adds the additional constraint that the actual type must be an enum type."
msgstr ""

#: xml/extend.xml:210(para)
msgid "Thus, when more than one argument position is declared with a polymorphic type, the net effect is that only certain combinations of actual argument types are allowed. For example, a function declared as <literal>equal(anyelement, anyelement)</literal>will take any two input values, so long as they are of the same data type."
msgstr ""

#: xml/extend.xml:217(para)
msgid "When the return value of a function is declared as a polymorphic type, there must be at least one argument position that is also polymorphic, and the actual data type supplied as the argument determines the actual result type for that call. For example, if there were not already an array subscripting mechanism, one could define a function that implements subscripting as <literal>subscript(anyarray, integer) returns anyelement</literal>. This declaration constrains the actual first argument to be an array type, and allows the parser to infer the correct result type from the actual first argument's type. Another example is that a function declared as <literal>f(anyarray) returns anyenum</literal>will only accept arrays of enum types."
msgstr ""

#: xml/extend.xml:232(para)
msgid "Note that <type>anynonarray</type>and <type>anyenum</type>do not represent separate type variables; they are the same type as <type>anyelement</type>, just with an additional constraint. For example, declaring a function as <literal>f(anyelement, anyenum)</literal>is equivalent to declaring it as <literal>f(anyenum, anyenum)</literal>: both actual arguments have to be the same enum type."
msgstr ""

#: xml/extend.xml:242(para)
msgid "A variadic function (one taking a variable number of arguments, as in <xref linkend=\"xfunc-sql-variadic-functions\">) can be polymorphic: this is accomplished by declaring its last parameter as <literal>VARIADIC</literal><type>anyarray</type>. For purposes of argument matching and determining the actual result type, such a function behaves the same as if you had written the appropriate number of <type>anynonarray</type>parameters.</xref>"
msgstr ""

#: xml/extend.xml:255(title)
msgid "Packaging Related Objects into an Extension"
msgstr ""

#: xml/extend.xml:257(primary)
msgid "extension"
msgstr ""

#: xml/extend.xml:259(para)
msgid "A useful extension to <productname>PostgreSQL</productname>typically includes multiple SQL objects; for example, a new data type will require new functions, new operators, and probably new index operator classes. It is helpful to collect all these objects into a single package to simplify database management. <productname>PostgreSQL</productname>calls such a package an <firstterm>extension</firstterm>. To define an extension, you need at least a <firstterm>script file</firstterm>that contains the <acronym>SQL</acronym>commands to create the extension's objects, and a <firstterm>control file</firstterm>that specifies a few basic properties of the extension itself. If the extension includes C code, there will typically also be a shared library file into which the C code has been built. Once you have these files, a simple <xref linkend=\"sql-createextension\">command loads the objects into your database.</xref>"
msgstr ""

#: xml/extend.xml:278(para)
msgid "The main advantage of using an extension, rather than just running the <acronym>SQL</acronym>script to load a bunch of <quote>loose</quote>objects into your database, is that <productname>PostgreSQL</productname>will then understand that the objects of the extension go together. You can drop all the objects with a single <xref linkend=\"sql-dropextension\">command (no need to maintain a separate <quote>uninstall</quote>script). Even more useful, <application>pg_dump</application>knows that it should not dump the individual member objects of the extension it will just include a <command>CREATE EXTENSION</command>command in dumps, instead. This vastly simplifies migration to a new version of the extension that might contain more or different objects than the old version. Note however that you must have the extension's control, script, and other files available when loading such a dump into a new database.</xref>"
msgstr ""

#: xml/extend.xml:297(para)
msgid "<productname>PostgreSQL</productname>will not let you drop an individual object contained in an extension, except by dropping the whole extension. Also, while you can change the definition of an extension member object (for example, via <command>CREATE OR REPLACE FUNCTION</command>for a function), bear in mind that the modified definition will not be dumped by <application>pg_dump</application>. Such a change is usually only sensible if you concurrently make the same change in the extension's script file. (But there are special provisions for tables containing configuration data; see below.)"
msgstr ""

#: xml/extend.xml:309(para)
msgid "The extension mechanism also has provisions for packaging modification scripts that adjust the definitions of the SQL objects contained in an extension. For example, if version 1.1 of an extension adds one function and changes the body of another function compared to 1.0, the extension author can provide an <firstterm>update script</firstterm>that makes just those two changes. The <command>ALTER EXTENSION UPDATE</command>command can then be used to apply these changes and track which version of the extension is actually installed in a given database."
msgstr ""

#: xml/extend.xml:320(para)
msgid "The kinds of SQL objects that can be members of an extension are shown in the description of <xref linkend=\"sql-alterextension\">. Notably, objects that are database-cluster-wide, such as databases, roles, and tablespaces, cannot be extension members since an extension is only known within one database. (Although an extension script is not prohibited from creating such objects, if it does so they will not be tracked as part of the extension.) Also notice that while a table can be a member of an extension, its subsidiary objects such as indexes are not directly considered members of the extension. Another important point is that schemas can belong to extensions, but not vice versa: an extension as such has an unqualified name and does not exist <quote>within</quote>any schema. The extension's member objects, however, will belong to schemas whenever appropriate for their object types. It may or may not be appropriate for an extension to own the schema(s) its member objects are within.</xref>"
msgstr ""

#: xml/extend.xml:339(title)
msgid "Extension Files"
msgstr ""

#: xml/extend.xml:341(primary)
msgid "control file"
msgstr ""

#: xml/extend.xml:343(para)
msgid "The <xref linkend=\"sql-createextension\">command relies on a control file for each extension, which must be named the same as the extension with a suffix of <literal>.control</literal>, and must be placed in the installation's <literal>SHAREDIR/extension</literal>directory. There must also be at least one <acronym>SQL</acronym>script file, which follows the naming pattern <literal><replaceable>extension</replaceable>-- <replaceable>version</replaceable>.sql</literal>(for example, <literal>foo--1.0.sql</literal>for version <literal>1.0</literal>of extension <literal>foo</literal>). By default, the script file(s) are also placed in the <literal>SHAREDIR/extension</literal>directory; but the control file can specify a different directory for the script file(s).</xref>"
msgstr ""

#: xml/extend.xml:364(para)
msgid "The file format for an extension control file is the same as for the <filename>postgresql.conf</filename>file, namely a list of <replaceable>parameter_name</replaceable><literal>=</literal><replaceable>value</replaceable>assignments, one per line. Blank lines and comments introduced by <literal>#</literal>are allowed. Be sure to quote any value that is not a single word or number."
msgstr ""

#: xml/extend.xml:373(para)
msgid "A control file can set the following parameters:"
msgstr ""

#: xml/extend.xml:376(term)
msgid "<varname>directory</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:380(para)
msgid "The directory containing the extension's <acronym>SQL</acronym>script file(s). Unless an absolute path is given, the name is relative to the installation's <literal>SHAREDIR</literal>directory. The default behavior is equivalent to specifying <literal>directory = 'extension'</literal>."
msgstr ""

#: xml/extend.xml:390(term)
msgid "<varname>default_version</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:394(para)
msgid "The default version of the extension (the one that will be installed if no version is specified in <command>CREATE EXTENSION</command>). Although this can be omitted, that will result in <command>CREATE EXTENSION</command>failing if no <literal>VERSION</literal>option appears, so you generally don't want to do that."
msgstr ""

#: xml/extend.xml:404(term)
msgid "<varname>comment</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:408(para)
msgid "A comment (any string) about the extension. Alternatively, the comment can be set by means of the <xref linkend=\"sql-comment\">command in the script file.</xref>"
msgstr ""

#: xml/extend.xml:415(term)
msgid "<varname>encoding</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:419(para)
msgid "The character set encoding used by the script file(s). This should be specified if the script files contain any non-ASCII characters. Otherwise the files will be assumed to be in the database encoding."
msgstr ""

#: xml/extend.xml:426(term)
msgid "<varname>module_pathname</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:430(para)
msgid "The value of this parameter will be substituted for each occurrence of <literal>MODULE_PATHNAME</literal>in the script file(s). If it is not set, no substitution is made. Typically, this is set to <literal>$libdir/ <replaceable> shared_library_name</replaceable></literal>and then <literal>MODULE_PATHNAME</literal>is used in <command>CREATE FUNCTION</command>commands for C-language functions, so that the script files do not need to hard-wire the name of the shared library."
msgstr ""

#: xml/extend.xml:446(term)
msgid "<varname>requires</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:450(para)
msgid "A list of names of extensions that this extension depends on, for example <literal>requires = 'foo, bar'</literal>. Those extensions must be installed before this one can be installed."
msgstr ""

#: xml/extend.xml:458(term)
msgid "<varname>superuser</varname>( <type>boolean</type>)"
msgstr ""

#: xml/extend.xml:462(para)
msgid "If this parameter is <literal>true</literal>(which is the default), only superusers can create the extension or update it to a new version. If it is set to <literal>false</literal>, just the privileges required to execute the commands in the installation or update script are required."
msgstr ""

#: xml/extend.xml:472(term)
msgid "<varname>relocatable</varname>( <type>boolean</type>)"
msgstr ""

#: xml/extend.xml:476(para)
msgid "An extension is <firstterm>relocatable</firstterm>if it is possible to move its contained objects into a different schema after initial creation of the extension. The default is <literal>false</literal>, i.e. the extension is not relocatable. See below for more information."
msgstr ""

#: xml/extend.xml:486(term)
msgid "<varname>schema</varname>( <type>string</type>)"
msgstr ""

#: xml/extend.xml:490(para)
msgid "This parameter can only be set for non-relocatable extensions. It forces the extension to be loaded into exactly the named schema and not any other. See below for more information."
msgstr ""

#: xml/extend.xml:497(para)
msgid "In addition to the primary control file <literal><replaceable>extension</replaceable>.control</literal>, an extension can have secondary control files named in the style <literal><replaceable>extension</replaceable>-- <replaceable>version</replaceable>.control</literal>. If supplied, these must be located in the script file directory. Secondary control files follow the same format as the primary control file. Any parameters set in a secondary control file override the primary control file when installing or updating to that version of the extension. However, the parameters <varname>directory</varname>and <varname>default_version</varname>cannot be set in a secondary control file."
msgstr ""

#: xml/extend.xml:513(para)
msgid "An extension's <acronym>SQL</acronym>script files can contain any SQL commands, except for transaction control commands ( <command>BEGIN</command>, <command>COMMIT</command>, etc) and commands that cannot be executed inside a transaction block (such as <command>VACUUM</command>). This is because the script files are implicitly executed within a transaction block."
msgstr ""

#: xml/extend.xml:521(para)
msgid "An extension's <acronym>SQL</acronym>script files can also contain lines beginning with <literal>\\echo</literal>, which will be ignored (treated as comments) by the extension mechanism. This provision is commonly used to throw an error if the script file is fed to <application>psql</application>rather than being loaded via <command>CREATE EXTENSION</command>(see example script below). Without that, users might accidentally load the extension's contents as <quote>loose</quote>objects rather than as an extension, a state of affairs that's a bit tedious to recover from."
msgstr ""

#: xml/extend.xml:533(para)
msgid "While the script files can contain any characters allowed by the specified encoding, control files should contain only plain ASCII, because there is no way for <productname>PostgreSQL</productname>to know what encoding a control file is in. In practice this is only an issue if you want to use non-ASCII characters in the extension's comment. Recommended practice in that case is to not use the control file <varname>comment</varname>parameter, but instead use <command>COMMENT ON EXTENSION</command>within a script file to set the comment."
msgstr ""

#: xml/extend.xml:546(title)
msgid "Extension Relocatability"
msgstr ""

#: xml/extend.xml:547(para)
msgid "Users often wish to load the objects contained in an extension into a different schema than the extension's author had in mind. There are three supported levels of relocatability:"
msgstr ""

#: xml/extend.xml:553(para)
msgid "A fully relocatable extension can be moved into another schema at any time, even after it's been loaded into a database. This is done with the <command>ALTER EXTENSION SET SCHEMA</command>command, which automatically renames all the member objects into the new schema. Normally, this is only possible if the extension contains no internal assumptions about what schema any of its objects are in. Also, the extension's objects must all be in one schema to begin with (ignoring objects that do not belong to any schema, such as procedural languages). Mark a fully relocatable extension by setting <literal>relocatable = true</literal>in its control file."
msgstr ""

#: xml/extend.xml:569(para)
msgid "An extension might be relocatable during installation but not afterwards. This is typically the case if the extension's script file needs to reference the target schema explicitly, for example in setting <literal>search_path</literal>properties for SQL functions. For such an extension, set <literal>relocatable = false</literal>in its control file, and use <literal>@extschema@</literal>to refer to the target schema in the script file. All occurrences of this string will be replaced by the actual target schema's name before the script is executed. The user can set the target schema using the <literal>SCHEMA</literal>option of <command>CREATE EXTENSION</command>."
msgstr ""

#: xml/extend.xml:586(para)
msgid "If the extension does not support relocation at all, set <literal>relocatable = false</literal>in its control file, and also set <literal>schema</literal>to the name of the intended target schema. This will prevent use of the <literal>SCHEMA</literal>option of <command>CREATE EXTENSION</command>, unless it specifies the same schema named in the control file. This choice is typically necessary if the extension contains internal assumptions about schema names that can't be replaced by uses of <literal>@extschema@</literal>. The <literal>@extschema@</literal>substitution mechanism is available in this case too, although it is of limited use since the schema name is determined by the control file."
msgstr ""

#: xml/extend.xml:610(programlisting)
#, no-wrap
msgid "SET LOCAL search_path TO\n      @extschema@;"
msgstr ""

#: xml/extend.xml:605(para)
msgid "In all cases, the script file will be executed with <xref linkend=\"guc-search-path\">initially set to point to the target schema; that is, <command>CREATE EXTENSION</command>does the equivalent of this: <placeholder-1/>This allows the objects created by the script file to go into the target schema. The script file can change <varname>search_path</varname>if it wishes, but that is generally undesirable. <varname>search_path</varname>is restored to its previous setting upon completion of <command>CREATE EXTENSION</command>.</xref>"
msgstr ""

#: xml/extend.xml:619(para)
msgid "The target schema is determined by the <varname>schema</varname>parameter in the control file if that is given, otherwise by the <literal>SCHEMA</literal>option of <command>CREATE EXTENSION</command>if that is given, otherwise the current default object creation schema (the first one in the caller's <varname>search_path</varname>). When the control file <varname>schema</varname>parameter is used, the target schema will be created if it doesn't already exist, but in the other two cases it must already exist."
msgstr ""

#: xml/extend.xml:630(para)
msgid "If any prerequisite extensions are listed in <varname>requires</varname>in the control file, their target schemas are appended to the initial setting of <varname>search_path</varname>. This allows their objects to be visible to the new extension's script file."
msgstr ""

#: xml/extend.xml:635(para)
msgid "Although a non-relocatable extension can contain objects spread across multiple schemas, it is usually desirable to place all the objects meant for external use into a single schema, which is considered the extension's target schema. Such an arrangement works conveniently with the default setting of <varname>search_path</varname>during creation of dependent extensions."
msgstr ""

#: xml/extend.xml:645(title)
msgid "Extension Configuration Tables"
msgstr ""

#: xml/extend.xml:646(para)
msgid "Some extensions include configuration tables, which contain data that might be added or changed by the user after installation of the extension. Ordinarily, if a table is part of an extension, neither the table's definition nor its content will be dumped by <application>pg_dump</application>. But that behavior is undesirable for a configuration table; any data changes made by the user need to be included in dumps, or the extension will behave differently after a dump and reload."
msgstr ""

#: xml/extend.xml:656(primary)
msgid "pg_extension_config_dump"
msgstr ""

#: xml/extend.xml:666(programlisting)
#, no-wrap
msgid "CREATE TABLE my_config (key text, value\n      text); SELECT\n      pg_catalog.pg_extension_config_dump('my_config',\n      '');"
msgstr ""

#: xml/extend.xml:658(para)
msgid "To solve this problem, an extension's script file can mark a table it has created as a configuration table, which will cause <application>pg_dump</application>to include the table's contents (not its definition) in dumps. To do that, call the function <function>pg_extension_config_dump(regclass, text)</function>after creating the table, for example <placeholder-1/>Any number of tables can be marked this way."
msgstr ""

#: xml/extend.xml:681(programlisting)
#, no-wrap
msgid "CREATE TABLE my_config (key text, value text,\n      standard_entry boolean); SELECT\n      pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT\n      standard_entry');"
msgstr ""

#: xml/extend.xml:671(para)
msgid "When the second argument of <function>pg_extension_config_dump</function>is an empty string, the entire contents of the table are dumped by <application>pg_dump</application>. This is usually only correct if the table is initially empty as created by the extension script. If there is a mixture of initial data and user-provided data in the table, the second argument of <function>pg_extension_config_dump</function>provides a <literal>WHERE</literal>condition that selects the data to be dumped. For example, you might do <placeholder-1/>and then make sure that <structfield>standard_entry</structfield>is true only in the rows created by the extension's script."
msgstr ""

#: xml/extend.xml:687(para)
msgid "More complicated situations, such as initially-provided rows that might be modified by users, can be handled by creating triggers on the configuration table to ensure that modified rows are marked correctly."
msgstr ""

#: xml/extend.xml:691(para)
msgid "You can alter the filter condition associated with a configuration table by calling <function>pg_extension_config_dump</function>again. (This would typically be useful in an extension update script.) The only way to mark a table as no longer a configuration table is to dissociate it from the extension with <command>ALTER EXTENSION ... DROP TABLE</command>."
msgstr ""

#: xml/extend.xml:698(para)
msgid "Note that foreign key relationships between these tables will dictate the order in which the tables are dumped out by pg_dump. Specifically, pg_dump will attempt to dump the referenced-by table before the referencing table. As the foreign key relationships are set up at CREATE EXTENSION time (prior to data being loaded into the tables) circular dependencies are not supported. When circular dependencies exist, the data will still be dumped out but the dump will not be able to be restored directly and user intervention will be required."
msgstr ""

#: xml/extend.xml:710(title)
msgid "Extension Updates"
msgstr ""

#: xml/extend.xml:711(para)
msgid "One advantage of the extension mechanism is that it provides convenient ways to manage updates to the SQL commands that define an extension's objects. This is done by associating a version name or number with each released version of the extension's installation script. In addition, if you want users to be able to update their databases dynamically from one version to the next, you should provide <firstterm>update scripts</firstterm>that make the necessary changes to go from one version to the next. Update scripts have names following the pattern <literal><replaceable>extension</replaceable>-- <replaceable>oldversion</replaceable>-- <replaceable>newversion</replaceable>.sql</literal>(for example, <literal>foo--1.0--1.1.sql</literal>contains the commands to modify version <literal>1.0</literal>of extension <literal>foo</literal>into version <literal>1.1</literal>)."
msgstr ""

#: xml/extend.xml:731(para)
msgid "Given that a suitable update script is available, the command <command>ALTER EXTENSION UPDATE</command>will update an installed extension to the specified new version. The update script is run in the same environment that <command>CREATE EXTENSION</command>provides for installation scripts: in particular, <varname>search_path</varname>is set up in the same way, and any new objects created by the script are automatically added to the extension."
msgstr ""

#: xml/extend.xml:741(para)
msgid "If an extension has secondary control files, the control parameters that are used for an update script are those associated with the script's target (new) version."
msgstr ""

#: xml/extend.xml:745(para)
msgid "The update mechanism can be used to solve an important special case: converting a <quote>loose</quote>collection of objects into an extension. Before the extension mechanism was added to <productname>PostgreSQL</productname>(in 9.1), many people wrote extension modules that simply created assorted unpackaged objects. Given an existing database containing such objects, how can we convert the objects into a properly packaged extension? Dropping them and then doing a plain <command>CREATE EXTENSION</command>is one way, but it's not desirable if the objects have dependencies (for example, if there are table columns of a data type created by the extension). The way to fix this situation is to create an empty extension, then use <command>ALTER EXTENSION ADD</command>to attach each pre-existing object to the extension, then finally create any new objects that are in the current extension version but were not in the unpackaged release. <command>CREATE EXTENSION</command>supports this case with its <literal>FROM</literal><replaceable class=\"parameter\"> old_version</replaceable>option, which causes it to not run the normal installation script for the target version, but instead the update script named <literal><replaceable>extension</replaceable>-- <replaceable>old_version</replaceable>-- <replaceable>target_version</replaceable>.sql</literal>. The choice of the dummy version name to use as <replaceable class=\"parameter\">old_version</replaceable>is up to the extension author, though <literal>unpackaged</literal>is a common convention. If you have multiple prior versions you need to be able to update into extension style, use multiple dummy version names to identify them."
msgstr ""

#: xml/extend.xml:781(para)
msgid "<command>ALTER EXTENSION</command>is able to execute sequences of update script files to achieve a requested update. For example, if only <literal>foo--1.0--1.1.sql</literal>and <literal>foo--1.1--2.0.sql</literal>are available, <command>ALTER EXTENSION</command>will apply them in sequence if an update to version <literal>2.0</literal>is requested when <literal>1.0</literal>is currently installed."
msgstr ""

#: xml/extend.xml:791(para)
msgid "<productname>PostgreSQL</productname>doesn't assume anything about the properties of version names: for example, it does not know whether <literal>1.1</literal>follows <literal>1.0</literal>. It just matches up the available version names and follows the path that requires applying the fewest update scripts. (A version name can actually be any string that doesn't contain <literal>--</literal>or leading or trailing <literal>-</literal>.)"
msgstr ""

#: xml/extend.xml:802(para)
msgid "Sometimes it is useful to provide <quote>downgrade</quote>scripts, for example <literal>foo--1.1--1.0.sql</literal>to allow reverting the changes associated with version <literal>1.1</literal>. If you do that, be careful of the possibility that a downgrade script might unexpectedly get applied because it yields a shorter path. The risky case is where there is a <quote>fast path</quote>update script that jumps ahead several versions as well as a downgrade script to the fast path's start point. It might take fewer steps to apply the downgrade and then the fast path than to move ahead one version at a time. If the downgrade script drops any irreplaceable objects, this will yield undesirable results."
msgstr ""

#: xml/extend.xml:819(programlisting)
#, no-wrap
msgid "SELECT * FROM pg_extension_update_paths(' \n      <replaceable>\n      extension_name</replaceable>');"
msgstr ""

#: xml/extend.xml:817(para)
msgid "To check for unexpected update paths, use this command: <placeholder-1/>This shows each pair of distinct known version names for the specified extension, together with the update path sequence that would be taken to get from the source version to the target version, or <literal>NULL</literal>if there is no available update path. The path is shown in textual form with <literal>--</literal>separators. You can use <literal>regexp_split_to_array(path,'--')</literal>if you prefer an array format."
msgstr ""

#: xml/extend.xml:833(title)
msgid "Extension Example"
msgstr ""

#: xml/extend.xml:834(para)
msgid "Here is a complete example of an <acronym>SQL</acronym>-only extension, a two-element composite type that can store any type of value in its slots, which are named <quote>k</quote>and <quote>v</quote>. Non-text values are automatically coerced to text for storage."
msgstr ""

#: xml/extend.xml:843(programlisting)
#, no-wrap
msgid "-- complain if script is sourced in psql,\n      rather than via CREATE EXTENSION \\echo Use \"CREATE EXTENSION\n      pair\" to load this file. \\quit CREATE TYPE pair AS ( k text,\n      v text ); CREATE OR REPLACE FUNCTION pair(anyelement, text)\n      RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair';\n      CREATE OR REPLACE FUNCTION pair(text, anyelement) RETURNS\n      pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair'; CREATE OR\n      REPLACE FUNCTION pair(anyelement, anyelement) RETURNS pair\n      LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair'; CREATE OR REPLACE\n      FUNCTION pair(text, text) RETURNS pair LANGUAGE SQL AS\n      'SELECT ROW($1, $2)::pair;'; CREATE OPERATOR ~&gt; (LEFTARG =\n      text, RIGHTARG = anyelement, PROCEDURE = pair); CREATE\n      OPERATOR ~&gt; (LEFTARG = anyelement, RIGHTARG = text,\n      PROCEDURE = pair); CREATE OPERATOR ~&gt; (LEFTARG =\n      anyelement, RIGHTARG = anyelement, PROCEDURE = pair); CREATE\n      OPERATOR ~&gt; (LEFTARG = text, RIGHTARG = text, PROCEDURE =\n      pair);"
msgstr ""

#: xml/extend.xml:841(para)
msgid "The script file <filename>pair--1.0.sql</filename>looks like this: <placeholder-1/>"
msgstr ""

#: xml/extend.xml:862(programlisting)
#, no-wrap
msgid "# pair extension comment = 'A key/value pair\n      data type' default_version = '1.0' relocatable =\n      true"
msgstr ""

#: xml/extend.xml:860(para)
msgid "The control file <filename>pair.control</filename>looks like this: <placeholder-1/>"
msgstr ""

#: xml/extend.xml:868(programlisting)
#, no-wrap
msgid "EXTENSION = pair DATA = pair--1.0.sql\n      PG_CONFIG = pg_config PGXS := $(shell $(PG_CONFIG) --pgxs)\n      include $(PGXS)"
msgstr ""

#: xml/extend.xml:865(para)
msgid "While you hardly need a makefile to install these two files into the correct directory, you could use a <filename>Makefile</filename>containing this: <placeholder-1/>This makefile relies on <acronym>PGXS</acronym>, which is described in <xref linkend=\"extend-pgxs\">. The command <literal>make install</literal>will install the control and script files into the correct directory as reported by <application>pg_config</application>.</xref>"
msgstr ""

#: xml/extend.xml:876(para)
msgid "Once the files are installed, use the <xref linkend=\"sql-createextension\">command to load the objects into any particular database.</xref>"
msgstr ""

#: xml/extend.xml:882(title)
msgid "Extension Building Infrastructure"
msgstr ""

#: xml/extend.xml:884(primary)
msgid "pgxs"
msgstr ""

#: xml/extend.xml:886(para)
msgid "If you are thinking about distributing your <productname>PostgreSQL</productname>extension modules, setting up a portable build system for them can be fairly difficult. Therefore the <productname>PostgreSQL</productname>installation provides a build infrastructure for extensions, called <acronym>PGXS</acronym>, so that simple extension modules can be built simply against an already installed server. <acronym>PGXS</acronym>is mainly intended for extensions that include C code, although it can be used for pure-SQL extensions too. Note that <acronym>PGXS</acronym>is not intended to be a universal build system framework that can be used to build any software interfacing to <productname>PostgreSQL</productname>; it simply automates common build rules for simple server extension modules. For more complicated packages, you might need to write your own build system."
msgstr ""

#: xml/extend.xml:913(programlisting)
#, no-wrap
msgid "MODULES = isbn_issn EXTENSION = isbn_issn DATA\n    = isbn_issn--1.0.sql DOCS = README.isbn_issn PG_CONFIG =\n    pg_config PGXS := $(shell $(PG_CONFIG) --pgxs) include\n    $(PGXS)"
msgstr ""

#: xml/extend.xml:904(para)
msgid "To use the <acronym>PGXS</acronym>infrastructure for your extension, you must write a simple makefile. In the makefile, you need to set some variables and include the global <acronym>PGXS</acronym>makefile. Here is an example that builds an extension module named <literal>isbn_issn</literal>, consisting of a shared library containing some C code, an extension control file, a SQL script, and a documentation text file: <placeholder-1/>The last three lines should always be the same. Earlier in the file, you assign variables or add custom <application>make</application>rules."
msgstr ""

#: xml/extend.xml:925(varname)
msgid "MODULES"
msgstr ""

#: xml/extend.xml:928(para)
msgid "list of shared-library objects to be built from source files with same stem (do not include library suffixes in this list)"
msgstr ""

#: xml/extend.xml:935(varname)
msgid "MODULE_big"
msgstr ""

#: xml/extend.xml:938(para)
msgid "a shared library to build from multiple source files (list object files in <varname>OBJS</varname>)"
msgstr ""

#: xml/extend.xml:945(varname)
msgid "PROGRAM"
msgstr ""

#: xml/extend.xml:948(para)
msgid "an executable program to build (list object files in <varname>OBJS</varname>)"
msgstr ""

#: xml/extend.xml:957(varname)
msgid "EXTENSION"
msgstr ""

#: xml/extend.xml:960(para)
msgid "extension name(s); for each name you must provide an <literal><replaceable> extension</replaceable>.control</literal>file, which will be installed into <literal><replaceable> prefix</replaceable>/share/extension</literal>"
msgstr ""

#: xml/extend.xml:973(varname)
msgid "MODULEDIR"
msgstr ""

#: xml/extend.xml:976(para)
msgid "subdirectory of <literal><replaceable>prefix</replaceable>/share</literal>into which DATA and DOCS files should be installed (if not set, default is <literal>extension</literal>if <varname>EXTENSION</varname>is set, or <literal>contrib</literal>if not)"
msgstr ""

#: xml/extend.xml:988(varname)
msgid "DATA"
msgstr ""

#: xml/extend.xml:991(para)
msgid "random files to install into <literal><replaceable> prefix</replaceable>/share/$MODULEDIR</literal>"
msgstr ""

#: xml/extend.xml:999(varname)
msgid "DATA_built"
msgstr ""

#: xml/extend.xml:1002(para)
msgid "random files to install into <literal><replaceable> prefix</replaceable>/share/$MODULEDIR</literal>, which need to be built first"
msgstr ""

#: xml/extend.xml:1011(varname)
msgid "DATA_TSEARCH"
msgstr ""

#: xml/extend.xml:1014(para)
msgid "random files to install under <literal><replaceable> prefix</replaceable>/share/tsearch_data</literal>"
msgstr ""

#: xml/extend.xml:1022(varname)
msgid "DOCS"
msgstr ""

#: xml/extend.xml:1025(para)
msgid "random files to install under <literal><replaceable> prefix</replaceable>/doc/$MODULEDIR</literal>"
msgstr ""

#: xml/extend.xml:1033(varname)
msgid "SCRIPTS"
msgstr ""

#: xml/extend.xml:1036(para)
msgid "script files (not binaries) to install into <literal><replaceable>prefix</replaceable>/bin</literal>"
msgstr ""

#: xml/extend.xml:1043(varname)
msgid "SCRIPTS_built"
msgstr ""

#: xml/extend.xml:1046(para)
msgid "script files (not binaries) to install into <literal><replaceable>prefix</replaceable>/bin</literal>, which need to be built first"
msgstr ""

#: xml/extend.xml:1054(varname)
msgid "REGRESS"
msgstr ""

#: xml/extend.xml:1057(para)
msgid "list of regression test cases (without suffix), see below"
msgstr ""

#: xml/extend.xml:1063(varname)
msgid "REGRESS_OPTS"
msgstr ""

#: xml/extend.xml:1066(para)
msgid "additional switches to pass to <application>pg_regress</application>"
msgstr ""

#: xml/extend.xml:1072(varname)
msgid "EXTRA_CLEAN"
msgstr ""

#: xml/extend.xml:1075(para)
msgid "extra files to remove in <literal>make clean</literal>"
msgstr ""

#: xml/extend.xml:1081(varname)
msgid "PG_CPPFLAGS"
msgstr ""

#: xml/extend.xml:1084(para)
msgid "will be added to <varname>CPPFLAGS</varname>"
msgstr ""

#: xml/extend.xml:1090(varname)
msgid "PG_LIBS"
msgstr ""

#: xml/extend.xml:1093(para)
msgid "will be added to <varname>PROGRAM</varname>link line"
msgstr ""

#: xml/extend.xml:1099(varname)
msgid "SHLIB_LINK"
msgstr ""

#: xml/extend.xml:1102(para)
msgid "will be added to <varname>MODULE_big</varname>link line"
msgstr ""

#: xml/extend.xml:1108(varname)
msgid "PG_CONFIG"
msgstr ""

#: xml/extend.xml:1111(para)
msgid "path to <application>pg_config</application>program for the <productname>PostgreSQL</productname>installation to build against (typically just <literal>pg_config</literal>to use the first one in your <varname>PATH</varname>)"
msgstr ""

#: xml/extend.xml:920(para)
msgid "Set one of these three variables to specify what is built: <placeholder-1/>The following variables can also be set: <placeholder-2/>"
msgstr ""

#: xml/extend.xml:1120(para)
msgid "Put this makefile as <literal>Makefile</literal>in the directory which holds your extension. Then you can do <literal>make</literal>to compile, and then <literal>make install</literal>to install your module. By default, the extension is compiled and installed for the <productname>PostgreSQL</productname>installation that corresponds to the first <command>pg_config</command>program found in your <varname>PATH</varname>. You can use a different installation by setting <varname>PG_CONFIG</varname>to point to its <command>pg_config</command>program, either within the makefile or on the <literal>make</literal>command line."
msgstr ""

#: xml/extend.xml:1143(programlisting)
#, no-wrap
msgid "mkdir build_dir cd build_dir make -f\n    /path/to/extension/source/tree/Makefile make -f\n    /path/to/extension/source/tree/Makefile\n    install"
msgstr ""

#: xml/extend.xml:1135(para)
msgid "You can also run <literal>make</literal>in a directory outside the source tree of your extension, if you want to keep the build directory separate. This procedure is also called a <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>build. Here's how: <placeholder-1/>"
msgstr ""

#: xml/extend.xml:1154(programlisting)
#, no-wrap
msgid "make VPATH=/path/to/extension/source/tree make\n    VPATH=/path/to/extension/source/tree\n    install"
msgstr ""

#: xml/extend.xml:1147(para)
msgid "Alternatively, you can set up a directory for a VPATH build in a similar way to how it is done for the core code. One way to do this is using the core script <filename>config/prep_buildtree</filename>. Once this has been done you can build by setting the <literal>make</literal>variable <varname>VPATH</varname>like this: <placeholder-1/>This procedure can work with a greater variety of directory layouts."
msgstr ""

#: xml/extend.xml:1158(para)
msgid "The scripts listed in the <varname>REGRESS</varname>variable are used for regression testing of your module, which can be invoked by <literal>make installcheck</literal>after doing <literal>make install</literal>. For this to work you must have a running <productname>PostgreSQL</productname>server. The script files listed in <varname>REGRESS</varname>must appear in a subdirectory named <literal>sql/</literal>in your extension's directory. These files must have extension <literal>.sql</literal>, which must not be included in the <varname>REGRESS</varname>list in the makefile. For each test there should also be a file containing the expected output in a subdirectory named <literal>expected/</literal>, with the same stem and extension <literal>.out</literal>. <literal>make installcheck</literal>executes each test script with <application>psql</application>, and compares the resulting output to the matching expected file. Any differences will be written to the file <literal>regression.diffs</literal>in <command>diff -c</command>format. Note that trying to run a test that is missing its expected file will be reported as <quote>trouble</quote>, so make sure you have all expected files."
msgstr ""

#: xml/extend.xml:1186(para)
msgid "The easiest way to create the expected files is to create empty files, then do a test run (which will of course report differences). Inspect the actual result files found in the <literal>results/</literal>directory, then copy them to <literal>expected/</literal>if they match what you expect from the test."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: xml/extend.xml:0(None)
msgid "translator-credits"
msgstr ""

